diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.badarg.log lab6/.badarg.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.badarg.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.badarg.log	2020-05-24 08:40:01.514554353 +0000
@@ -0,0 +1,112 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badarg".
+fork ok.
+badarg pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.badsegment.log lab6/.badsegment.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.badsegment.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.badsegment.log	2020-05-24 08:39:44.750298756 +0000
@@ -0,0 +1,131 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badsegment".
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000028
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000028
+  eip  0x00800fd8
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/bin/bootblock 和 lab6/bin/bootblock 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/bin/kernel 和 lab6/bin/kernel 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/bin/sign 和 lab6/bin/sign 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/bin/swap.img 和 lab6/bin/swap.img 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/bin/ucore.img 和 lab6/bin/ucore.img 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.divzero.log lab6/.divzero.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.divzero.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.divzero.log	2020-05-24 08:39:46.614327192 +0000
@@ -0,0 +1,131 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "divzero".
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000001
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x00000000 Divide error
+  err  0x00000000
+  eip  0x00800fe0
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.exit.log lab6/.exit.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.exit.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.exit.log	2020-05-24 08:40:03.366582568 +0000
@@ -0,0 +1,116 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "exit".
+I am the parent. Forking the child...
+I am parent, fork a child pid 3
+I am the parent, waiting now..
+I am the child.
+waitpid 3 ok.
+exit pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.faultreadkernel.log lab6/.faultreadkernel.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.faultreadkernel.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.faultreadkernel.log	2020-05-24 08:39:52.174411991 +0000
@@ -0,0 +1,136 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultreadkernel".
+not valid addr fac00000, and  can not find it in vma
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0xfac00000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000005
+  eip  0x00800fd9
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:255:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc03a0f08   eip:0xc0100bae arg :0xc010c808 0xc03a0f4c 0x000000ff 0xc03a0f50
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc03a0f38   eip:0xc010046d arg :0xc010cbee 0x000000ff 0xc010ce90 0xfffffffd
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc03a0f78   eip:0xc0102944 arg :0xc03a0fb4 0x00000000 0x008002be 0x0000001b
+    kern/trap/trap.c:255: trap_dispatch+292
+ebp:0xc03a0fa8   eip:0xc0102be4 arg :0xc03a0fb4 0x00000000 0x00000000 0xafffffa8
+    kern/trap/trap.c:358: trap+74
+ebp:0xafffffa8   eip:0xc01036ac arg :0x00000000 0x00000000 0x00000000 0x00000000
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8   eip:0x008003a1 arg :0x00000000 0x00000000 0x00000000 0x00000000
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.faultread.log lab6/.faultread.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.faultread.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.faultread.log	2020-05-24 08:39:50.318383688 +0000
@@ -0,0 +1,136 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultread".
+not valid addr 0, and  can not find it in vma
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000004
+  eip  0x00800fd9
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:255:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc03a0f08   eip:0xc0100bae arg :0xc010c808 0xc03a0f4c 0x000000ff 0xc03a0f50
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc03a0f38   eip:0xc010046d arg :0xc010cbee 0x000000ff 0xc010ce90 0xfffffffd
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc03a0f78   eip:0xc0102944 arg :0xc03a0fb4 0x00000000 0x008002be 0x0000001b
+    kern/trap/trap.c:255: trap_dispatch+292
+ebp:0xc03a0fa8   eip:0xc0102be4 arg :0xc03a0fb4 0x00000000 0x00000000 0xafffffa8
+    kern/trap/trap.c:358: trap+74
+ebp:0xafffffa8   eip:0xc01036ac arg :0x00000000 0x00000000 0x00000000 0x00000000
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8   eip:0x008003a1 arg :0x00000000 0x00000000 0x00000000 0x00000000
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.forktest.log lab6/.forktest.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.forktest.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.forktest.log	2020-05-24 08:40:09.690678886 +0000
@@ -0,0 +1,143 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktest".
+I am child 31
+I am child 30
+I am child 29
+I am child 28
+I am child 27
+I am child 26
+I am child 25
+I am child 24
+I am child 23
+I am child 22
+I am child 21
+I am child 20
+I am child 19
+I am child 18
+I am child 17
+I am child 16
+I am child 15
+I am child 14
+I am child 13
+I am child 12
+I am child 11
+I am child 10
+I am child 9
+I am child 8
+I am child 7
+I am child 6
+I am child 5
+I am child 4
+I am child 3
+I am child 2
+I am child 1
+I am child 0
+forktest pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.forktree.log lab6/.forktree.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.forktree.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.forktree.log	2020-05-24 08:40:11.618708241 +0000
@@ -0,0 +1,141 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktree".
+0002: I am ''
+0004: I am '1'
+0006: I am '11'
+0008: I am '111'
+000a: I am '1111'
+0009: I am '1110'
+0007: I am '110'
+000c: I am '1101'
+000b: I am '1100'
+0005: I am '10'
+000e: I am '101'
+0010: I am '1011'
+000f: I am '1010'
+000d: I am '100'
+0012: I am '1001'
+0011: I am '1000'
+0003: I am '0'
+0014: I am '01'
+0016: I am '011'
+0018: I am '0111'
+0017: I am '0110'
+0015: I am '010'
+001a: I am '0101'
+0019: I am '0100'
+0013: I am '00'
+001c: I am '001'
+001e: I am '0011'
+001d: I am '0010'
+001b: I am '000'
+0020: I am '0001'
+001f: I am '0000'
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.gdb.in lab6/.gdb.in
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.gdb.in	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.gdb.in	2020-05-24 08:40:24.978911533 +0000
@@ -0,0 +1,4 @@
+target remote localhost:1234
+break *0xc0100350
+break *0x00100350
+continue
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.hello.log lab6/.hello.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.hello.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.hello.log	2020-05-24 08:39:54.054440654 +0000
@@ -0,0 +1,113 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "hello".
+Hello world!!.
+I am process 2.
+hello pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/debug/kdebug.c lab6/kern/debug/kdebug.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/debug/kdebug.c	2020-05-24 07:28:36.518368873 +0000
+++ lab6/kern/debug/kdebug.c	2020-05-24 07:31:18.208476929 +0000
@@ -347,5 +347,18 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+    uint32_t ebp = read_ebp();
+    uint32_t eip = read_eip();
+    for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++)
+    {
+        cprintf("ebp:0x%08x   eip:0x%08x ", ebp, eip);
+        uint32_t *tmp = (uint32_t *)ebp + 2;
+        cprintf("arg :0x%08x 0x%08x 0x%08x 0x%08x", *(tmp + 0), *(tmp + 1), *(tmp + 2), *(tmp + 3));
+        cprintf("\n");
+        print_debuginfo(eip - 1);
+        eip = ((uint32_t *)ebp)[1];
+        ebp = ((uint32_t *)ebp)[0];
+    }
 }
 
+
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/default_pmm.c lab6/kern/mm/default_pmm.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/default_pmm.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/mm/default_pmm.c	2020-05-24 07:31:18.208476929 +0000
@@ -99,16 +99,19 @@
 #define nr_free (free_area.nr_free)
 
 static void
-default_init(void) {
+default_init(void)
+{
     list_init(&free_list);
     nr_free = 0;
 }
 
 static void
-default_init_memmap(struct Page *base, size_t n) {
+default_init_memmap(struct Page *base, size_t n)
+{
     assert(n > 0);
     struct Page *p = base;
-    for (; p != base + n; p ++) {
+    for (; p != base + n; p++)
+    {
         assert(PageReserved(p));
         p->flags = p->property = 0;
         set_page_ref(p, 0);
@@ -120,27 +123,34 @@
 }
 
 static struct Page *
-default_alloc_pages(size_t n) {
+default_alloc_pages(size_t n)
+{
     assert(n > 0);
-    if (n > nr_free) {
+    if (n > nr_free)
+    {
         return NULL;
     }
     struct Page *page = NULL;
     list_entry_t *le = &free_list;
-    while ((le = list_next(le)) != &free_list) {
+    while ((le = list_next(le)) != &free_list)
+    {
         struct Page *p = le2page(le, page_link);
-        if (p->property >= n) {
+        if (p->property >= n)
+        {
             page = p;
             break;
         }
     }
-    if (page != NULL) {
-        list_del(&(page->page_link));
-        if (page->property > n) {
+    if (page != NULL)
+    {
+        if (page->property > n)
+        {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
-    }
+            SetPageProperty(p);
+            list_add_after(&(page->page_link), &(p->page_link));
+        }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -148,10 +158,12 @@
 }
 
 static void
-default_free_pages(struct Page *base, size_t n) {
+default_free_pages(struct Page *base, size_t n)
+{
     assert(n > 0);
     struct Page *p = base;
-    for (; p != base + n; p ++) {
+    for (; p != base + n; p++)
+    {
         assert(!PageReserved(p) && !PageProperty(p));
         p->flags = 0;
         set_page_ref(p, 0);
@@ -159,15 +171,18 @@
     base->property = n;
     SetPageProperty(base);
     list_entry_t *le = list_next(&free_list);
-    while (le != &free_list) {
+    while (le != &free_list)
+    {
         p = le2page(le, page_link);
         le = list_next(le);
-        if (base + base->property == p) {
+        if (base + base->property == p)
+        {
             base->property += p->property;
             ClearPageProperty(p);
             list_del(&(p->page_link));
         }
-        else if (p + p->property == base) {
+        else if (p + p->property == base)
+        {
             p->property += base->property;
             ClearPageProperty(base);
             base = p;
@@ -175,16 +190,24 @@
         }
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    for (le = list_next(&free_list); le != &free_list; le = list_next(le))
+    {
+        p = le2page(le, page_link);
+        if (base + base->property <= p)
+            break;
+    }
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
-default_nr_free_pages(void) {
+default_nr_free_pages(void)
+{
     return nr_free;
 }
 
 static void
-basic_check(void) {
+basic_check(void)
+{
     struct Page *p0, *p1, *p2;
     p0 = p1 = p2 = NULL;
     assert((p0 = alloc_page()) != NULL);
@@ -234,16 +257,18 @@
     free_page(p2);
 }
 
-// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1)
 // NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
 static void
-default_check(void) {
+default_check(void)
+{
     int count = 0, total = 0;
     list_entry_t *le = &free_list;
-    while ((le = list_next(le)) != &free_list) {
+    while ((le = list_next(le)) != &free_list)
+    {
         struct Page *p = le2page(le, page_link);
         assert(PageProperty(p));
-        count ++, total += p->property;
+        count++, total += p->property;
     }
     assert(total == nr_free_pages());
 
@@ -291,9 +316,10 @@
     free_pages(p0, 5);
 
     le = &free_list;
-    while ((le = list_next(le)) != &free_list) {
+    while ((le = list_next(le)) != &free_list)
+    {
         struct Page *p = le2page(le, page_link);
-        count --, total -= p->property;
+        count--, total -= p->property;
     }
     assert(count == 0);
     assert(total == 0);
@@ -308,4 +334,3 @@
     .nr_free_pages = default_nr_free_pages,
     .check = default_check,
 };
-
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/pmm.c lab6/kern/mm/pmm.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/pmm.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/mm/pmm.c	2020-05-24 07:31:18.208476929 +0000
@@ -61,8 +61,8 @@
  * always available at virtual address PGADDR(PDX(VPT), PDX(VPT), 0), to which
  * vpd is set bellow.
  * */
-pte_t * const vpt = (pte_t *)VPT;
-pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
+pte_t *const vpt = (pte_t *)VPT;
+pde_t *const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
 
 /* *
  * Global Descriptor Table:
@@ -83,12 +83,11 @@
     [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
     [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
     [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
-    [SEG_TSS]   = SEG_NULL,
+    [SEG_TSS] = SEG_NULL,
 };
 
 static struct pseudodesc gdt_pd = {
-    sizeof(gdt) - 1, (uintptr_t)gdt
-};
+    sizeof(gdt) - 1, (uintptr_t)gdt};
 
 static void check_alloc_page(void);
 static void check_pgdir(void);
@@ -99,15 +98,16 @@
  * data/code segement registers for kernel.
  * */
 static inline void
-lgdt(struct pseudodesc *pd) {
-    asm volatile ("lgdt (%0)" :: "r" (pd));
-    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
-    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
-    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
-    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
-    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+lgdt(struct pseudodesc *pd)
+{
+    asm volatile("lgdt (%0)" ::"r"(pd));
+    asm volatile("movw %%ax, %%gs" ::"a"(USER_DS));
+    asm volatile("movw %%ax, %%fs" ::"a"(USER_DS));
+    asm volatile("movw %%ax, %%es" ::"a"(KERNEL_DS));
+    asm volatile("movw %%ax, %%ds" ::"a"(KERNEL_DS));
+    asm volatile("movw %%ax, %%ss" ::"a"(KERNEL_DS));
     // reload cs
-    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+    asm volatile("ljmp %0, $1f\n 1:\n" ::"i"(KERNEL_CS));
 }
 
 /* *
@@ -115,14 +115,15 @@
  * so that we can use different kernel stack when we trap frame
  * user to kernel.
  * */
-void
-load_esp0(uintptr_t esp0) {
+void load_esp0(uintptr_t esp0)
+{
     ts.ts_esp0 = esp0;
 }
 
 /* gdt_init - initialize the default GDT and TSS */
 static void
-gdt_init(void) {
+gdt_init(void)
+{
     // set boot kernel stack and default SS0
     load_esp0((uintptr_t)bootstacktop);
     ts.ts_ss0 = KERNEL_DS;
@@ -139,45 +140,49 @@
 
 //init_pmm_manager - initialize a pmm_manager instance
 static void
-init_pmm_manager(void) {
+init_pmm_manager(void)
+{
     pmm_manager = &default_pmm_manager;
     cprintf("memory management: %s\n", pmm_manager->name);
     pmm_manager->init();
 }
 
-//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+//init_memmap - call pmm->init_memmap to build Page struct for free memory
 static void
-init_memmap(struct Page *base, size_t n) {
+init_memmap(struct Page *base, size_t n)
+{
     pmm_manager->init_memmap(base, n);
 }
 
-//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory
 struct Page *
-alloc_pages(size_t n) {
-    struct Page *page=NULL;
+alloc_pages(size_t n)
+{
+    struct Page *page = NULL;
     bool intr_flag;
-    
+
     while (1)
     {
-         local_intr_save(intr_flag);
-         {
-              page = pmm_manager->alloc_pages(n);
-         }
-         local_intr_restore(intr_flag);
-
-         if (page != NULL || n > 1 || swap_init_ok == 0) break;
-         
-         extern struct mm_struct *check_mm_struct;
-         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
-         swap_out(check_mm_struct, n, 0);
+        local_intr_save(intr_flag);
+        {
+            page = pmm_manager->alloc_pages(n);
+        }
+        local_intr_restore(intr_flag);
+
+        if (page != NULL || n > 1 || swap_init_ok == 0)
+            break;
+
+        extern struct mm_struct *check_mm_struct;
+        //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+        swap_out(check_mm_struct, n, 0);
     }
     //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
     return page;
 }
 
-//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
-void
-free_pages(struct Page *base, size_t n) {
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory
+void free_pages(struct Page *base, size_t n)
+{
     bool intr_flag;
     local_intr_save(intr_flag);
     {
@@ -186,10 +191,11 @@
     local_intr_restore(intr_flag);
 }
 
-//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE)
 //of current free memory
 size_t
-nr_free_pages(void) {
+nr_free_pages(void)
+{
     size_t ret;
     bool intr_flag;
     local_intr_save(intr_flag);
@@ -202,23 +208,28 @@
 
 /* pmm_init - initialize the physical memory management */
 static void
-page_init(void) {
+page_init(void)
+{
     struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
     uint64_t maxpa = 0;
 
     cprintf("e820map:\n");
     int i;
-    for (i = 0; i < memmap->nr_map; i ++) {
+    for (i = 0; i < memmap->nr_map; i++)
+    {
         uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
         cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
                 memmap->map[i].size, begin, end - 1, memmap->map[i].type);
-        if (memmap->map[i].type == E820_ARM) {
-            if (maxpa < end && begin < KMEMSIZE) {
+        if (memmap->map[i].type == E820_ARM)
+        {
+            if (maxpa < end && begin < KMEMSIZE)
+            {
                 maxpa = end;
             }
         }
     }
-    if (maxpa > KMEMSIZE) {
+    if (maxpa > KMEMSIZE)
+    {
         maxpa = KMEMSIZE;
     }
 
@@ -227,25 +238,32 @@
     npage = maxpa / PGSIZE;
     pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
 
-    for (i = 0; i < npage; i ++) {
+    for (i = 0; i < npage; i++)
+    {
         SetPageReserved(pages + i);
     }
 
     uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
 
-    for (i = 0; i < memmap->nr_map; i ++) {
+    for (i = 0; i < memmap->nr_map; i++)
+    {
         uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
-        if (memmap->map[i].type == E820_ARM) {
-            if (begin < freemem) {
+        if (memmap->map[i].type == E820_ARM)
+        {
+            if (begin < freemem)
+            {
                 begin = freemem;
             }
-            if (end > KMEMSIZE) {
+            if (end > KMEMSIZE)
+            {
                 end = KMEMSIZE;
             }
-            if (begin < end) {
+            if (begin < end)
+            {
                 begin = ROUNDUP(begin, PGSIZE);
                 end = ROUNDDOWN(end, PGSIZE);
-                if (begin < end) {
+                if (begin < end)
+                {
                     init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                 }
             }
@@ -258,43 +276,47 @@
 //  la:   linear address of this memory need to map (after x86 segment map)
 //  size: memory size
 //  pa:   physical address of this memory
-//  perm: permission of this memory  
+//  perm: permission of this memory
 static void
-boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm)
+{
     assert(PGOFF(la) == PGOFF(pa));
     size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
     la = ROUNDDOWN(la, PGSIZE);
     pa = ROUNDDOWN(pa, PGSIZE);
-    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+    for (; n > 0; n--, la += PGSIZE, pa += PGSIZE)
+    {
         pte_t *ptep = get_pte(pgdir, la, 1);
         assert(ptep != NULL);
         *ptep = pa | PTE_P | perm;
     }
 }
 
-//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1)
 // return value: the kernel virtual address of this allocated page
 //note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
 static void *
-boot_alloc_page(void) {
+boot_alloc_page(void)
+{
     struct Page *p = alloc_page();
-    if (p == NULL) {
+    if (p == NULL)
+    {
         panic("boot_alloc_page failed.\n");
     }
     return page2kva(p);
 }
 
-//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism
 //         - check the correctness of pmm & paging mechanism, print PDT&PT
-void
-pmm_init(void) {
+void pmm_init(void)
+{
     // We've already enabled paging
     boot_cr3 = PADDR(boot_pgdir);
 
-    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //We need to alloc/free the physical memory (granularity is 4KB or other size).
     //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
     //First we should init a physical memory manager(pmm) based on the framework.
-    //Then pmm can alloc/free the physical memory. 
+    //Then pmm can alloc/free the physical memory.
     //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
     init_pmm_manager();
 
@@ -328,9 +350,8 @@
     check_boot_pgdir();
 
     print_pgdir();
-    
-    kmalloc_init();
 
+    kmalloc_init();
 }
 
 //get_pte - get pte and return the kernel virtual address of this pte for la
@@ -341,7 +362,8 @@
 //  create: a logical value to decide if alloc a page for PT
 // return vaule: the kernel virtual address of this pte
 pte_t *
-get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+get_pte(pde_t *pgdir, uintptr_t la, bool create)
+{
     /* LAB2 EXERCISE 2: YOUR CODE
      *
      * If you need to visit a physical address, please use KADDR()
@@ -375,16 +397,33 @@
     }
     return NULL;          // (8) return page table entry
 #endif
+    pde_t *pdep = &pgdir[PDX(la)];
+    if (!(*pdep & PTE_P))
+    {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL)
+        {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
 struct Page *
-get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store)
+{
     pte_t *ptep = get_pte(pgdir, la, 0);
-    if (ptep_store != NULL) {
+    if (ptep_store != NULL)
+    {
         *ptep_store = ptep;
     }
-    if (ptep != NULL && *ptep & PTE_P) {
+    if (ptep != NULL && *ptep & PTE_P)
+    {
         return pte2page(*ptep);
     }
     return NULL;
@@ -392,9 +431,10 @@
 
 //page_remove_pte - free an Page sturct which is related linear address la
 //                - and clean(invalidate) pte which is related linear address la
-//note: PT is changed, so the TLB need to be invalidate 
+//note: PT is changed, so the TLB need to be invalidate
 static inline void
-page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep)
+{
     /* LAB2 EXERCISE 3: YOUR CODE
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
@@ -420,35 +460,50 @@
                                   //(6) flush tlb
     }
 #endif
+    if (*ptep & PTE_P)
+    {
+        struct Page *page = pte2page(*ptep);
+        if (page_ref_dec(page) == 0)
+        {
+            free_page(page);
+        }
+        *ptep = 0;
+        tlb_invalidate(pgdir, la);
+    }
 }
 
-void
-unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+void unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end)
+{
     assert(start % PGSIZE == 0 && end % PGSIZE == 0);
     assert(USER_ACCESS(start, end));
 
-    do {
+    do
+    {
         pte_t *ptep = get_pte(pgdir, start, 0);
-        if (ptep == NULL) {
+        if (ptep == NULL)
+        {
             start = ROUNDDOWN(start + PTSIZE, PTSIZE);
-            continue ;
+            continue;
         }
-        if (*ptep != 0) {
+        if (*ptep != 0)
+        {
             page_remove_pte(pgdir, start, ptep);
         }
         start += PGSIZE;
     } while (start != 0 && start < end);
 }
 
-void
-exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+void exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end)
+{
     assert(start % PGSIZE == 0 && end % PGSIZE == 0);
     assert(USER_ACCESS(start, end));
 
     start = ROUNDDOWN(start, PTSIZE);
-    do {
+    do
+    {
         int pde_idx = PDX(start);
-        if (pgdir[pde_idx] & PTE_P) {
+        if (pgdir[pde_idx] & PTE_P)
+        {
             free_page(pde2page(pgdir[pde_idx]));
             pgdir[pde_idx] = 0;
         }
@@ -462,32 +517,36 @@
  *
  * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
  */
-int
-copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+int copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share)
+{
     assert(start % PGSIZE == 0 && end % PGSIZE == 0);
     assert(USER_ACCESS(start, end));
     // copy content by page unit.
-    do {
+    do
+    {
         //call get_pte to find process A's pte according to the addr start
         pte_t *ptep = get_pte(from, start, 0), *nptep;
-        if (ptep == NULL) {
+        if (ptep == NULL)
+        {
             start = ROUNDDOWN(start + PTSIZE, PTSIZE);
-            continue ;
+            continue;
         }
         //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
-        if (*ptep & PTE_P) {
-            if ((nptep = get_pte(to, start, 1)) == NULL) {
+        if (*ptep & PTE_P)
+        {
+            if ((nptep = get_pte(to, start, 1)) == NULL)
+            {
                 return -E_NO_MEM;
             }
-        uint32_t perm = (*ptep & PTE_USER);
-        //get page from ptep
-        struct Page *page = pte2page(*ptep);
-        // alloc a page for process B
-        struct Page *npage=alloc_page();
-        assert(page!=NULL);
-        assert(npage!=NULL);
-        int ret=0;
-        /* LAB5:EXERCISE2 YOUR CODE
+            uint32_t perm = (*ptep & PTE_USER);
+            //get page from ptep
+            struct Page *page = pte2page(*ptep);
+            // alloc a page for process B
+            struct Page *npage = alloc_page();
+            assert(page != NULL);
+            assert(npage != NULL);
+            int ret = 0;
+            /* LAB5:EXERCISE2 YOUR CODE
          * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
          *
          * Some Useful MACROs and DEFINEs, you can use them in below implementation.
@@ -501,7 +560,9 @@
          * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
          * (4) build the map of phy addr of  nage with the linear addr start
          */
-        assert(ret == 0);
+            memcpy(page2kva(npage), page2kva(page), PGSIZE);
+            ret = page_insert(to, npage, start, perm);
+            assert(ret == 0);
         }
         start += PGSIZE;
     } while (start != 0 && start < end);
@@ -509,10 +570,11 @@
 }
 
 //page_remove - free an Page which is related linear address la and has an validated pte
-void
-page_remove(pde_t *pgdir, uintptr_t la) {
+void page_remove(pde_t *pgdir, uintptr_t la)
+{
     pte_t *ptep = get_pte(pgdir, la, 0);
-    if (ptep != NULL) {
+    if (ptep != NULL)
+    {
         page_remove_pte(pgdir, la, ptep);
     }
 }
@@ -524,20 +586,24 @@
 //  la:    the linear address need to map
 //  perm:  the permission of this Page which is setted in related pte
 // return value: always 0
-//note: PT is changed, so the TLB need to be invalidate 
-int
-page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+//note: PT is changed, so the TLB need to be invalidate
+int page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm)
+{
     pte_t *ptep = get_pte(pgdir, la, 1);
-    if (ptep == NULL) {
+    if (ptep == NULL)
+    {
         return -E_NO_MEM;
     }
     page_ref_inc(page);
-    if (*ptep & PTE_P) {
+    if (*ptep & PTE_P)
+    {
         struct Page *p = pte2page(*ptep);
-        if (p == page) {
+        if (p == page)
+        {
             page_ref_dec(page);
         }
-        else {
+        else
+        {
             page_remove_pte(pgdir, la, ptep);
         }
     }
@@ -548,52 +614,60 @@
 
 // invalidate a TLB entry, but only if the page tables being
 // edited are the ones currently in use by the processor.
-void
-tlb_invalidate(pde_t *pgdir, uintptr_t la) {
-    if (rcr3() == PADDR(pgdir)) {
+void tlb_invalidate(pde_t *pgdir, uintptr_t la)
+{
+    if (rcr3() == PADDR(pgdir))
+    {
         invlpg((void *)la);
     }
 }
 
-// pgdir_alloc_page - call alloc_page & page_insert functions to 
+// pgdir_alloc_page - call alloc_page & page_insert functions to
 //                  - allocate a page size memory & setup an addr map
 //                  - pa<->la with linear address la and the PDT pgdir
 struct Page *
-pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm)
+{
     struct Page *page = alloc_page();
-    if (page != NULL) {
-        if (page_insert(pgdir, page, la, perm) != 0) {
+    if (page != NULL)
+    {
+        if (page_insert(pgdir, page, la, perm) != 0)
+        {
             free_page(page);
             return NULL;
         }
-        if (swap_init_ok){
-            if(check_mm_struct!=NULL) {
+        if (swap_init_ok)
+        {
+            if (check_mm_struct != NULL)
+            {
                 swap_map_swappable(check_mm_struct, la, page, 0);
-                page->pra_vaddr=la;
+                page->pra_vaddr = la;
                 assert(page_ref(page) == 1);
                 //cprintf("get No. %d  page: pra_vaddr %x, pra_link.prev %x, pra_link_next %x in pgdir_alloc_page\n", (page-pages), page->pra_vaddr,page->pra_page_link.prev, page->pra_page_link.next);
-            } 
-            else  {  //now current is existed, should fix it in the future
+            }
+            else
+            { //now current is existed, should fix it in the future
                 //swap_map_swappable(current->mm, la, page, 0);
                 //page->pra_vaddr=la;
                 //assert(page_ref(page) == 1);
                 //panic("pgdir_alloc_page: no pages. now current is existed, should fix it in the future\n");
             }
         }
-
     }
 
     return page;
 }
 
 static void
-check_alloc_page(void) {
+check_alloc_page(void)
+{
     pmm_manager->check();
     cprintf("check_alloc_page() succeeded!\n");
 }
 
 static void
-check_pgdir(void) {
+check_pgdir(void)
+{
     assert(npage <= KMEMSIZE / PGSIZE);
     assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
     assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
@@ -641,10 +715,12 @@
 }
 
 static void
-check_boot_pgdir(void) {
+check_boot_pgdir(void)
+{
     pte_t *ptep;
     int i;
-    for (i = 0; i < npage; i += PGSIZE) {
+    for (i = 0; i < npage; i += PGSIZE)
+    {
         assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
         assert(PTE_ADDR(*ptep) == i);
     }
@@ -676,7 +752,8 @@
 
 //perm2str - use string 'u,r,w,-' to present the permission
 static const char *
-perm2str(int perm) {
+perm2str(int perm)
+{
     static char str[4];
     str[0] = (perm & PTE_U) ? 'u' : '-';
     str[1] = 'r';
@@ -695,24 +772,31 @@
 //  table:       the beginning addr of table
 //  left_store:  the pointer of the high side of table's next range
 //  right_store: the pointer of the low side of table's next range
-// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission
 static int
-get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
-    if (start >= right) {
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store)
+{
+    if (start >= right)
+    {
         return 0;
     }
-    while (start < right && !(table[start] & PTE_P)) {
-        start ++;
+    while (start < right && !(table[start] & PTE_P))
+    {
+        start++;
     }
-    if (start < right) {
-        if (left_store != NULL) {
+    if (start < right)
+    {
+        if (left_store != NULL)
+        {
             *left_store = start;
         }
-        int perm = (table[start ++] & PTE_USER);
-        while (start < right && (table[start] & PTE_USER) == perm) {
-            start ++;
+        int perm = (table[start++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm)
+        {
+            start++;
         }
-        if (right_store != NULL) {
+        if (right_store != NULL)
+        {
             *right_store = start;
         }
         return perm;
@@ -721,15 +805,17 @@
 }
 
 //print_pgdir - print the PDT&PT
-void
-print_pgdir(void) {
+void print_pgdir(void)
+{
     cprintf("-------------------- BEGIN --------------------\n");
     size_t left, right = 0, perm;
-    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0)
+    {
         cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                 left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
         size_t l, r = left * NPTEENTRY;
-        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0)
+        {
             cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                     l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
         }
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/swap_fifo.c lab6/kern/mm/swap_fifo.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/swap_fifo.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/mm/swap_fifo.c	2020-05-24 07:31:18.208476929 +0000
@@ -32,11 +32,11 @@
  */
 static int
 _fifo_init_mm(struct mm_struct *mm)
-{     
-     list_init(&pra_list_head);
-     mm->sm_priv = &pra_list_head;
-     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
-     return 0;
+{
+    list_init(&pra_list_head);
+    mm->sm_priv = &pra_list_head;
+    //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+    return 0;
 }
 /*
  * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
@@ -44,13 +44,14 @@
 static int
 _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
 {
-    list_entry_t *head=(list_entry_t*) mm->sm_priv;
-    list_entry_t *entry=&(page->pra_page_link);
- 
+    list_entry_t *head = (list_entry_t *)mm->sm_priv;
+    list_entry_t *entry = &(page->pra_page_link);
+
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: YOUR CODE*/
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
     return 0;
 }
 /*
@@ -58,61 +59,65 @@
  *                            then assign the value of *ptr_page to the addr of this page.
  */
 static int
-_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page **ptr_page, int in_tick)
 {
-     list_entry_t *head=(list_entry_t*) mm->sm_priv;
-         assert(head != NULL);
-     assert(in_tick==0);
-     /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
-     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
-     //(2)  assign the value of *ptr_page to the addr of this page
-     return 0;
+    list_entry_t *head = (list_entry_t *)mm->sm_priv;
+    assert(head != NULL);
+    assert(in_tick == 0);
+    /* Select the victim */
+    /*LAB3 EXERCISE 2: YOUR CODE*/
+    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+    //(2)  assign the value of *ptr_page to the addr of this page
+    list_entry_t *le = head->prev;
+    struct Page *p = le2page(le, pra_page_link);
+    list_del(le);
+    *ptr_page = p;
+    return 0;
 }
 
 static int
-_fifo_check_swap(void) {
+_fifo_check_swap(void)
+{
     cprintf("write Virt Page c in fifo_check_swap\n");
     *(unsigned char *)0x3000 = 0x0c;
-    assert(pgfault_num==4);
+    assert(pgfault_num == 4);
     cprintf("write Virt Page a in fifo_check_swap\n");
     *(unsigned char *)0x1000 = 0x0a;
-    assert(pgfault_num==4);
+    assert(pgfault_num == 4);
     cprintf("write Virt Page d in fifo_check_swap\n");
     *(unsigned char *)0x4000 = 0x0d;
-    assert(pgfault_num==4);
+    assert(pgfault_num == 4);
     cprintf("write Virt Page b in fifo_check_swap\n");
     *(unsigned char *)0x2000 = 0x0b;
-    assert(pgfault_num==4);
+    assert(pgfault_num == 4);
     cprintf("write Virt Page e in fifo_check_swap\n");
     *(unsigned char *)0x5000 = 0x0e;
-    assert(pgfault_num==5);
+    assert(pgfault_num == 5);
     cprintf("write Virt Page b in fifo_check_swap\n");
     *(unsigned char *)0x2000 = 0x0b;
-    assert(pgfault_num==5);
+    assert(pgfault_num == 5);
     cprintf("write Virt Page a in fifo_check_swap\n");
     *(unsigned char *)0x1000 = 0x0a;
-    assert(pgfault_num==6);
+    assert(pgfault_num == 6);
     cprintf("write Virt Page b in fifo_check_swap\n");
     *(unsigned char *)0x2000 = 0x0b;
-    assert(pgfault_num==7);
+    assert(pgfault_num == 7);
     cprintf("write Virt Page c in fifo_check_swap\n");
     *(unsigned char *)0x3000 = 0x0c;
-    assert(pgfault_num==8);
+    assert(pgfault_num == 8);
     cprintf("write Virt Page d in fifo_check_swap\n");
     *(unsigned char *)0x4000 = 0x0d;
-    assert(pgfault_num==9);
+    assert(pgfault_num == 9);
     cprintf("write Virt Page e in fifo_check_swap\n");
     *(unsigned char *)0x5000 = 0x0e;
-    assert(pgfault_num==10);
+    assert(pgfault_num == 10);
     cprintf("write Virt Page a in fifo_check_swap\n");
     assert(*(unsigned char *)0x1000 == 0x0a);
     *(unsigned char *)0x1000 = 0x0a;
-    assert(pgfault_num==11);
+    assert(pgfault_num == 11);
     return 0;
 }
 
-
 static int
 _fifo_init(void)
 {
@@ -127,17 +132,18 @@
 
 static int
 _fifo_tick_event(struct mm_struct *mm)
-{ return 0; }
-
+{
+    return 0;
+}
 
 struct swap_manager swap_manager_fifo =
-{
-     .name            = "fifo swap manager",
-     .init            = &_fifo_init,
-     .init_mm         = &_fifo_init_mm,
-     .tick_event      = &_fifo_tick_event,
-     .map_swappable   = &_fifo_map_swappable,
-     .set_unswappable = &_fifo_set_unswappable,
-     .swap_out_victim = &_fifo_swap_out_victim,
-     .check_swap      = &_fifo_check_swap,
+    {
+        .name = "fifo swap manager",
+        .init = &_fifo_init,
+        .init_mm = &_fifo_init_mm,
+        .tick_event = &_fifo_tick_event,
+        .map_swappable = &_fifo_map_swappable,
+        .set_unswappable = &_fifo_set_unswappable,
+        .swap_out_victim = &_fifo_swap_out_victim,
+        .check_swap = &_fifo_check_swap,
 };
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/vmm.c lab6/kern/mm/vmm.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/mm/vmm.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/mm/vmm.c	2020-05-24 07:31:18.212476982 +0000
@@ -41,30 +41,36 @@
 
 // mm_create -  alloc a mm_struct & initialize it.
 struct mm_struct *
-mm_create(void) {
+mm_create(void)
+{
     struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
 
-    if (mm != NULL) {
+    if (mm != NULL)
+    {
         list_init(&(mm->mmap_list));
         mm->mmap_cache = NULL;
         mm->pgdir = NULL;
         mm->map_count = 0;
 
-        if (swap_init_ok) swap_init_mm(mm);
-        else mm->sm_priv = NULL;
-        
+        if (swap_init_ok)
+            swap_init_mm(mm);
+        else
+            mm->sm_priv = NULL;
+
         set_mm_count(mm, 0);
         lock_init(&(mm->mm_lock));
-    }    
+    }
     return mm;
 }
 
 // vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
 struct vma_struct *
-vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags)
+{
     struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
 
-    if (vma != NULL) {
+    if (vma != NULL)
+    {
         vma->vm_start = vm_start;
         vma->vm_end = vm_end;
         vma->vm_flags = vm_flags;
@@ -72,95 +78,106 @@
     return vma;
 }
 
-
 // find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
 struct vma_struct *
-find_vma(struct mm_struct *mm, uintptr_t addr) {
+find_vma(struct mm_struct *mm, uintptr_t addr)
+{
     struct vma_struct *vma = NULL;
-    if (mm != NULL) {
+    if (mm != NULL)
+    {
         vma = mm->mmap_cache;
-        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
-                bool found = 0;
-                list_entry_t *list = &(mm->mmap_list), *le = list;
-                while ((le = list_next(le)) != list) {
-                    vma = le2vma(le, list_link);
-                    if (vma->vm_start<=addr && addr < vma->vm_end) {
-                        found = 1;
-                        break;
-                    }
-                }
-                if (!found) {
-                    vma = NULL;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr))
+        {
+            bool found = 0;
+            list_entry_t *list = &(mm->mmap_list), *le = list;
+            while ((le = list_next(le)) != list)
+            {
+                vma = le2vma(le, list_link);
+                if (vma->vm_start <= addr && addr < vma->vm_end)
+                {
+                    found = 1;
+                    break;
                 }
+            }
+            if (!found)
+            {
+                vma = NULL;
+            }
         }
-        if (vma != NULL) {
+        if (vma != NULL)
+        {
             mm->mmap_cache = vma;
         }
     }
     return vma;
 }
 
-
 // check_vma_overlap - check if vma1 overlaps vma2 ?
 static inline void
-check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next)
+{
     assert(prev->vm_start < prev->vm_end);
     assert(prev->vm_end <= next->vm_start);
     assert(next->vm_start < next->vm_end);
 }
 
-
 // insert_vma_struct -insert vma in mm's list link
-void
-insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+void insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma)
+{
     assert(vma->vm_start < vma->vm_end);
     list_entry_t *list = &(mm->mmap_list);
     list_entry_t *le_prev = list, *le_next;
 
-        list_entry_t *le = list;
-        while ((le = list_next(le)) != list) {
-            struct vma_struct *mmap_prev = le2vma(le, list_link);
-            if (mmap_prev->vm_start > vma->vm_start) {
-                break;
-            }
-            le_prev = le;
+    list_entry_t *le = list;
+    while ((le = list_next(le)) != list)
+    {
+        struct vma_struct *mmap_prev = le2vma(le, list_link);
+        if (mmap_prev->vm_start > vma->vm_start)
+        {
+            break;
         }
+        le_prev = le;
+    }
 
     le_next = list_next(le_prev);
 
     /* check overlap */
-    if (le_prev != list) {
+    if (le_prev != list)
+    {
         check_vma_overlap(le2vma(le_prev, list_link), vma);
     }
-    if (le_next != list) {
+    if (le_next != list)
+    {
         check_vma_overlap(vma, le2vma(le_next, list_link));
     }
 
     vma->vm_mm = mm;
     list_add_after(le_prev, &(vma->list_link));
 
-    mm->map_count ++;
+    mm->map_count++;
 }
 
 // mm_destroy - free mm and mm internal fields
-void
-mm_destroy(struct mm_struct *mm) {
+void mm_destroy(struct mm_struct *mm)
+{
     assert(mm_count(mm) == 0);
 
     list_entry_t *list = &(mm->mmap_list), *le;
-    while ((le = list_next(list)) != list) {
+    while ((le = list_next(list)) != list)
+    {
         list_del(le);
-        kfree(le2vma(le, list_link));  //kfree vma        
+        kfree(le2vma(le, list_link)); //kfree vma
     }
     kfree(mm); //kfree mm
-    mm=NULL;
+    mm = NULL;
 }
 
-int
-mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
-       struct vma_struct **vma_store) {
+int mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+           struct vma_struct **vma_store)
+{
     uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
-    if (!USER_ACCESS(start, end)) {
+    if (!USER_ACCESS(start, end))
+    {
         return -E_INVAL;
     }
 
@@ -169,16 +186,19 @@
     int ret = -E_INVAL;
 
     struct vma_struct *vma;
-    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start)
+    {
         goto out;
     }
     ret = -E_NO_MEM;
 
-    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+    if ((vma = vma_create(start, end, vm_flags)) == NULL)
+    {
         goto out;
     }
     insert_vma_struct(mm, vma);
-    if (vma_store != NULL) {
+    if (vma_store != NULL)
+    {
         *vma_store = vma;
     }
     ret = 0;
@@ -187,55 +207,62 @@
     return ret;
 }
 
-int
-dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+int dup_mmap(struct mm_struct *to, struct mm_struct *from)
+{
     assert(to != NULL && from != NULL);
     list_entry_t *list = &(from->mmap_list), *le = list;
-    while ((le = list_prev(le)) != list) {
+    while ((le = list_prev(le)) != list)
+    {
         struct vma_struct *vma, *nvma;
         vma = le2vma(le, list_link);
         nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
-        if (nvma == NULL) {
+        if (nvma == NULL)
+        {
             return -E_NO_MEM;
         }
 
         insert_vma_struct(to, nvma);
 
         bool share = 0;
-        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0)
+        {
             return -E_NO_MEM;
         }
     }
     return 0;
 }
 
-void
-exit_mmap(struct mm_struct *mm) {
+void exit_mmap(struct mm_struct *mm)
+{
     assert(mm != NULL && mm_count(mm) == 0);
     pde_t *pgdir = mm->pgdir;
     list_entry_t *list = &(mm->mmap_list), *le = list;
-    while ((le = list_next(le)) != list) {
+    while ((le = list_next(le)) != list)
+    {
         struct vma_struct *vma = le2vma(le, list_link);
         unmap_range(pgdir, vma->vm_start, vma->vm_end);
     }
-    while ((le = list_next(le)) != list) {
+    while ((le = list_next(le)) != list)
+    {
         struct vma_struct *vma = le2vma(le, list_link);
         exit_range(pgdir, vma->vm_start, vma->vm_end);
     }
 }
 
-bool
-copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
-    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable)
+{
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable))
+    {
         return 0;
     }
     memcpy(dst, src, len);
     return 1;
 }
 
-bool
-copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
-    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len)
+{
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1))
+    {
         return 0;
     }
     memcpy(dst, src, len);
@@ -244,16 +271,17 @@
 
 // vmm_init - initialize virtual memory management
 //          - now just call check_vmm to check correctness of vmm
-void
-vmm_init(void) {
+void vmm_init(void)
+{
     check_vmm();
 }
 
 // check_vmm - check correctness of vmm
 static void
-check_vmm(void) {
+check_vmm(void)
+{
     size_t nr_free_pages_store = nr_free_pages();
-    
+
     check_vma_struct();
     check_pgfault();
 
@@ -261,7 +289,8 @@
 }
 
 static void
-check_vma_struct(void) {
+check_vma_struct(void)
+{
     size_t nr_free_pages_store = nr_free_pages();
 
     struct mm_struct *mm = mm_create();
@@ -270,13 +299,15 @@
     int step1 = 10, step2 = step1 * 10;
 
     int i;
-    for (i = step1; i >= 1; i --) {
+    for (i = step1; i >= 1; i--)
+    {
         struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
         assert(vma != NULL);
         insert_vma_struct(mm, vma);
     }
 
-    for (i = step1 + 1; i <= step2; i ++) {
+    for (i = step1 + 1; i <= step2; i++)
+    {
         struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
         assert(vma != NULL);
         insert_vma_struct(mm, vma);
@@ -284,33 +315,37 @@
 
     list_entry_t *le = list_next(&(mm->mmap_list));
 
-    for (i = 1; i <= step2; i ++) {
+    for (i = 1; i <= step2; i++)
+    {
         assert(le != &(mm->mmap_list));
         struct vma_struct *mmap = le2vma(le, list_link);
         assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
         le = list_next(le);
     }
 
-    for (i = 5; i <= 5 * step2; i +=5) {
+    for (i = 5; i <= 5 * step2; i += 5)
+    {
         struct vma_struct *vma1 = find_vma(mm, i);
         assert(vma1 != NULL);
-        struct vma_struct *vma2 = find_vma(mm, i+1);
+        struct vma_struct *vma2 = find_vma(mm, i + 1);
         assert(vma2 != NULL);
-        struct vma_struct *vma3 = find_vma(mm, i+2);
+        struct vma_struct *vma3 = find_vma(mm, i + 2);
         assert(vma3 == NULL);
-        struct vma_struct *vma4 = find_vma(mm, i+3);
+        struct vma_struct *vma4 = find_vma(mm, i + 3);
         assert(vma4 == NULL);
-        struct vma_struct *vma5 = find_vma(mm, i+4);
+        struct vma_struct *vma5 = find_vma(mm, i + 4);
         assert(vma5 == NULL);
 
-        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
-        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+        assert(vma1->vm_start == i && vma1->vm_end == i + 2);
+        assert(vma2->vm_start == i && vma2->vm_end == i + 2);
     }
 
-    for (i =4; i>=0; i--) {
-        struct vma_struct *vma_below_5= find_vma(mm,i);
-        if (vma_below_5 != NULL ) {
-           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+    for (i = 4; i >= 0; i--)
+    {
+        struct vma_struct *vma_below_5 = find_vma(mm, i);
+        if (vma_below_5 != NULL)
+        {
+            cprintf("vma_below_5: i %x, start %x, end %x\n", i, vma_below_5->vm_start, vma_below_5->vm_end);
         }
         assert(vma_below_5 == NULL);
     }
@@ -324,7 +359,8 @@
 
 // check_pgfault - check correctness of pgfault handler
 static void
-check_pgfault(void) {
+check_pgfault(void)
+{
     size_t nr_free_pages_store = nr_free_pages();
 
     check_mm_struct = mm_create();
@@ -343,11 +379,13 @@
     assert(find_vma(mm, addr) == vma);
 
     int i, sum = 0;
-    for (i = 0; i < 100; i ++) {
+    for (i = 0; i < 100; i++)
+    {
         *(char *)(addr + i) = i;
         sum += i;
     }
-    for (i = 0; i < 100; i ++) {
+    for (i = 0; i < 100; i++)
+    {
         sum -= *(char *)(addr + i);
     }
     assert(sum == 0);
@@ -365,7 +403,7 @@
     cprintf("check_pgfault() succeeded!\n");
 }
 //page fault number
-volatile unsigned int pgfault_num=0;
+volatile unsigned int pgfault_num = 0;
 
 /* do_pgfault - interrupt handler to process the page fault execption
  * @mm         : the control struct for a set of vma using the same PDT
@@ -388,24 +426,27 @@
  *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
  *            or supervisor mode (0) at the time of the exception.
  */
-int
-do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+int do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr)
+{
     int ret = -E_INVAL;
     //try to find a vma which include addr
     struct vma_struct *vma = find_vma(mm, addr);
 
     pgfault_num++;
     //If the addr is in the range of a mm's vma?
-    if (vma == NULL || vma->vm_start > addr) {
+    if (vma == NULL || vma->vm_start > addr)
+    {
         cprintf("not valid addr %x, and  can not find it in vma\n", addr);
         goto failed;
     }
     //check the error_code
-    switch (error_code & 3) {
+    switch (error_code & 3)
+    {
     default:
-            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+        /* error code flag : default is 3 ( W/R=1, P=1): write, present */
     case 2: /* error code flag : (W/R=1, P=0): write, not present */
-        if (!(vma->vm_flags & VM_WRITE)) {
+        if (!(vma->vm_flags & VM_WRITE))
+        {
             cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
             goto failed;
         }
@@ -414,7 +455,8 @@
         cprintf("do_pgfault failed: error code flag = read AND present\n");
         goto failed;
     case 0: /* error code flag : (W/R=0, P=0): read, not present */
-        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC)))
+        {
             cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
             goto failed;
         }
@@ -426,14 +468,15 @@
      *    continue process
      */
     uint32_t perm = PTE_U;
-    if (vma->vm_flags & VM_WRITE) {
+    if (vma->vm_flags & VM_WRITE)
+    {
         perm |= PTE_W;
     }
     addr = ROUNDDOWN(addr, PGSIZE);
 
     ret = -E_NO_MEM;
 
-    pte_t *ptep=NULL;
+    pte_t *ptep = NULL;
     /*LAB3 EXERCISE 1: YOUR CODE
     * Maybe you want help comment, BELOW comments can help you finish the code
     *
@@ -493,28 +536,71 @@
         }
    }
 #endif
-   ret = 0;
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (ptep == NULL)
+    {
+        cprintf("get_pte failed\n");
+        goto failed;
+    }
+
+    if (*ptep == 0)
+    {
+        struct Page *page = pgdir_alloc_page(mm->pgdir, addr, perm);
+        if (page == NULL)
+        {
+            cprintf("pgdir_alloc_page failed\n");
+            goto failed;
+        }
+    }
+    else
+    {
+        if (swap_init_ok)
+        {
+            struct Page *page = NULL;
+            if ((ret = swap_in(mm, addr, &page)) != 0)
+            {
+                cprintf("swap_in failed\n");
+                goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+            swap_map_swappable(mm, addr, page, 1);
+            page->pra_vaddr = addr;
+        }
+        else
+        {
+            cprintf("no swap_init_ok but ptep is %x, failed\n", *ptep);
+            goto failed;
+        }
+    }
+    ret = 0;
 failed:
     return ret;
 }
 
-bool
-user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
-    if (mm != NULL) {
-        if (!USER_ACCESS(addr, addr + len)) {
+bool user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write)
+{
+    if (mm != NULL)
+    {
+        if (!USER_ACCESS(addr, addr + len))
+        {
             return 0;
         }
         struct vma_struct *vma;
         uintptr_t start = addr, end = addr + len;
-        while (start < end) {
-            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+        while (start < end)
+        {
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start)
+            {
                 return 0;
             }
-            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ)))
+            {
                 return 0;
             }
-            if (write && (vma->vm_flags & VM_STACK)) {
-                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+            if (write && (vma->vm_flags & VM_STACK))
+            {
+                if (start < vma->vm_start + PGSIZE)
+                { //check stack start & size
                     return 0;
                 }
             }
@@ -524,4 +610,3 @@
     }
     return KERN_ACCESS(addr, addr + len);
 }
-
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/process/proc.c lab6/kern/process/proc.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/process/proc.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/process/proc.c	2020-05-24 08:40:23.638891152 +0000
@@ -59,12 +59,23 @@
 
 */
 
+#define __Lock(lock)                            \
+    do                                          \
+    {                                           \
+        if (__sync_lock_test_and_set(&lock, 1)) \
+            continue;
+
+#define __UnLock(lock)             \
+    __sync_lock_release(&lock, 0); \
+    }                              \
+    while (0)
+
 // the process set's list
 list_entry_t proc_list;
 
-#define HASH_SHIFT          10
-#define HASH_LIST_SIZE      (1 << HASH_SHIFT)
-#define pid_hashfn(x)       (hash32(x, HASH_SHIFT))
+#define HASH_SHIFT 10
+#define HASH_LIST_SIZE (1 << HASH_SHIFT)
+#define pid_hashfn(x) (hash32(x, HASH_SHIFT))
 
 // has list for process set based on pid
 static list_entry_t hash_list[HASH_LIST_SIZE];
@@ -84,11 +95,13 @@
 
 // alloc_proc - alloc a proc_struct and init all fields of proc_struct
 static struct proc_struct *
-alloc_proc(void) {
+alloc_proc(void)
+{
     struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
-    if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
-    /*
+    if (proc != NULL)
+    {
+        //LAB4:EXERCISE1 YOUR CODE
+        /*
      * below fields in proc_struct need to be initialized
      *       enum proc_state state;                      // Process state
      *       int pid;                                    // Process ID
@@ -103,14 +116,30 @@
      *       uint32_t flags;                             // Process flag
      *       char name[PROC_NAME_LEN + 1];               // Process name
      */
-     //LAB5 YOUR CODE : (update LAB4 steps)
-    /*
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->runs = 0;
+        proc->kstack = 0;
+        proc->need_resched = 0;
+        proc->parent = NULL;
+        proc->mm = NULL;
+        memset(&(proc->context), 0, sizeof(struct context));
+        proc->tf = NULL;
+        proc->cr3 = boot_cr3;
+        proc->flags = 0;
+        memset(proc->name, 0, PROC_NAME_LEN);
+        //LAB5 YOUR CODE : (update LAB4 steps)
+        /*
      * below fields(add in LAB5) in proc_struct need to be initialized	
      *       uint32_t wait_state;                        // waiting state
      *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
 	 */
-     //LAB6 YOUR CODE : (update LAB5 steps)
-    /*
+        proc->wait_state = 0;
+        proc->cptr = NULL;
+        proc->optr = NULL;
+        proc->yptr = NULL;
+        //LAB6 YOUR CODE : (update LAB5 steps)
+        /*
      * below fields(add in LAB6) in proc_struct need to be initialized
      *     struct run_queue *rq;                       // running queue contains Process
      *     list_entry_t run_link;                      // the entry linked in run queue
@@ -119,20 +148,28 @@
      *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
      *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
      */
+        proc->rq = NULL;
+        list_init(&(proc->run_link));
+        proc->time_slice = 0;
+        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+        proc->lab6_priority = 0;
+        proc->lab6_stride = 0;
     }
     return proc;
 }
 
 // set_proc_name - set the name of proc
 char *
-set_proc_name(struct proc_struct *proc, const char *name) {
+set_proc_name(struct proc_struct *proc, const char *name)
+{
     memset(proc->name, 0, sizeof(proc->name));
     return memcpy(proc->name, name, PROC_NAME_LEN);
 }
 
 // get_proc_name - get the name of proc
 char *
-get_proc_name(struct proc_struct *proc) {
+get_proc_name(struct proc_struct *proc)
+{
     static char name[PROC_NAME_LEN + 1];
     memset(name, 0, sizeof(name));
     return memcpy(name, proc->name, PROC_NAME_LEN);
@@ -140,60 +177,74 @@
 
 // set_links - set the relation links of process
 static void
-set_links(struct proc_struct *proc) {
+set_links(struct proc_struct *proc)
+{
     list_add(&proc_list, &(proc->list_link));
     proc->yptr = NULL;
-    if ((proc->optr = proc->parent->cptr) != NULL) {
+    if ((proc->optr = proc->parent->cptr) != NULL)
+    {
         proc->optr->yptr = proc;
     }
     proc->parent->cptr = proc;
-    nr_process ++;
+    nr_process++;
 }
 
 // remove_links - clean the relation links of process
 static void
-remove_links(struct proc_struct *proc) {
+remove_links(struct proc_struct *proc)
+{
     list_del(&(proc->list_link));
-    if (proc->optr != NULL) {
+    if (proc->optr != NULL)
+    {
         proc->optr->yptr = proc->yptr;
     }
-    if (proc->yptr != NULL) {
+    if (proc->yptr != NULL)
+    {
         proc->yptr->optr = proc->optr;
     }
-    else {
-       proc->parent->cptr = proc->optr;
+    else
+    {
+        proc->parent->cptr = proc->optr;
     }
-    nr_process --;
+    nr_process--;
 }
 
 // get_pid - alloc a unique pid for process
 static int
-get_pid(void) {
+get_pid(void)
+{
     static_assert(MAX_PID > MAX_PROCESS);
     struct proc_struct *proc;
     list_entry_t *list = &proc_list, *le;
     static int next_safe = MAX_PID, last_pid = MAX_PID;
-    if (++ last_pid >= MAX_PID) {
+    if (++last_pid >= MAX_PID)
+    {
         last_pid = 1;
         goto inside;
     }
-    if (last_pid >= next_safe) {
+    if (last_pid >= next_safe)
+    {
     inside:
         next_safe = MAX_PID;
     repeat:
         le = list;
-        while ((le = list_next(le)) != list) {
+        while ((le = list_next(le)) != list)
+        {
             proc = le2proc(le, list_link);
-            if (proc->pid == last_pid) {
-                if (++ last_pid >= next_safe) {
-                    if (last_pid >= MAX_PID) {
+            if (proc->pid == last_pid)
+            {
+                if (++last_pid >= next_safe)
+                {
+                    if (last_pid >= MAX_PID)
+                    {
                         last_pid = 1;
                     }
                     next_safe = MAX_PID;
                     goto repeat;
                 }
             }
-            else if (proc->pid > last_pid && next_safe > proc->pid) {
+            else if (proc->pid > last_pid && next_safe > proc->pid)
+            {
                 next_safe = proc->pid;
             }
         }
@@ -203,9 +254,10 @@
 
 // proc_run - make process "proc" running on cpu
 // NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
-void
-proc_run(struct proc_struct *proc) {
-    if (proc != current) {
+void proc_run(struct proc_struct *proc)
+{
+    if (proc != current)
+    {
         bool intr_flag;
         struct proc_struct *prev = current, *next = proc;
         local_intr_save(intr_flag);
@@ -223,30 +275,37 @@
 // NOTE: the addr of forkret is setted in copy_thread function
 //       after switch_to, the current proc will execute here.
 static void
-forkret(void) {
+forkret(void)
+{
     forkrets(current->tf);
 }
 
 // hash_proc - add proc into proc hash_list
 static void
-hash_proc(struct proc_struct *proc) {
+hash_proc(struct proc_struct *proc)
+{
     list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
 }
 
 // unhash_proc - delete proc from proc hash_list
 static void
-unhash_proc(struct proc_struct *proc) {
+unhash_proc(struct proc_struct *proc)
+{
     list_del(&(proc->hash_link));
 }
 
 // find_proc - find proc frome proc hash_list according to pid
 struct proc_struct *
-find_proc(int pid) {
-    if (0 < pid && pid < MAX_PID) {
+find_proc(int pid)
+{
+    if (0 < pid && pid < MAX_PID)
+    {
         list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
-        while ((le = list_next(le)) != list) {
+        while ((le = list_next(le)) != list)
+        {
             struct proc_struct *proc = le2proc(le, hash_link);
-            if (proc->pid == pid) {
+            if (proc->pid == pid)
+            {
                 return proc;
             }
         }
@@ -255,10 +314,10 @@
 }
 
 // kernel_thread - create a kernel thread using "fn" function
-// NOTE: the contents of temp trapframe tf will be copied to 
+// NOTE: the contents of temp trapframe tf will be copied to
 //       proc->tf in do_fork-->copy_thread function
-int
-kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+int kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags)
+{
     struct trapframe tf;
     memset(&tf, 0, sizeof(struct trapframe));
     tf.tf_cs = KERNEL_CS;
@@ -271,9 +330,11 @@
 
 // setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
 static int
-setup_kstack(struct proc_struct *proc) {
+setup_kstack(struct proc_struct *proc)
+{
     struct Page *page = alloc_pages(KSTACKPAGE);
-    if (page != NULL) {
+    if (page != NULL)
+    {
         proc->kstack = (uintptr_t)page2kva(page);
         return 0;
     }
@@ -282,15 +343,18 @@
 
 // put_kstack - free the memory space of process kernel stack
 static void
-put_kstack(struct proc_struct *proc) {
+put_kstack(struct proc_struct *proc)
+{
     free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
 }
 
 // setup_pgdir - alloc one page as PDT
 static int
-setup_pgdir(struct mm_struct *mm) {
+setup_pgdir(struct mm_struct *mm)
+{
     struct Page *page;
-    if ((page = alloc_page()) == NULL) {
+    if ((page = alloc_page()) == NULL)
+    {
         return -E_NO_MEM;
     }
     pde_t *pgdir = page2kva(page);
@@ -302,30 +366,36 @@
 
 // put_pgdir - free the memory space of PDT
 static void
-put_pgdir(struct mm_struct *mm) {
+put_pgdir(struct mm_struct *mm)
+{
     free_page(kva2page(mm->pgdir));
 }
 
 // copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
 //         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
 static int
-copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+copy_mm(uint32_t clone_flags, struct proc_struct *proc)
+{
     struct mm_struct *mm, *oldmm = current->mm;
 
     /* current is a kernel thread */
-    if (oldmm == NULL) {
+    if (oldmm == NULL)
+    {
         return 0;
     }
-    if (clone_flags & CLONE_VM) {
+    if (clone_flags & CLONE_VM)
+    {
         mm = oldmm;
         goto good_mm;
     }
 
     int ret = -E_NO_MEM;
-    if ((mm = mm_create()) == NULL) {
+    if ((mm = mm_create()) == NULL)
+    {
         goto bad_mm;
     }
-    if (setup_pgdir(mm) != 0) {
+    if (setup_pgdir(mm) != 0)
+    {
         goto bad_pgdir_cleanup_mm;
     }
 
@@ -335,7 +405,8 @@
     }
     unlock_mm(oldmm);
 
-    if (ret != 0) {
+    if (ret != 0)
+    {
         goto bad_dup_cleanup_mmap;
     }
 
@@ -356,7 +427,8 @@
 // copy_thread - setup the trapframe on the  process's kernel stack top and
 //             - setup the kernel entry point and stack of process
 static void
-copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)
+{
     proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
     *(proc->tf) = *tf;
     proc->tf->tf_regs.reg_eax = 0;
@@ -372,11 +444,12 @@
  * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
  * @tf:          the trapframe info, which will be copied to child process's proc->tf
  */
-int
-do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+int do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf)
+{
     int ret = -E_NO_FREE_PROC;
     struct proc_struct *proc;
-    if (nr_process >= MAX_PROCESS) {
+    if (nr_process >= MAX_PROCESS)
+    {
         goto fork_out;
     }
     ret = -E_NO_MEM;
@@ -405,15 +478,44 @@
     //    5. insert proc_struct into hash_list && proc_list
     //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
+    if ((proc = alloc_proc()) == NULL)
+    {
+        goto fork_out;
+    }
+    proc->parent = current;
+    // *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    assert(current->wait_state == 0);
+    if (setup_kstack(proc) != 0)
+    {
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0)
+    {
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack, tf);
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    static int lock = 0;
+    // __Lock(lock);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        // *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+        set_links(proc);
+    }
+    // __UnLock(lock);
+    local_intr_restore(intr_flag);
+    wakeup_proc(proc);
+    ret = proc->pid;
 
-	//LAB5 YOUR CODE : (update LAB4 steps)
-   /* Some Functions
+    //LAB5 YOUR CODE : (update LAB4 steps)
+    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
     *    -------------------
-	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
-	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
-	
+
 fork_out:
     return ret;
 
@@ -428,19 +530,23 @@
 //   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
 //   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
 //   3. call scheduler to switch to other process
-int
-do_exit(int error_code) {
-    if (current == idleproc) {
+int do_exit(int error_code)
+{
+    if (current == idleproc)
+    {
         panic("idleproc exit.\n");
     }
-    if (current == initproc) {
+    if (current == initproc)
+    {
         panic("initproc exit.\n");
     }
-    
+
     struct mm_struct *mm = current->mm;
-    if (mm != NULL) {
+    if (mm != NULL)
+    {
         lcr3(boot_cr3);
-        if (mm_count_dec(mm) == 0) {
+        if (mm_count_dec(mm) == 0)
+        {
             exit_mmap(mm);
             put_pgdir(mm);
             mm_destroy(mm);
@@ -449,34 +555,39 @@
     }
     current->state = PROC_ZOMBIE;
     current->exit_code = error_code;
-    
+
     bool intr_flag;
     struct proc_struct *proc;
     local_intr_save(intr_flag);
     {
         proc = current->parent;
-        if (proc->wait_state == WT_CHILD) {
+        if (proc->wait_state == WT_CHILD)
+        {
             wakeup_proc(proc);
         }
-        while (current->cptr != NULL) {
+        while (current->cptr != NULL)
+        {
             proc = current->cptr;
             current->cptr = proc->optr;
-    
+
             proc->yptr = NULL;
-            if ((proc->optr = initproc->cptr) != NULL) {
+            if ((proc->optr = initproc->cptr) != NULL)
+            {
                 initproc->cptr->yptr = proc;
             }
             proc->parent = initproc;
             initproc->cptr = proc;
-            if (proc->state == PROC_ZOMBIE) {
-                if (initproc->wait_state == WT_CHILD) {
+            if (proc->state == PROC_ZOMBIE)
+            {
+                if (initproc->wait_state == WT_CHILD)
+                {
                     wakeup_proc(initproc);
                 }
             }
         }
     }
     local_intr_restore(intr_flag);
-    
+
     schedule();
     panic("do_exit will not return!! %d.\n", current->pid);
 }
@@ -486,19 +597,23 @@
  * @size:  the size of the content of binary program
  */
 static int
-load_icode(unsigned char *binary, size_t size) {
-    if (current->mm != NULL) {
+load_icode(unsigned char *binary, size_t size)
+{
+    if (current->mm != NULL)
+    {
         panic("load_icode: current->mm must be empty.\n");
     }
 
     int ret = -E_NO_MEM;
     struct mm_struct *mm;
     //(1) create a new mm for current process
-    if ((mm = mm_create()) == NULL) {
+    if ((mm = mm_create()) == NULL)
+    {
         goto bad_mm;
     }
     //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
-    if (setup_pgdir(mm) != 0) {
+    if (setup_pgdir(mm) != 0)
+    {
         goto bad_pgdir_cleanup_mm;
     }
     //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
@@ -508,32 +623,42 @@
     //(3.2) get the entry of the program section headers of the bianry program (ELF format)
     struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
     //(3.3) This program is valid?
-    if (elf->e_magic != ELF_MAGIC) {
+    if (elf->e_magic != ELF_MAGIC)
+    {
         ret = -E_INVAL_ELF;
         goto bad_elf_cleanup_pgdir;
     }
 
     uint32_t vm_flags, perm;
     struct proghdr *ph_end = ph + elf->e_phnum;
-    for (; ph < ph_end; ph ++) {
-    //(3.4) find every program section headers
-        if (ph->p_type != ELF_PT_LOAD) {
-            continue ;
+    for (; ph < ph_end; ph++)
+    {
+        //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD)
+        {
+            continue;
         }
-        if (ph->p_filesz > ph->p_memsz) {
+        if (ph->p_filesz > ph->p_memsz)
+        {
             ret = -E_INVAL_ELF;
             goto bad_cleanup_mmap;
         }
-        if (ph->p_filesz == 0) {
-            continue ;
+        if (ph->p_filesz == 0)
+        {
+            continue;
         }
-    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
         vm_flags = 0, perm = PTE_U;
-        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
-        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
-        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
-        if (vm_flags & VM_WRITE) perm |= PTE_W;
-        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+        if (ph->p_flags & ELF_PF_X)
+            vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W)
+            vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R)
+            vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE)
+            perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0)
+        {
             goto bad_cleanup_mmap;
         }
         unsigned char *from = binary + ph->p_offset;
@@ -542,42 +667,51 @@
 
         ret = -E_NO_MEM;
 
-     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
         end = ph->p_va + ph->p_filesz;
-     //(3.6.1) copy TEXT/DATA section of bianry program
-        while (start < end) {
-            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+        //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end)
+        {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL)
+            {
                 goto bad_cleanup_mmap;
             }
             off = start - la, size = PGSIZE - off, la += PGSIZE;
-            if (end < la) {
+            if (end < la)
+            {
                 size -= la - end;
             }
             memcpy(page2kva(page) + off, from, size);
             start += size, from += size;
         }
 
-      //(3.6.2) build BSS section of binary program
+        //(3.6.2) build BSS section of binary program
         end = ph->p_va + ph->p_memsz;
-        if (start < la) {
+        if (start < la)
+        {
             /* ph->p_memsz == ph->p_filesz */
-            if (start == end) {
-                continue ;
+            if (start == end)
+            {
+                continue;
             }
             off = start + PGSIZE - la, size = PGSIZE - off;
-            if (end < la) {
+            if (end < la)
+            {
                 size -= la - end;
             }
             memset(page2kva(page) + off, 0, size);
             start += size;
             assert((end < la && start == end) || (end >= la && start == la));
         }
-        while (start < end) {
-            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+        while (start < end)
+        {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL)
+            {
                 goto bad_cleanup_mmap;
             }
             off = start - la, size = PGSIZE - off, la += PGSIZE;
-            if (end < la) {
+            if (end < la)
+            {
                 size -= la - end;
             }
             memset(page2kva(page) + off, 0, size);
@@ -586,14 +720,15 @@
     }
     //(4) build user stack memory
     vm_flags = VM_READ | VM_WRITE | VM_STACK;
-    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0)
+    {
         goto bad_cleanup_mmap;
     }
-    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
-    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
-    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
-    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
-    
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - PGSIZE, PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 2 * PGSIZE, PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 3 * PGSIZE, PTE_USER) != NULL);
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 4 * PGSIZE, PTE_USER) != NULL);
+
     //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
     mm_count_inc(mm);
     current->mm = mm;
@@ -612,6 +747,12 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags |= FL_IF;
+    tf->tf_eflags |= 0x2;
     ret = 0;
 out:
     return ret;
@@ -627,13 +768,15 @@
 
 // do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
 //           - call load_icode to setup new memory space accroding binary prog.
-int
-do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+int do_execve(const char *name, size_t len, unsigned char *binary, size_t size)
+{
     struct mm_struct *mm = current->mm;
-    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0))
+    {
         return -E_INVAL;
     }
-    if (len > PROC_NAME_LEN) {
+    if (len > PROC_NAME_LEN)
+    {
         len = PROC_NAME_LEN;
     }
 
@@ -641,9 +784,11 @@
     memset(local_name, 0, sizeof(local_name));
     memcpy(local_name, name, len);
 
-    if (mm != NULL) {
+    if (mm != NULL)
+    {
         lcr3(boot_cr3);
-        if (mm_count_dec(mm) == 0) {
+        if (mm_count_dec(mm) == 0)
+        {
             exit_mmap(mm);
             put_pgdir(mm);
             mm_destroy(mm);
@@ -651,7 +796,8 @@
         current->mm = NULL;
     }
     int ret;
-    if ((ret = load_icode(binary, size)) != 0) {
+    if ((ret = load_icode(binary, size)) != 0)
+    {
         goto execve_exit;
     }
     set_proc_name(current, local_name);
@@ -663,8 +809,8 @@
 }
 
 // do_yield - ask the scheduler to reschedule
-int
-do_yield(void) {
+int do_yield(void)
+{
     current->need_resched = 1;
     return 0;
 }
@@ -672,11 +818,13 @@
 // do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
 //         - proc struct of this child.
 // NOTE: only after do_wait function, all resources of the child proces are free.
-int
-do_wait(int pid, int *code_store) {
+int do_wait(int pid, int *code_store)
+{
     struct mm_struct *mm = current->mm;
-    if (code_store != NULL) {
-        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+    if (code_store != NULL)
+    {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1))
+        {
             return -E_INVAL;
         }
     }
@@ -685,29 +833,37 @@
     bool intr_flag, haskid;
 repeat:
     haskid = 0;
-    if (pid != 0) {
+    if (pid != 0)
+    {
         proc = find_proc(pid);
-        if (proc != NULL && proc->parent == current) {
+        if (proc != NULL && proc->parent == current)
+        {
             haskid = 1;
-            if (proc->state == PROC_ZOMBIE) {
+            if (proc->state == PROC_ZOMBIE)
+            {
                 goto found;
             }
         }
     }
-    else {
+    else
+    {
         proc = current->cptr;
-        for (; proc != NULL; proc = proc->optr) {
+        for (; proc != NULL; proc = proc->optr)
+        {
             haskid = 1;
-            if (proc->state == PROC_ZOMBIE) {
+            if (proc->state == PROC_ZOMBIE)
+            {
                 goto found;
             }
         }
     }
-    if (haskid) {
+    if (haskid)
+    {
         current->state = PROC_SLEEPING;
         current->wait_state = WT_CHILD;
         schedule();
-        if (current->flags & PF_EXITING) {
+        if (current->flags & PF_EXITING)
+        {
             do_exit(-E_KILLED);
         }
         goto repeat;
@@ -715,10 +871,12 @@
     return -E_BAD_PROC;
 
 found:
-    if (proc == idleproc || proc == initproc) {
+    if (proc == idleproc || proc == initproc)
+    {
         panic("wait idleproc or initproc.\n");
     }
-    if (code_store != NULL) {
+    if (code_store != NULL)
+    {
         *code_store = proc->exit_code;
     }
     local_intr_save(intr_flag);
@@ -733,13 +891,16 @@
 }
 
 // do_kill - kill process with pid by set this process's flags with PF_EXITING
-int
-do_kill(int pid) {
+int do_kill(int pid)
+{
     struct proc_struct *proc;
-    if ((proc = find_proc(pid)) != NULL) {
-        if (!(proc->flags & PF_EXITING)) {
+    if ((proc = find_proc(pid)) != NULL)
+    {
+        if (!(proc->flags & PF_EXITING))
+        {
             proc->flags |= PF_EXITING;
-            if (proc->wait_state & WT_INTERRUPTED) {
+            if (proc->wait_state & WT_INTERRUPTED)
+            {
                 wakeup_proc(proc);
             }
             return 0;
@@ -751,39 +912,41 @@
 
 // kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
 static int
-kernel_execve(const char *name, unsigned char *binary, size_t size) {
+kernel_execve(const char *name, unsigned char *binary, size_t size)
+{
     int ret, len = strlen(name);
-    asm volatile (
+    asm volatile(
         "int %1;"
-        : "=a" (ret)
-        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "=a"(ret)
+        : "i"(T_SYSCALL), "0"(SYS_exec), "d"(name), "c"(len), "b"(binary), "D"(size)
         : "memory");
     return ret;
 }
 
-#define __KERNEL_EXECVE(name, binary, size) ({                          \
-            cprintf("kernel_execve: pid = %d, name = \"%s\".\n",        \
-                    current->pid, name);                                \
-            kernel_execve(name, binary, (size_t)(size));                \
-        })
-
-#define KERNEL_EXECVE(x) ({                                             \
-            extern unsigned char _binary_obj___user_##x##_out_start[],  \
-                _binary_obj___user_##x##_out_size[];                    \
-            __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,     \
-                            _binary_obj___user_##x##_out_size);         \
-        })
-
-#define __KERNEL_EXECVE2(x, xstart, xsize) ({                           \
-            extern unsigned char xstart[], xsize[];                     \
-            __KERNEL_EXECVE(#x, xstart, (size_t)xsize);                 \
-        })
+#define __KERNEL_EXECVE(name, binary, size) ({           \
+    cprintf("kernel_execve: pid = %d, name = \"%s\".\n", \
+            current->pid, name);                         \
+    kernel_execve(name, binary, (size_t)(size));         \
+})
+
+#define KERNEL_EXECVE(x) ({                                    \
+    extern unsigned char _binary_obj___user_##x##_out_start[], \
+        _binary_obj___user_##x##_out_size[];                   \
+    __KERNEL_EXECVE(#x, _binary_obj___user_##x##_out_start,    \
+                    _binary_obj___user_##x##_out_size);        \
+})
+
+#define __KERNEL_EXECVE2(x, xstart, xsize) ({   \
+    extern unsigned char xstart[], xsize[];     \
+    __KERNEL_EXECVE(#x, xstart, (size_t)xsize); \
+})
 
-#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+#define KERNEL_EXECVE2(x, xstart, xsize) __KERNEL_EXECVE2(x, xstart, xsize)
 
 // user_main - kernel thread used to exec a user program
 static int
-user_main(void *arg) {
+user_main(void *arg)
+{
 #ifdef TEST
     KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
 #else
@@ -794,16 +957,19 @@
 
 // init_main - the second kernel thread used to create user_main kernel threads
 static int
-init_main(void *arg) {
+init_main(void *arg)
+{
     size_t nr_free_pages_store = nr_free_pages();
     size_t kernel_allocated_store = kallocated();
 
     int pid = kernel_thread(user_main, NULL, 0);
-    if (pid <= 0) {
+    if (pid <= 0)
+    {
         panic("create user_main failed.\n");
     }
 
-    while (do_wait(0, NULL) == 0) {
+    while (do_wait(0, NULL) == 0)
+    {
         schedule();
     }
 
@@ -817,18 +983,20 @@
     return 0;
 }
 
-// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+// proc_init - set up the first kernel thread idleproc "idle" by itself and
 //           - create the second kernel thread init_main
-void
-proc_init(void) {
+void proc_init(void)
+{
     int i;
 
     list_init(&proc_list);
-    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+    for (i = 0; i < HASH_LIST_SIZE; i++)
+    {
         list_init(hash_list + i);
     }
 
-    if ((idleproc = alloc_proc()) == NULL) {
+    if ((idleproc = alloc_proc()) == NULL)
+    {
         panic("cannot alloc idleproc.\n");
     }
 
@@ -837,12 +1005,13 @@
     idleproc->kstack = (uintptr_t)bootstack;
     idleproc->need_resched = 1;
     set_proc_name(idleproc, "idle");
-    nr_process ++;
+    nr_process++;
 
     current = idleproc;
 
     int pid = kernel_thread(init_main, NULL, 0);
-    if (pid <= 0) {
+    if (pid <= 0)
+    {
         panic("create init_main failed.\n");
     }
 
@@ -854,20 +1023,22 @@
 }
 
 // cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
-void
-cpu_idle(void) {
-    while (1) {
-        if (current->need_resched) {
+void cpu_idle(void)
+{
+    while (1)
+    {
+        if (current->need_resched)
+        {
             schedule();
         }
     }
 }
 
-//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
-void
-lab6_set_priority(uint32_t priority)
+//FOR LAB6, set the process's priority (bigger value will get more CPU time)
+void lab6_set_priority(uint32_t priority)
 {
     if (priority == 0)
         current->lab6_priority = 1;
-    else current->lab6_priority = priority;
+    else
+        current->lab6_priority = priority;
 }
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/schedule/default_sched.c lab6/kern/schedule/default_sched.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/schedule/default_sched.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/schedule/default_sched.c	2020-05-24 08:36:39.511448243 +0000
@@ -47,12 +47,12 @@
     }
 }
 
-struct sched_class default_sched_class = {
-    .name = "RR_scheduler",
-    .init = RR_init,
-    .enqueue = RR_enqueue,
-    .dequeue = RR_dequeue,
-    .pick_next = RR_pick_next,
-    .proc_tick = RR_proc_tick,
-};
+// struct sched_class default_sched_class = {
+//     .name = "RR_scheduler",
+//     .init = RR_init,
+//     .enqueue = RR_enqueue,
+//     .dequeue = RR_dequeue,
+//     .pick_next = RR_pick_next,
+//     .proc_tick = RR_proc_tick,
+// };
 
只在 /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/schedule 存在：default_sched_stride_c
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/schedule/default_sched_stride.c lab6/kern/schedule/default_sched_stride.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/schedule/default_sched_stride.c	1970-01-01 00:00:00.000000000 +0000
+++ lab6/kern/schedule/default_sched_stride.c	2020-05-24 09:15:46.218257055 +0000
@@ -0,0 +1,165 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+/* You should define the BigStride constant here*/
+/* LAB6: YOUR CODE */
+#define BIG_STRIDE (0x7FFFFFFF) /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0)
+          return 1;
+     else if (c == 0)
+          return 0;
+     else
+          return -1;
+}
+
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq)
+{
+     /* LAB6: YOUR CODE 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+     list_init(&(rq->run_list));
+     rq->lab6_run_pool = NULL;
+     rq->proc_num = 0;
+}
+
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc)
+{
+     /* LAB6: YOUR CODE 
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+     rq->lab6_run_pool = skew_heap_insert(
+         rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice)
+     {
+          proc->time_slice = rq->max_time_slice;
+     }
+     proc->rq = rq;
+     rq->proc_num++;
+}
+
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc)
+{
+     /* LAB6: YOUR CODE 
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+     rq->lab6_run_pool = skew_heap_remove(
+         rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+     rq->proc_num--;
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq)
+{
+     /* LAB6: YOUR CODE 
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+     if (rq->lab6_run_pool == NULL)
+          return NULL;
+     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+     if (p->lab6_priority == 0)
+          p->lab6_stride += BIG_STRIDE;
+     else
+          p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+     return p;
+}
+
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc)
+{
+     /* LAB6: YOUR CODE */
+     if (proc->time_slice > 0)
+          proc->time_slice--;
+     if (proc->time_slice == 0)
+          proc->need_resched = 1;
+}
+
+struct sched_class default_sched_class = {
+    .name = "stride_scheduler",
+    .init = stride_init,
+    .enqueue = stride_enqueue,
+    .dequeue = stride_dequeue,
+    .pick_next = stride_pick_next,
+    .proc_tick = stride_proc_tick,
+};
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/trap/trap.c lab6/kern/trap/trap.c
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/kern/trap/trap.c	2020-05-24 07:28:36.522368925 +0000
+++ lab6/kern/trap/trap.c	2020-05-24 08:29:25.560768489 +0000
@@ -16,11 +16,13 @@
 #include <sched.h>
 #include <sync.h>
 #include <proc.h>
+#include <sched.h>
 
 #define TICK_NUM 100
 
-static void print_ticks() {
-    cprintf("%d ticks\n",TICK_NUM);
+static void print_ticks()
+{
+    cprintf("%d ticks\n", TICK_NUM);
 #ifdef DEBUG_GRADE
     cprintf("End of Test.\n");
     panic("EOT: kernel seems ok.");
@@ -36,14 +38,13 @@
 static struct gatedesc idt[256] = {{0}};
 
 static struct pseudodesc idt_pd = {
-    sizeof(idt) - 1, (uintptr_t)idt
-};
+    sizeof(idt) - 1, (uintptr_t)idt};
 
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
-void
-idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
-     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+void idt_init(void)
+{
+    /* LAB1 YOUR CODE : STEP 2 */
+    /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
       *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
@@ -54,14 +55,24 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-     /* LAB5 YOUR CODE */ 
-     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
-     //so you should setup the syscall interrupt gate in here
+    extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < 256; i++)
+    {
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+    }
+    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+    lidt(&idt_pd);
+    /* LAB5 YOUR CODE */
+    //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+    //so you should setup the syscall interrupt gate in here
 }
 
 static const char *
-trapname(int trapno) {
-    static const char * const excnames[] = {
+trapname(int trapno)
+{
+    static const char *const excnames[] = {
         "Divide error",
         "Debug",
         "Non-Maskable Interrupt",
@@ -81,32 +92,54 @@
         "x87 FPU Floating-Point Error",
         "Alignment Check",
         "Machine-Check",
-        "SIMD Floating-Point Exception"
-    };
+        "SIMD Floating-Point Exception"};
 
-    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+    if (trapno < sizeof(excnames) / sizeof(const char *const))
+    {
         return excnames[trapno];
     }
-    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16)
+    {
         return "Hardware Interrupt";
     }
     return "(unknown trap)";
 }
 
 /* trap_in_kernel - test if trap happened in kernel */
-bool
-trap_in_kernel(struct trapframe *tf) {
+bool trap_in_kernel(struct trapframe *tf)
+{
     return (tf->tf_cs == (uint16_t)KERNEL_CS);
 }
 
 static const char *IA32flags[] = {
-    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
-    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
-    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+    "CF",
+    NULL,
+    "PF",
+    NULL,
+    "AF",
+    NULL,
+    "ZF",
+    "SF",
+    "TF",
+    "IF",
+    "DF",
+    "OF",
+    NULL,
+    NULL,
+    "NT",
+    NULL,
+    "RF",
+    "VM",
+    "AC",
+    "VIF",
+    "VIP",
+    "ID",
+    NULL,
+    NULL,
 };
 
-void
-print_trapframe(struct trapframe *tf) {
+void print_trapframe(struct trapframe *tf)
+{
     cprintf("trapframe at %p\n", tf);
     print_regs(&tf->tf_regs);
     cprintf("  ds   0x----%04x\n", tf->tf_ds);
@@ -120,21 +153,24 @@
     cprintf("  flag 0x%08x ", tf->tf_eflags);
 
     int i, j;
-    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
-        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i++, j <<= 1)
+    {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL)
+        {
             cprintf("%s,", IA32flags[i]);
         }
     }
     cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
 
-    if (!trap_in_kernel(tf)) {
+    if (!trap_in_kernel(tf))
+    {
         cprintf("  esp  0x%08x\n", tf->tf_esp);
         cprintf("  ss   0x----%04x\n", tf->tf_ss);
     }
 }
 
-void
-print_regs(struct pushregs *regs) {
+void print_regs(struct pushregs *regs)
+{
     cprintf("  edi  0x%08x\n", regs->reg_edi);
     cprintf("  esi  0x%08x\n", regs->reg_esi);
     cprintf("  ebp  0x%08x\n", regs->reg_ebp);
@@ -146,7 +182,8 @@
 }
 
 static inline void
-print_pgfault(struct trapframe *tf) {
+print_pgfault(struct trapframe *tf)
+{
     /* error_code:
      * bit 0 == 0 means no page found, 1 means protection fault
      * bit 1 == 0 means read, 1 means write
@@ -159,18 +196,23 @@
 }
 
 static int
-pgfault_handler(struct trapframe *tf) {
+pgfault_handler(struct trapframe *tf)
+{
     extern struct mm_struct *check_mm_struct;
-    if(check_mm_struct !=NULL) { //used for test check_swap
-            print_pgfault(tf);
-        }
+    if (check_mm_struct != NULL)
+    { //used for test check_swap
+        print_pgfault(tf);
+    }
     struct mm_struct *mm;
-    if (check_mm_struct != NULL) {
+    if (check_mm_struct != NULL)
+    {
         assert(current == idleproc);
         mm = check_mm_struct;
     }
-    else {
-        if (current == NULL) {
+    else
+    {
+        if (current == NULL)
+        {
             print_trapframe(tf);
             print_pgfault(tf);
             panic("unhandled page fault.\n");
@@ -183,25 +225,34 @@
 static volatile int in_swap_tick_event = 0;
 extern struct mm_struct *check_mm_struct;
 
+/* temporary trapframe or pointer to trapframe */
+struct trapframe switchk2u, *switchu2k;
+
 static void
-trap_dispatch(struct trapframe *tf) {
+trap_dispatch(struct trapframe *tf)
+{
     char c;
 
-    int ret=0;
+    int ret = 0;
 
-    switch (tf->tf_trapno) {
-    case T_PGFLT:  //page fault
-        if ((ret = pgfault_handler(tf)) != 0) {
+    switch (tf->tf_trapno)
+    {
+    case T_PGFLT: //page fault
+        if ((ret = pgfault_handler(tf)) != 0)
+        {
             print_trapframe(tf);
-            if (current == NULL) {
+            if (current == NULL)
+            {
                 panic("handle pgfault failed. ret=%d\n", ret);
             }
-            else {
-                if (trap_in_kernel(tf)) {
+            else
+            {
+                if (trap_in_kernel(tf))
+                {
                     panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
                 }
                 cprintf("killed by kernel.\n");
-                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                panic("handle user mode pgfault failed. ret=%d\n", ret);
                 do_exit(-E_KILLED);
             }
         }
@@ -212,7 +263,7 @@
     case IRQ_OFFSET + IRQ_TIMER:
 #if 0
     LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
-    then you can add code here. 
+    then you can add code here.
 #endif
         /* LAB1 YOUR CODE : STEP 3 */
         /* handle the timer interrupt */
@@ -224,6 +275,9 @@
         /* you should upate you lab1 code (just add ONE or TWO lines of code):
          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
          */
+        ticks++;
+        assert(current != NULL);
+        sched_class_proc_tick(current);
         /* LAB6 YOUR CODE */
         /* you should upate you lab5 code
          * IMPORTANT FUNCTIONS:
@@ -240,8 +294,29 @@
         break;
     //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
     case T_SWITCH_TOU:
+        if (tf->tf_cs != USER_CS)
+        {
+            switchk2u = *tf;
+            switchk2u.tf_cs = USER_CS;
+            switchk2u.tf_ds = USER_DS;
+            switchk2u.tf_es = USER_DS;
+            switchk2u.tf_ss = USER_DS;
+            switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
+            switchk2u.tf_eflags |= FL_IOPL_MASK;
+            *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
+        }
+        break;
     case T_SWITCH_TOK:
-        panic("T_SWITCH_** ??\n");
+        if (tf->tf_cs != KERNEL_CS)
+        {
+            tf->tf_cs = KERNEL_CS;
+            tf->tf_ds = KERNEL_DS;
+            tf->tf_es = KERNEL_DS;
+            tf->tf_eflags &= ~FL_IOPL_MASK;
+            switchu2k = (struct trapframe *)(tf->tf_esp - (sizeof(struct trapframe) - 8));
+            memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
+            *((uint32_t *)tf - 1) = (uint32_t)switchu2k;
+        }
         break;
     case IRQ_OFFSET + IRQ_IDE1:
     case IRQ_OFFSET + IRQ_IDE2:
@@ -249,13 +324,13 @@
         break;
     default:
         print_trapframe(tf);
-        if (current != NULL) {
+        if (current != NULL)
+        {
             cprintf("unhandled trap.\n");
             do_exit(-E_KILLED);
         }
         // in kernel, it must be a mistake
         panic("unexpected trap in kernel.\n");
-
     }
 }
 
@@ -264,31 +339,35 @@
  * the code in kern/trap/trapentry.S restores the old CPU state saved in the
  * trapframe and then uses the iret instruction to return from the exception.
  * */
-void
-trap(struct trapframe *tf) {
+void trap(struct trapframe *tf)
+{
     // dispatch based on what type of trap occurred
     // used for previous projects
-    if (current == NULL) {
+    if (current == NULL)
+    {
         trap_dispatch(tf);
     }
-    else {
+    else
+    {
         // keep a trapframe chain in stack
         struct trapframe *otf = current->tf;
         current->tf = tf;
-    
+
         bool in_kernel = trap_in_kernel(tf);
-    
+
         trap_dispatch(tf);
-    
+
         current->tf = otf;
-        if (!in_kernel) {
-            if (current->flags & PF_EXITING) {
+        if (!in_kernel)
+        {
+            if (current->flags & PF_EXITING)
+            {
                 do_exit(-E_KILLED);
             }
-            if (current->need_resched) {
+            if (current->need_resched)
+            {
                 schedule();
             }
         }
     }
 }
-
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/Makefile lab6/Makefile
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/Makefile	2020-05-24 07:28:36.518368873 +0000
+++ lab6/Makefile	2020-05-24 07:31:18.212476982 +0000
@@ -265,7 +265,7 @@
 
 .DEFAULT_GOAL := TARGETS
 
-QEMUOPTS = -hda $(UCOREIMG) -drive file=$(SWAPIMG),media=disk,cache=writeback
+QEMUOPTS = -hda $(UCOREIMG) -drive file=$(SWAPIMG),media=disk,cache=writeback -curses
 
 .PHONY: qemu qemu-nox debug debug-nox
 qemu-mon: $(UCOREIMG) $(SWAPIMG)
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.matrix.log lab6/.matrix.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.matrix.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.matrix.log	2020-05-24 08:40:23.514889266 +0000
@@ -0,0 +1,154 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "matrix".
+fork ok.
+pid 3 is running (1000 times)!.
+pid 3 done!.
+pid 5 is running (1100 times)!.
+pid 5 done!.
+pid 7 is running (4600 times)!.
+pid 4 is running (1000 times)!.
+pid 4 done!.
+pid 9 is running (20600 times)!.
+pid 11 is running (2600 times)!.
+pid 13 is running (37100 times)!.
+pid 15 is running (23500 times)!.
+pid 17 is running (23500 times)!.
+pid 19 is running (33400 times)!.
+pid 21 is running (2600 times)!.
+pid 22 is running (26600 times)!.
+pid 6 is running (1900 times)!.
+pid 8 is running (11000 times)!.
+pid 10 is running (37100 times)!.
+pid 12 is running (13100 times)!.
+pid 14 is running (4600 times)!.
+pid 16 is running (2600 times)!.
+pid 18 is running (4600 times)!.
+pid 20 is running (13100 times)!.
+pid 23 is running (13100 times)!.
+pid 21 done!.
+pid 6 done!.
+pid 16 done!.
+pid 11 done!.
+pid 18 done!.
+pid 14 done!.
+pid 7 done!.
+pid 8 done!.
+pid 23 done!.
+pid 12 done!.
+pid 20 done!.
+pid 9 done!.
+pid 17 done!.
+pid 15 done!.
+pid 22 done!.
+pid 19 done!.
+pid 10 done!.
+pid 13 done!.
+matrix pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootasm.d lab6/obj/boot/bootasm.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootasm.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/boot/bootasm.d	2020-05-24 08:39:41.922255603 +0000
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootasm.o 和 lab6/obj/boot/bootasm.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootmain.d lab6/obj/boot/bootmain.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootmain.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/boot/bootmain.d	2020-05-24 08:39:41.922255603 +0000
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/boot/bootmain.o 和 lab6/obj/boot/bootmain.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/bootblock.asm lab6/obj/bootblock.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/bootblock.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/bootblock.asm	2020-05-24 08:39:42.130258777 +0000
@@ -0,0 +1,353 @@
+
+obj/bootblock.o：     文件格式 elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf                   	.byte 0xbf
+    7c2b:	04 80                	add    $0x80,%al
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	b8 7d 0f 20 c0       	mov    $0xc0200f7d,%eax
+    movl %cr0, %eax
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea                   	.byte 0xea
+    7c69:	6d                   	insl   (%dx),%es:(%edi)
+    7c6a:	7c 08                	jl     7c74 <protcseg+0x7>
+	...
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 a1 00 00 00       	call   7d2b <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readseg>:
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    uintptr_t end_va = va + count;
+    7c90:	8d 3c 10             	lea    (%eax,%edx,1),%edi
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c93:	89 ca                	mov    %ecx,%edx
+    7c95:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c9b:	56                   	push   %esi
+    va -= offset % SECTSIZE;
+    7c9c:	29 d0                	sub    %edx,%eax
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c9e:	c1 e9 09             	shr    $0x9,%ecx
+    va -= offset % SECTSIZE;
+    7ca1:	89 c6                	mov    %eax,%esi
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca3:	53                   	push   %ebx
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7ca4:	bb f7 01 00 00       	mov    $0x1f7,%ebx
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7ca9:	8d 41 01             	lea    0x1(%ecx),%eax
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7cac:	83 ec 08             	sub    $0x8,%esp
+    uintptr_t end_va = va + count;
+    7caf:	89 7d ec             	mov    %edi,-0x14(%ebp)
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7cb5:	3b 75 ec             	cmp    -0x14(%ebp),%esi
+    7cb8:	73 6a                	jae    7d24 <readseg+0x98>
+    7cba:	89 da                	mov    %ebx,%edx
+    7cbc:	ec                   	in     (%dx),%al
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cbd:	24 c0                	and    $0xc0,%al
+    7cbf:	3c 40                	cmp    $0x40,%al
+    7cc1:	75 f7                	jne    7cba <readseg+0x2e>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7cc3:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cc8:	b0 01                	mov    $0x1,%al
+    7cca:	ee                   	out    %al,(%dx)
+    7ccb:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cd0:	8a 45 f0             	mov    -0x10(%ebp),%al
+    7cd3:	ee                   	out    %al,(%dx)
+    outb(0x1F4, (secno >> 8) & 0xFF);
+    7cd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    7cd7:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cdc:	c1 e8 08             	shr    $0x8,%eax
+    7cdf:	ee                   	out    %al,(%dx)
+    outb(0x1F5, (secno >> 16) & 0xFF);
+    7ce0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    7ce3:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7ce8:	c1 e8 10             	shr    $0x10,%eax
+    7ceb:	ee                   	out    %al,(%dx)
+    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
+    7cec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    7cef:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cf4:	c1 e8 18             	shr    $0x18,%eax
+    7cf7:	24 0f                	and    $0xf,%al
+    7cf9:	0c e0                	or     $0xe0,%al
+    7cfb:	ee                   	out    %al,(%dx)
+    7cfc:	b0 20                	mov    $0x20,%al
+    7cfe:	89 da                	mov    %ebx,%edx
+    7d00:	ee                   	out    %al,(%dx)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7d01:	89 da                	mov    %ebx,%edx
+    7d03:	ec                   	in     (%dx),%al
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7d04:	24 c0                	and    $0xc0,%al
+    7d06:	3c 40                	cmp    $0x40,%al
+    7d08:	75 f7                	jne    7d01 <readseg+0x75>
+    asm volatile (
+    7d0a:	89 f7                	mov    %esi,%edi
+    7d0c:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7d11:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7d16:	fc                   	cld    
+    7d17:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d19:	81 c6 00 02 00 00    	add    $0x200,%esi
+    7d1f:	ff 45 f0             	incl   -0x10(%ebp)
+    7d22:	eb 91                	jmp    7cb5 <readseg+0x29>
+        readsect((void *)va, secno);
+    }
+}
+    7d24:	58                   	pop    %eax
+    7d25:	5a                   	pop    %edx
+    7d26:	5b                   	pop    %ebx
+    7d27:	5e                   	pop    %esi
+    7d28:	5f                   	pop    %edi
+    7d29:	5d                   	pop    %ebp
+    7d2a:	c3                   	ret    
+
+00007d2b <bootmain>:
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d2b:	55                   	push   %ebp
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d2c:	31 c9                	xor    %ecx,%ecx
+bootmain(void) {
+    7d2e:	89 e5                	mov    %esp,%ebp
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d30:	ba 00 10 00 00       	mov    $0x1000,%edx
+bootmain(void) {
+    7d35:	56                   	push   %esi
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d36:	b8 00 00 01 00       	mov    $0x10000,%eax
+bootmain(void) {
+    7d3b:	53                   	push   %ebx
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d3c:	e8 4b ff ff ff       	call   7c8c <readseg>
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d41:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d48:	45 4c 46 
+    7d4b:	75 3f                	jne    7d8c <bootmain+0x61>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d4d:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    eph = ph + ELFHDR->e_phnum;
+    7d52:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d59:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d5f:	c1 e6 05             	shl    $0x5,%esi
+    7d62:	01 de                	add    %ebx,%esi
+    for (; ph < eph; ph ++) {
+    7d64:	39 f3                	cmp    %esi,%ebx
+    7d66:	73 18                	jae    7d80 <bootmain+0x55>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d68:	8b 43 08             	mov    0x8(%ebx),%eax
+    for (; ph < eph; ph ++) {
+    7d6b:	83 c3 20             	add    $0x20,%ebx
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d6e:	8b 4b e4             	mov    -0x1c(%ebx),%ecx
+    7d71:	8b 53 f4             	mov    -0xc(%ebx),%edx
+    7d74:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d79:	e8 0e ff ff ff       	call   7c8c <readseg>
+    7d7e:	eb e4                	jmp    7d64 <bootmain+0x39>
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d80:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d85:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d8a:	ff d0                	call   *%eax
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d8c:	ba 00 8a ff ff       	mov    $0xffff8a00,%edx
+    7d91:	89 d0                	mov    %edx,%eax
+    7d93:	66 ef                	out    %ax,(%dx)
+    7d95:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d9a:	66 ef                	out    %ax,(%dx)
+    7d9c:	eb fe                	jmp    7d9c <bootmain+0x71>
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/bootblock.o 和 lab6/obj/bootblock.o 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/bootblock.out 和 lab6/obj/bootblock.out 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kdebug.d lab6/obj/kern/debug/kdebug.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kdebug.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/debug/kdebug.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,6 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h kern/mm/vmm.h kern/process/proc.h \
+ kern/trap/trap.h kern/debug/kdebug.h kern/debug/kmonitor.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kdebug.o 和 lab6/obj/kern/debug/kdebug.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kmonitor.d lab6/obj/kern/debug/kmonitor.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kmonitor.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/debug/kmonitor.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/kmonitor.o 和 lab6/obj/kern/debug/kmonitor.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/panic.d lab6/obj/kern/debug/panic.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/panic.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/debug/panic.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/debug/panic.o 和 lab6/obj/kern/debug/panic.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/clock.d lab6/obj/kern/driver/clock.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/clock.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/driver/clock.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/clock.o 和 lab6/obj/kern/driver/clock.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/console.d lab6/obj/kern/driver/console.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/console.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/driver/console.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/console.o 和 lab6/obj/kern/driver/console.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/ide.d lab6/obj/kern/driver/ide.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/ide.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/driver/ide.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/ide.o 和 lab6/obj/kern/driver/ide.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/intr.d lab6/obj/kern/driver/intr.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/intr.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/driver/intr.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/intr.o 和 lab6/obj/kern/driver/intr.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/picirq.d lab6/obj/kern/driver/picirq.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/picirq.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/driver/picirq.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/driver/picirq.o 和 lab6/obj/kern/driver/picirq.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/fs/swapfs.d lab6/obj/kern/fs/swapfs.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/fs/swapfs.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/fs/swapfs.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,5 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/fs/swapfs.h kern/fs/fs.h kern/driver/ide.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/fs/swapfs.o 和 lab6/obj/kern/fs/swapfs.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/entry.d lab6/obj/kern/init/entry.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/entry.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/init/entry.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/entry.o 和 lab6/obj/kern/init/entry.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/init.d lab6/obj/kern/init/init.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/init.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/init/init.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/driver/ide.h kern/mm/swap.h kern/process/proc.h \
+ kern/debug/kmonitor.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/init/init.o 和 lab6/obj/kern/init/init.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/readline.d lab6/obj/kern/libs/readline.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/readline.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/libs/readline.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/readline.o 和 lab6/obj/kern/libs/readline.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/stdio.d lab6/obj/kern/libs/stdio.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/stdio.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/libs/stdio.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/libs/stdio.o 和 lab6/obj/kern/libs/stdio.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/default_pmm.d lab6/obj/kern/mm/default_pmm.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/default_pmm.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/default_pmm.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/default_pmm.o 和 lab6/obj/kern/mm/default_pmm.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/kmalloc.d lab6/obj/kern/mm/kmalloc.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/kmalloc.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/kmalloc.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,5 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/mm/pmm.h libs/stdio.h libs/stdarg.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/kmalloc.o 和 lab6/obj/kern/mm/kmalloc.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/pmm.d lab6/obj/kern/mm/pmm.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/pmm.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/pmm.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,6 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h libs/error.h \
+ kern/mm/swap.h kern/mm/vmm.h kern/mm/kmalloc.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/pmm.o 和 lab6/obj/kern/mm/pmm.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap.d lab6/obj/kern/mm/swap.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/swap.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,6 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h kern/trap/trap.h
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap_fifo.d lab6/obj/kern/mm/swap_fifo.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap_fifo.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/swap_fifo.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,6 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap_fifo.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap_fifo.o 和 lab6/obj/kern/mm/swap_fifo.o 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/swap.o 和 lab6/obj/kern/mm/swap.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/vmm.d lab6/obj/kern/mm/vmm.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/vmm.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/mm/vmm.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,6 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h libs/skew_heap.h libs/string.h \
+ libs/stdio.h libs/stdarg.h libs/error.h kern/mm/pmm.h kern/mm/swap.h \
+ kern/mm/kmalloc.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/mm/vmm.o 和 lab6/obj/kern/mm/vmm.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/entry.d lab6/obj/kern/process/entry.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/entry.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/process/entry.d	2020-05-24 08:39:41.922255603 +0000
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/entry.o 和 lab6/obj/kern/process/entry.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/proc.d lab6/obj/kern/process/proc.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/proc.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/process/proc.d	2020-05-24 08:40:23.698892065 +0000
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/skew_heap.h kern/mm/kmalloc.h \
+ libs/string.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h \
+ libs/error.h libs/elf.h kern/mm/vmm.h libs/stdio.h libs/stdarg.h \
+ libs/stdlib.h libs/unistd.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/proc.o 和 lab6/obj/kern/process/proc.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/switch.d lab6/obj/kern/process/switch.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/switch.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/process/switch.d	2020-05-24 08:39:41.926255664 +0000
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/process/switch.o 和 lab6/obj/kern/process/switch.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched.d lab6/obj/kern/schedule/default_sched.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/schedule/default_sched.d	2020-05-24 08:39:41.926255664 +0000
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched.o obj/kern/schedule/default_sched.d: \
+ kern/schedule/default_sched.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched.o 和 lab6/obj/kern/schedule/default_sched.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched_stride.d lab6/obj/kern/schedule/default_sched_stride.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched_stride.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/schedule/default_sched_stride.d	2020-05-24 08:39:41.926255664 +0000
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched_stride.o obj/kern/schedule/default_sched_stride.d: \
+ kern/schedule/default_sched_stride.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/default_sched_stride.o 和 lab6/obj/kern/schedule/default_sched_stride.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/sched.d lab6/obj/kern/schedule/sched.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/sched.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/schedule/sched.d	2020-05-24 08:39:41.926255664 +0000
@@ -0,0 +1,6 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h libs/skew_heap.h kern/process/proc.h \
+ kern/trap/trap.h kern/mm/memlayout.h libs/stdio.h libs/stdarg.h \
+ kern/schedule/default_sched.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/schedule/sched.o 和 lab6/obj/kern/schedule/sched.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/syscall/syscall.d lab6/obj/kern/syscall/syscall.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/syscall/syscall.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/syscall/syscall.d	2020-05-24 08:39:41.926255664 +0000
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/syscall/syscall.h libs/stdio.h libs/stdarg.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/driver/clock.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/syscall/syscall.o 和 lab6/obj/kern/syscall/syscall.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trap.d lab6/obj/kern/trap/trap.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trap.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/trap/trap.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,7 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h \
+ libs/unistd.h kern/syscall/syscall.h libs/error.h kern/process/proc.h
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trapentry.d lab6/obj/kern/trap/trapentry.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trapentry.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/trap/trapentry.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trapentry.o 和 lab6/obj/kern/trap/trapentry.o 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/trap.o 和 lab6/obj/kern/trap/trap.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/vectors.d lab6/obj/kern/trap/vectors.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/vectors.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kern/trap/vectors.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kern/trap/vectors.o 和 lab6/obj/kern/trap/vectors.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kernel.asm lab6/obj/kernel.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kernel.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kernel.asm	2020-05-24 08:40:23.902895167 +0000
@@ -0,0 +1,23486 @@
+
+bin/kernel：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+
+.text
+.globl kern_entry
+kern_entry:
+    # load pa of boot pgdir
+    movl $REALLOC(__boot_pgdir), %eax
+c0100000:	b8 00 20 1b 00       	mov    $0x1b2000,%eax
+    movl %eax, %cr3
+c0100005:	0f 22 d8             	mov    %eax,%cr3
+
+    # enable paging
+    movl %cr0, %eax
+c0100008:	0f 20 c0             	mov    %cr0,%eax
+    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
+c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
+    andl $~(CR0_TS | CR0_EM), %eax
+c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
+    movl %eax, %cr0
+c0100013:	0f 22 c0             	mov    %eax,%cr0
+
+    # update eip
+    # now, eip = 0x1.....
+    leal next, %eax
+c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
+    # set eip = KERNBASE + 0x1.....
+    jmp *%eax
+c010001c:	ff e0                	jmp    *%eax
+
+c010001e <next>:
+next:
+
+    # unmap va 0 ~ 4M, it's temporary mapping
+    xorl %eax, %eax
+c010001e:	31 c0                	xor    %eax,%eax
+    movl %eax, __boot_pgdir
+c0100020:	a3 00 20 1b c0       	mov    %eax,0xc01b2000
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010002a:	bc 00 e0 12 c0       	mov    $0xc012e000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>
+
+c0100034 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100034:	eb fe                	jmp    c0100034 <spin>
+
+c0100036 <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c0100036:	55                   	push   %ebp
+c0100037:	89 e5                	mov    %esp,%ebp
+c0100039:	83 ec 28             	sub    $0x28,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c010003c:	ba d8 71 1b c0       	mov    $0xc01b71d8,%edx
+c0100041:	b8 00 40 1b c0       	mov    $0xc01b4000,%eax
+c0100046:	29 c2                	sub    %eax,%edx
+c0100048:	89 d0                	mov    %edx,%eax
+c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100055:	00 
+c0100056:	c7 04 24 00 40 1b c0 	movl   $0xc01b4000,(%esp)
+c010005d:	e8 d9 bd 00 00       	call   c010be3b <memset>
+
+    cons_init();                // init the console
+c0100062:	e8 e3 1e 00 00       	call   c0101f4a <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c0100067:	c7 45 f4 40 c7 10 c0 	movl   $0xc010c740,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100075:	c7 04 24 5c c7 10 c0 	movl   $0xc010c75c,(%esp)
+c010007c:	e8 2d 02 00 00       	call   c01002ae <cprintf>
+
+    print_kerninfo();
+c0100081:	e8 c6 09 00 00       	call   c0100a4c <print_kerninfo>
+
+    grade_backtrace();
+c0100086:	e8 a5 00 00 00       	call   c0100130 <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010008b:	e8 40 3f 00 00       	call   c0103fd0 <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c0100090:	e8 1a 20 00 00       	call   c01020af <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100095:	e8 9f 21 00 00       	call   c0102239 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c010009a:	e8 0b 62 00 00       	call   c01062aa <vmm_init>
+    sched_init();               // init scheduler
+c010009f:	e8 2a b1 00 00       	call   c010b1ce <sched_init>
+    proc_init();                // init process table
+c01000a4:	e8 42 ae 00 00       	call   c010aeeb <proc_init>
+    
+    ide_init();                 // init ide devices
+c01000a9:	e8 54 0e 00 00       	call   c0100f02 <ide_init>
+    swap_init();                // init swap
+c01000ae:	e8 36 74 00 00       	call   c01074e9 <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000b3:	e8 35 16 00 00       	call   c01016ed <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000b8:	e8 2c 21 00 00       	call   c01021e9 <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000bd:	e8 e6 af 00 00       	call   c010b0a8 <cpu_idle>
+
+c01000c2 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000c2:	55                   	push   %ebp
+c01000c3:	89 e5                	mov    %esp,%ebp
+c01000c5:	83 ec 18             	sub    $0x18,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01000cf:	00 
+c01000d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01000d7:	00 
+c01000d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01000df:	e8 b3 0d 00 00       	call   c0100e97 <mon_backtrace>
+}
+c01000e4:	90                   	nop
+c01000e5:	c9                   	leave  
+c01000e6:	c3                   	ret    
+
+c01000e7 <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000e7:	55                   	push   %ebp
+c01000e8:	89 e5                	mov    %esp,%ebp
+c01000ea:	53                   	push   %ebx
+c01000eb:	83 ec 14             	sub    $0x14,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000ee:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+c01000f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01000f4:	8d 5d 08             	lea    0x8(%ebp),%ebx
+c01000f7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000fa:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c01000fe:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100102:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0100106:	89 04 24             	mov    %eax,(%esp)
+c0100109:	e8 b4 ff ff ff       	call   c01000c2 <grade_backtrace2>
+}
+c010010e:	90                   	nop
+c010010f:	83 c4 14             	add    $0x14,%esp
+c0100112:	5b                   	pop    %ebx
+c0100113:	5d                   	pop    %ebp
+c0100114:	c3                   	ret    
+
+c0100115 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c0100115:	55                   	push   %ebp
+c0100116:	89 e5                	mov    %esp,%ebp
+c0100118:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace1(arg0, arg2);
+c010011b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010011e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100122:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100125:	89 04 24             	mov    %eax,(%esp)
+c0100128:	e8 ba ff ff ff       	call   c01000e7 <grade_backtrace1>
+}
+c010012d:	90                   	nop
+c010012e:	c9                   	leave  
+c010012f:	c3                   	ret    
+
+c0100130 <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c0100130:	55                   	push   %ebp
+c0100131:	89 e5                	mov    %esp,%ebp
+c0100133:	83 ec 18             	sub    $0x18,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100136:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
+c010013b:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
+c0100142:	ff 
+c0100143:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100147:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010014e:	e8 c2 ff ff ff       	call   c0100115 <grade_backtrace0>
+}
+c0100153:	90                   	nop
+c0100154:	c9                   	leave  
+c0100155:	c3                   	ret    
+
+c0100156 <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c0100156:	55                   	push   %ebp
+c0100157:	89 e5                	mov    %esp,%ebp
+c0100159:	83 ec 28             	sub    $0x28,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c010015c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c010015f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100162:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c0100165:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c0100168:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010016c:	83 e0 03             	and    $0x3,%eax
+c010016f:	89 c2                	mov    %eax,%edx
+c0100171:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c0100176:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010017e:	c7 04 24 61 c7 10 c0 	movl   $0xc010c761,(%esp)
+c0100185:	e8 24 01 00 00       	call   c01002ae <cprintf>
+    cprintf("%d:  cs = %x\n", round, reg1);
+c010018a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010018e:	89 c2                	mov    %eax,%edx
+c0100190:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c0100195:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100199:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010019d:	c7 04 24 6f c7 10 c0 	movl   $0xc010c76f,(%esp)
+c01001a4:	e8 05 01 00 00       	call   c01002ae <cprintf>
+    cprintf("%d:  ds = %x\n", round, reg2);
+c01001a9:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c01001ad:	89 c2                	mov    %eax,%edx
+c01001af:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c01001b4:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001b8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001bc:	c7 04 24 7d c7 10 c0 	movl   $0xc010c77d,(%esp)
+c01001c3:	e8 e6 00 00 00       	call   c01002ae <cprintf>
+    cprintf("%d:  es = %x\n", round, reg3);
+c01001c8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001cc:	89 c2                	mov    %eax,%edx
+c01001ce:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c01001d3:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001d7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001db:	c7 04 24 8b c7 10 c0 	movl   $0xc010c78b,(%esp)
+c01001e2:	e8 c7 00 00 00       	call   c01002ae <cprintf>
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001e7:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001eb:	89 c2                	mov    %eax,%edx
+c01001ed:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c01001f2:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01001f6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01001fa:	c7 04 24 99 c7 10 c0 	movl   $0xc010c799,(%esp)
+c0100201:	e8 a8 00 00 00       	call   c01002ae <cprintf>
+    round ++;
+c0100206:	a1 00 40 1b c0       	mov    0xc01b4000,%eax
+c010020b:	40                   	inc    %eax
+c010020c:	a3 00 40 1b c0       	mov    %eax,0xc01b4000
+}
+c0100211:	90                   	nop
+c0100212:	c9                   	leave  
+c0100213:	c3                   	ret    
+
+c0100214 <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c0100214:	55                   	push   %ebp
+c0100215:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+}
+c0100217:	90                   	nop
+c0100218:	5d                   	pop    %ebp
+c0100219:	c3                   	ret    
+
+c010021a <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c010021a:	55                   	push   %ebp
+c010021b:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+}
+c010021d:	90                   	nop
+c010021e:	5d                   	pop    %ebp
+c010021f:	c3                   	ret    
+
+c0100220 <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c0100220:	55                   	push   %ebp
+c0100221:	89 e5                	mov    %esp,%ebp
+c0100223:	83 ec 18             	sub    $0x18,%esp
+    lab1_print_cur_status();
+c0100226:	e8 2b ff ff ff       	call   c0100156 <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c010022b:	c7 04 24 a8 c7 10 c0 	movl   $0xc010c7a8,(%esp)
+c0100232:	e8 77 00 00 00       	call   c01002ae <cprintf>
+    lab1_switch_to_user();
+c0100237:	e8 d8 ff ff ff       	call   c0100214 <lab1_switch_to_user>
+    lab1_print_cur_status();
+c010023c:	e8 15 ff ff ff       	call   c0100156 <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c0100241:	c7 04 24 c8 c7 10 c0 	movl   $0xc010c7c8,(%esp)
+c0100248:	e8 61 00 00 00       	call   c01002ae <cprintf>
+    lab1_switch_to_kernel();
+c010024d:	e8 c8 ff ff ff       	call   c010021a <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100252:	e8 ff fe ff ff       	call   c0100156 <lab1_print_cur_status>
+}
+c0100257:	90                   	nop
+c0100258:	c9                   	leave  
+c0100259:	c3                   	ret    
+
+c010025a <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c010025a:	55                   	push   %ebp
+c010025b:	89 e5                	mov    %esp,%ebp
+c010025d:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100263:	89 04 24             	mov    %eax,(%esp)
+c0100266:	e8 0c 1d 00 00       	call   c0101f77 <cons_putc>
+    (*cnt) ++;
+c010026b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010026e:	8b 00                	mov    (%eax),%eax
+c0100270:	8d 50 01             	lea    0x1(%eax),%edx
+c0100273:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100276:	89 10                	mov    %edx,(%eax)
+}
+c0100278:	90                   	nop
+c0100279:	c9                   	leave  
+c010027a:	c3                   	ret    
+
+c010027b <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c010027b:	55                   	push   %ebp
+c010027c:	89 e5                	mov    %esp,%ebp
+c010027e:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c0100281:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100288:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010028b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010028f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100292:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100296:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c0100299:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010029d:	c7 04 24 5a 02 10 c0 	movl   $0xc010025a,(%esp)
+c01002a4:	e8 e5 be 00 00       	call   c010c18e <vprintfmt>
+    return cnt;
+c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01002ac:	c9                   	leave  
+c01002ad:	c3                   	ret    
+
+c01002ae <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c01002ae:	55                   	push   %ebp
+c01002af:	89 e5                	mov    %esp,%ebp
+c01002b1:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c01002b4:	8d 45 0c             	lea    0xc(%ebp),%eax
+c01002b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c01002ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01002bd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01002c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01002c4:	89 04 24             	mov    %eax,(%esp)
+c01002c7:	e8 af ff ff ff       	call   c010027b <vcprintf>
+c01002cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c01002cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01002d2:	c9                   	leave  
+c01002d3:	c3                   	ret    
+
+c01002d4 <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c01002d4:	55                   	push   %ebp
+c01002d5:	89 e5                	mov    %esp,%ebp
+c01002d7:	83 ec 18             	sub    $0x18,%esp
+    cons_putc(c);
+c01002da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01002dd:	89 04 24             	mov    %eax,(%esp)
+c01002e0:	e8 92 1c 00 00       	call   c0101f77 <cons_putc>
+}
+c01002e5:	90                   	nop
+c01002e6:	c9                   	leave  
+c01002e7:	c3                   	ret    
+
+c01002e8 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c01002e8:	55                   	push   %ebp
+c01002e9:	89 e5                	mov    %esp,%ebp
+c01002eb:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+c01002ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002f5:	eb 13                	jmp    c010030a <cputs+0x22>
+        cputch(c, &cnt);
+c01002f7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01002fb:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01002fe:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0100302:	89 04 24             	mov    %eax,(%esp)
+c0100305:	e8 50 ff ff ff       	call   c010025a <cputch>
+    while ((c = *str ++) != '\0') {
+c010030a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010030d:	8d 50 01             	lea    0x1(%eax),%edx
+c0100310:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100313:	0f b6 00             	movzbl (%eax),%eax
+c0100316:	88 45 f7             	mov    %al,-0x9(%ebp)
+c0100319:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c010031d:	75 d8                	jne    c01002f7 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+c010031f:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c0100322:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100326:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+c010032d:	e8 28 ff ff ff       	call   c010025a <cputch>
+    return cnt;
+c0100332:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0100335:	c9                   	leave  
+c0100336:	c3                   	ret    
+
+c0100337 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c0100337:	55                   	push   %ebp
+c0100338:	89 e5                	mov    %esp,%ebp
+c010033a:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c010033d:	e8 72 1c 00 00       	call   c0101fb4 <cons_getc>
+c0100342:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100345:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100349:	74 f2                	je     c010033d <getchar+0x6>
+        /* do nothing */;
+    return c;
+c010034b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010034e:	c9                   	leave  
+c010034f:	c3                   	ret    
+
+c0100350 <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c0100350:	55                   	push   %ebp
+c0100351:	89 e5                	mov    %esp,%ebp
+c0100353:	83 ec 28             	sub    $0x28,%esp
+    if (prompt != NULL) {
+c0100356:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010035a:	74 13                	je     c010036f <readline+0x1f>
+        cprintf("%s", prompt);
+c010035c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010035f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100363:	c7 04 24 e7 c7 10 c0 	movl   $0xc010c7e7,(%esp)
+c010036a:	e8 3f ff ff ff       	call   c01002ae <cprintf>
+    }
+    int i = 0, c;
+c010036f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100376:	e8 bc ff ff ff       	call   c0100337 <getchar>
+c010037b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c010037e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100382:	79 07                	jns    c010038b <readline+0x3b>
+            return NULL;
+c0100384:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100389:	eb 78                	jmp    c0100403 <readline+0xb3>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c010038b:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c010038f:	7e 28                	jle    c01003b9 <readline+0x69>
+c0100391:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c0100398:	7f 1f                	jg     c01003b9 <readline+0x69>
+            cputchar(c);
+c010039a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010039d:	89 04 24             	mov    %eax,(%esp)
+c01003a0:	e8 2f ff ff ff       	call   c01002d4 <cputchar>
+            buf[i ++] = c;
+c01003a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01003a8:	8d 50 01             	lea    0x1(%eax),%edx
+c01003ab:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01003ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01003b1:	88 90 20 40 1b c0    	mov    %dl,-0x3fe4bfe0(%eax)
+c01003b7:	eb 45                	jmp    c01003fe <readline+0xae>
+        }
+        else if (c == '\b' && i > 0) {
+c01003b9:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01003bd:	75 16                	jne    c01003d5 <readline+0x85>
+c01003bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003c3:	7e 10                	jle    c01003d5 <readline+0x85>
+            cputchar(c);
+c01003c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01003c8:	89 04 24             	mov    %eax,(%esp)
+c01003cb:	e8 04 ff ff ff       	call   c01002d4 <cputchar>
+            i --;
+c01003d0:	ff 4d f4             	decl   -0xc(%ebp)
+c01003d3:	eb 29                	jmp    c01003fe <readline+0xae>
+        }
+        else if (c == '\n' || c == '\r') {
+c01003d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01003d9:	74 06                	je     c01003e1 <readline+0x91>
+c01003db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01003df:	75 95                	jne    c0100376 <readline+0x26>
+            cputchar(c);
+c01003e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01003e4:	89 04 24             	mov    %eax,(%esp)
+c01003e7:	e8 e8 fe ff ff       	call   c01002d4 <cputchar>
+            buf[i] = '\0';
+c01003ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01003ef:	05 20 40 1b c0       	add    $0xc01b4020,%eax
+c01003f4:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01003f7:	b8 20 40 1b c0       	mov    $0xc01b4020,%eax
+c01003fc:	eb 05                	jmp    c0100403 <readline+0xb3>
+        c = getchar();
+c01003fe:	e9 73 ff ff ff       	jmp    c0100376 <readline+0x26>
+        }
+    }
+}
+c0100403:	c9                   	leave  
+c0100404:	c3                   	ret    
+
+c0100405 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c0100405:	55                   	push   %ebp
+c0100406:	89 e5                	mov    %esp,%ebp
+c0100408:	83 ec 28             	sub    $0x28,%esp
+    if (is_panic) {
+c010040b:	a1 20 44 1b c0       	mov    0xc01b4420,%eax
+c0100410:	85 c0                	test   %eax,%eax
+c0100412:	75 5b                	jne    c010046f <__panic+0x6a>
+        goto panic_dead;
+    }
+    is_panic = 1;
+c0100414:	c7 05 20 44 1b c0 01 	movl   $0x1,0xc01b4420
+c010041b:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c010041e:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100421:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100424:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100427:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010042b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010042e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100432:	c7 04 24 ea c7 10 c0 	movl   $0xc010c7ea,(%esp)
+c0100439:	e8 70 fe ff ff       	call   c01002ae <cprintf>
+    vcprintf(fmt, ap);
+c010043e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100441:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100445:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100448:	89 04 24             	mov    %eax,(%esp)
+c010044b:	e8 2b fe ff ff       	call   c010027b <vcprintf>
+    cprintf("\n");
+c0100450:	c7 04 24 06 c8 10 c0 	movl   $0xc010c806,(%esp)
+c0100457:	e8 52 fe ff ff       	call   c01002ae <cprintf>
+    
+    cprintf("stack trackback:\n");
+c010045c:	c7 04 24 08 c8 10 c0 	movl   $0xc010c808,(%esp)
+c0100463:	e8 46 fe ff ff       	call   c01002ae <cprintf>
+    print_stackframe();
+c0100468:	e8 2a 07 00 00       	call   c0100b97 <print_stackframe>
+c010046d:	eb 01                	jmp    c0100470 <__panic+0x6b>
+        goto panic_dead;
+c010046f:	90                   	nop
+    
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c0100470:	e8 7b 1d 00 00       	call   c01021f0 <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100475:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010047c:	e8 49 09 00 00       	call   c0100dca <kmonitor>
+c0100481:	eb f2                	jmp    c0100475 <__panic+0x70>
+
+c0100483 <__warn>:
+    }
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100483:	55                   	push   %ebp
+c0100484:	89 e5                	mov    %esp,%ebp
+c0100486:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100489:	8d 45 14             	lea    0x14(%ebp),%eax
+c010048c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c010048f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100492:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100496:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100499:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010049d:	c7 04 24 1a c8 10 c0 	movl   $0xc010c81a,(%esp)
+c01004a4:	e8 05 fe ff ff       	call   c01002ae <cprintf>
+    vcprintf(fmt, ap);
+c01004a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01004ac:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01004b0:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004b3:	89 04 24             	mov    %eax,(%esp)
+c01004b6:	e8 c0 fd ff ff       	call   c010027b <vcprintf>
+    cprintf("\n");
+c01004bb:	c7 04 24 06 c8 10 c0 	movl   $0xc010c806,(%esp)
+c01004c2:	e8 e7 fd ff ff       	call   c01002ae <cprintf>
+    va_end(ap);
+}
+c01004c7:	90                   	nop
+c01004c8:	c9                   	leave  
+c01004c9:	c3                   	ret    
+
+c01004ca <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c01004ca:	55                   	push   %ebp
+c01004cb:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c01004cd:	a1 20 44 1b c0       	mov    0xc01b4420,%eax
+}
+c01004d2:	5d                   	pop    %ebp
+c01004d3:	c3                   	ret    
+
+c01004d4 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c01004d4:	55                   	push   %ebp
+c01004d5:	89 e5                	mov    %esp,%ebp
+c01004d7:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01004da:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004dd:	8b 00                	mov    (%eax),%eax
+c01004df:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004e2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004e5:	8b 00                	mov    (%eax),%eax
+c01004e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c01004f1:	e9 ca 00 00 00       	jmp    c01005c0 <stab_binsearch+0xec>
+        int true_m = (l + r) / 2, m = true_m;
+c01004f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01004f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01004fc:	01 d0                	add    %edx,%eax
+c01004fe:	89 c2                	mov    %eax,%edx
+c0100500:	c1 ea 1f             	shr    $0x1f,%edx
+c0100503:	01 d0                	add    %edx,%eax
+c0100505:	d1 f8                	sar    %eax
+c0100507:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010050a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010050d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c0100510:	eb 03                	jmp    c0100515 <stab_binsearch+0x41>
+            m --;
+c0100512:	ff 4d f0             	decl   -0x10(%ebp)
+        while (m >= l && stabs[m].n_type != type) {
+c0100515:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100518:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010051b:	7c 1f                	jl     c010053c <stab_binsearch+0x68>
+c010051d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100520:	89 d0                	mov    %edx,%eax
+c0100522:	01 c0                	add    %eax,%eax
+c0100524:	01 d0                	add    %edx,%eax
+c0100526:	c1 e0 02             	shl    $0x2,%eax
+c0100529:	89 c2                	mov    %eax,%edx
+c010052b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010052e:	01 d0                	add    %edx,%eax
+c0100530:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100534:	0f b6 c0             	movzbl %al,%eax
+c0100537:	39 45 14             	cmp    %eax,0x14(%ebp)
+c010053a:	75 d6                	jne    c0100512 <stab_binsearch+0x3e>
+        }
+        if (m < l) {    // no match in [l, m]
+c010053c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010053f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100542:	7d 09                	jge    c010054d <stab_binsearch+0x79>
+            l = true_m + 1;
+c0100544:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100547:	40                   	inc    %eax
+c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c010054b:	eb 73                	jmp    c01005c0 <stab_binsearch+0xec>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100557:	89 d0                	mov    %edx,%eax
+c0100559:	01 c0                	add    %eax,%eax
+c010055b:	01 d0                	add    %edx,%eax
+c010055d:	c1 e0 02             	shl    $0x2,%eax
+c0100560:	89 c2                	mov    %eax,%edx
+c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100565:	01 d0                	add    %edx,%eax
+c0100567:	8b 40 08             	mov    0x8(%eax),%eax
+c010056a:	39 45 18             	cmp    %eax,0x18(%ebp)
+c010056d:	76 11                	jbe    c0100580 <stab_binsearch+0xac>
+            *region_left = m;
+c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100575:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010057a:	40                   	inc    %eax
+c010057b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010057e:	eb 40                	jmp    c01005c0 <stab_binsearch+0xec>
+        } else if (stabs[m].n_value > addr) {
+c0100580:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100583:	89 d0                	mov    %edx,%eax
+c0100585:	01 c0                	add    %eax,%eax
+c0100587:	01 d0                	add    %edx,%eax
+c0100589:	c1 e0 02             	shl    $0x2,%eax
+c010058c:	89 c2                	mov    %eax,%edx
+c010058e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100591:	01 d0                	add    %edx,%eax
+c0100593:	8b 40 08             	mov    0x8(%eax),%eax
+c0100596:	39 45 18             	cmp    %eax,0x18(%ebp)
+c0100599:	73 14                	jae    c01005af <stab_binsearch+0xdb>
+            *region_right = m - 1;
+c010059b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010059e:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01005a1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005a4:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c01005a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01005a9:	48                   	dec    %eax
+c01005aa:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01005ad:	eb 11                	jmp    c01005c0 <stab_binsearch+0xec>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c01005af:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01005b5:	89 10                	mov    %edx,(%eax)
+            l = m;
+c01005b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01005ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01005bd:	ff 45 18             	incl   0x18(%ebp)
+    while (l <= r) {
+c01005c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01005c3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01005c6:	0f 8e 2a ff ff ff    	jle    c01004f6 <stab_binsearch+0x22>
+        }
+    }
+
+    if (!any_matches) {
+c01005cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01005d0:	75 0f                	jne    c01005e1 <stab_binsearch+0x10d>
+        *region_right = *region_left - 1;
+c01005d2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005d5:	8b 00                	mov    (%eax),%eax
+c01005d7:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01005da:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005dd:	89 10                	mov    %edx,(%eax)
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+c01005df:	eb 3e                	jmp    c010061f <stab_binsearch+0x14b>
+        l = *region_right;
+c01005e1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005e4:	8b 00                	mov    (%eax),%eax
+c01005e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c01005e9:	eb 03                	jmp    c01005ee <stab_binsearch+0x11a>
+c01005eb:	ff 4d fc             	decl   -0x4(%ebp)
+c01005ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005f1:	8b 00                	mov    (%eax),%eax
+c01005f3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c01005f6:	7e 1f                	jle    c0100617 <stab_binsearch+0x143>
+c01005f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01005fb:	89 d0                	mov    %edx,%eax
+c01005fd:	01 c0                	add    %eax,%eax
+c01005ff:	01 d0                	add    %edx,%eax
+c0100601:	c1 e0 02             	shl    $0x2,%eax
+c0100604:	89 c2                	mov    %eax,%edx
+c0100606:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100609:	01 d0                	add    %edx,%eax
+c010060b:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c010060f:	0f b6 c0             	movzbl %al,%eax
+c0100612:	39 45 14             	cmp    %eax,0x14(%ebp)
+c0100615:	75 d4                	jne    c01005eb <stab_binsearch+0x117>
+        *region_left = l;
+c0100617:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010061a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010061d:	89 10                	mov    %edx,(%eax)
+}
+c010061f:	90                   	nop
+c0100620:	c9                   	leave  
+c0100621:	c3                   	ret    
+
+c0100622 <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c0100622:	55                   	push   %ebp
+c0100623:	89 e5                	mov    %esp,%ebp
+c0100625:	83 ec 58             	sub    $0x58,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c0100628:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010062b:	c7 00 38 c8 10 c0    	movl   $0xc010c838,(%eax)
+    info->eip_line = 0;
+c0100631:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100634:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c010063b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010063e:	c7 40 08 38 c8 10 c0 	movl   $0xc010c838,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c0100645:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100648:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c010064f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100652:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100655:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100658:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010065b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c0100662:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c0100669:	76 21                	jbe    c010068c <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c010066b:	c7 45 f4 e0 ef 10 c0 	movl   $0xc010efe0,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c0100672:	c7 45 f0 48 50 12 c0 	movl   $0xc0125048,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c0100679:	c7 45 ec 49 50 12 c0 	movl   $0xc0125049,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c0100680:	c7 45 e8 9e b2 12 c0 	movl   $0xc012b29e,-0x18(%ebp)
+c0100687:	e9 ea 00 00 00       	jmp    c0100776 <debuginfo_eip+0x154>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c010068c:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c0100693:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0100698:	85 c0                	test   %eax,%eax
+c010069a:	74 11                	je     c01006ad <debuginfo_eip+0x8b>
+c010069c:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c01006a1:	8b 40 18             	mov    0x18(%eax),%eax
+c01006a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01006a7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01006ab:	75 0a                	jne    c01006b7 <debuginfo_eip+0x95>
+            return -1;
+c01006ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006b2:	e9 93 03 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c01006b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006ba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01006c1:	00 
+c01006c2:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c01006c9:	00 
+c01006ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01006ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01006d1:	89 04 24             	mov    %eax,(%esp)
+c01006d4:	e8 f6 64 00 00       	call   c0106bcf <user_mem_check>
+c01006d9:	85 c0                	test   %eax,%eax
+c01006db:	75 0a                	jne    c01006e7 <debuginfo_eip+0xc5>
+            return -1;
+c01006dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006e2:	e9 63 03 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+        }
+
+        stabs = usd->stabs;
+c01006e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006ea:	8b 00                	mov    (%eax),%eax
+c01006ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006f2:	8b 40 04             	mov    0x4(%eax),%eax
+c01006f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006fb:	8b 40 08             	mov    0x8(%eax),%eax
+c01006fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c0100701:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0100704:	8b 40 0c             	mov    0xc(%eax),%eax
+c0100707:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c010070a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010070d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100710:	29 c2                	sub    %eax,%edx
+c0100712:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100715:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010071c:	00 
+c010071d:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100721:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100725:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100728:	89 04 24             	mov    %eax,(%esp)
+c010072b:	e8 9f 64 00 00       	call   c0106bcf <user_mem_check>
+c0100730:	85 c0                	test   %eax,%eax
+c0100732:	75 0a                	jne    c010073e <debuginfo_eip+0x11c>
+            return -1;
+c0100734:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100739:	e9 0c 03 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c010073e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0100741:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100744:	29 c2                	sub    %eax,%edx
+c0100746:	89 d0                	mov    %edx,%eax
+c0100748:	89 c2                	mov    %eax,%edx
+c010074a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010074d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0100754:	00 
+c0100755:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100759:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010075d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100760:	89 04 24             	mov    %eax,(%esp)
+c0100763:	e8 67 64 00 00       	call   c0106bcf <user_mem_check>
+c0100768:	85 c0                	test   %eax,%eax
+c010076a:	75 0a                	jne    c0100776 <debuginfo_eip+0x154>
+            return -1;
+c010076c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100771:	e9 d4 02 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c0100776:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100779:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010077c:	76 0b                	jbe    c0100789 <debuginfo_eip+0x167>
+c010077e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100781:	48                   	dec    %eax
+c0100782:	0f b6 00             	movzbl (%eax),%eax
+c0100785:	84 c0                	test   %al,%al
+c0100787:	74 0a                	je     c0100793 <debuginfo_eip+0x171>
+        return -1;
+c0100789:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010078e:	e9 b7 02 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c0100793:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010079a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010079d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007a0:	29 c2                	sub    %eax,%edx
+c01007a2:	89 d0                	mov    %edx,%eax
+c01007a4:	c1 f8 02             	sar    $0x2,%eax
+c01007a7:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c01007ad:	48                   	dec    %eax
+c01007ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c01007b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01007b4:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01007b8:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
+c01007bf:	00 
+c01007c0:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c01007c3:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01007c7:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c01007ca:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01007ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007d1:	89 04 24             	mov    %eax,(%esp)
+c01007d4:	e8 fb fc ff ff       	call   c01004d4 <stab_binsearch>
+    if (lfile == 0)
+c01007d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007dc:	85 c0                	test   %eax,%eax
+c01007de:	75 0a                	jne    c01007ea <debuginfo_eip+0x1c8>
+        return -1;
+c01007e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01007e5:	e9 60 02 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c01007ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01007f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c01007f6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01007f9:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01007fd:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
+c0100804:	00 
+c0100805:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0100808:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010080c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c010080f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100813:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100816:	89 04 24             	mov    %eax,(%esp)
+c0100819:	e8 b6 fc ff ff       	call   c01004d4 <stab_binsearch>
+
+    if (lfun <= rfun) {
+c010081e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100821:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0100824:	39 c2                	cmp    %eax,%edx
+c0100826:	7f 7c                	jg     c01008a4 <debuginfo_eip+0x282>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c0100828:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010082b:	89 c2                	mov    %eax,%edx
+c010082d:	89 d0                	mov    %edx,%eax
+c010082f:	01 c0                	add    %eax,%eax
+c0100831:	01 d0                	add    %edx,%eax
+c0100833:	c1 e0 02             	shl    $0x2,%eax
+c0100836:	89 c2                	mov    %eax,%edx
+c0100838:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010083b:	01 d0                	add    %edx,%eax
+c010083d:	8b 00                	mov    (%eax),%eax
+c010083f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100842:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0100845:	29 d1                	sub    %edx,%ecx
+c0100847:	89 ca                	mov    %ecx,%edx
+c0100849:	39 d0                	cmp    %edx,%eax
+c010084b:	73 22                	jae    c010086f <debuginfo_eip+0x24d>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c010084d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100850:	89 c2                	mov    %eax,%edx
+c0100852:	89 d0                	mov    %edx,%eax
+c0100854:	01 c0                	add    %eax,%eax
+c0100856:	01 d0                	add    %edx,%eax
+c0100858:	c1 e0 02             	shl    $0x2,%eax
+c010085b:	89 c2                	mov    %eax,%edx
+c010085d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100860:	01 d0                	add    %edx,%eax
+c0100862:	8b 10                	mov    (%eax),%edx
+c0100864:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100867:	01 c2                	add    %eax,%edx
+c0100869:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010086c:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c010086f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100872:	89 c2                	mov    %eax,%edx
+c0100874:	89 d0                	mov    %edx,%eax
+c0100876:	01 c0                	add    %eax,%eax
+c0100878:	01 d0                	add    %edx,%eax
+c010087a:	c1 e0 02             	shl    $0x2,%eax
+c010087d:	89 c2                	mov    %eax,%edx
+c010087f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100882:	01 d0                	add    %edx,%eax
+c0100884:	8b 50 08             	mov    0x8(%eax),%edx
+c0100887:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010088a:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c010088d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100890:	8b 40 10             	mov    0x10(%eax),%eax
+c0100893:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c0100896:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100899:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c010089c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010089f:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01008a2:	eb 15                	jmp    c01008b9 <debuginfo_eip+0x297>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c01008a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008a7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01008aa:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c01008ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c01008b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01008b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c01008b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008bc:	8b 40 08             	mov    0x8(%eax),%eax
+c01008bf:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
+c01008c6:	00 
+c01008c7:	89 04 24             	mov    %eax,(%esp)
+c01008ca:	e8 e8 b3 00 00       	call   c010bcb7 <strfind>
+c01008cf:	89 c2                	mov    %eax,%edx
+c01008d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008d4:	8b 40 08             	mov    0x8(%eax),%eax
+c01008d7:	29 c2                	sub    %eax,%edx
+c01008d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008dc:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c01008df:	8b 45 08             	mov    0x8(%ebp),%eax
+c01008e2:	89 44 24 10          	mov    %eax,0x10(%esp)
+c01008e6:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
+c01008ed:	00 
+c01008ee:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c01008f1:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01008f5:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c01008f8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01008fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008ff:	89 04 24             	mov    %eax,(%esp)
+c0100902:	e8 cd fb ff ff       	call   c01004d4 <stab_binsearch>
+    if (lline <= rline) {
+c0100907:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010090a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010090d:	39 c2                	cmp    %eax,%edx
+c010090f:	7f 23                	jg     c0100934 <debuginfo_eip+0x312>
+        info->eip_line = stabs[rline].n_desc;
+c0100911:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0100914:	89 c2                	mov    %eax,%edx
+c0100916:	89 d0                	mov    %edx,%eax
+c0100918:	01 c0                	add    %eax,%eax
+c010091a:	01 d0                	add    %edx,%eax
+c010091c:	c1 e0 02             	shl    $0x2,%eax
+c010091f:	89 c2                	mov    %eax,%edx
+c0100921:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100924:	01 d0                	add    %edx,%eax
+c0100926:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c010092a:	89 c2                	mov    %eax,%edx
+c010092c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010092f:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c0100932:	eb 11                	jmp    c0100945 <debuginfo_eip+0x323>
+        return -1;
+c0100934:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100939:	e9 0c 01 00 00       	jmp    c0100a4a <debuginfo_eip+0x428>
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c010093e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100941:	48                   	dec    %eax
+c0100942:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    while (lline >= lfile
+c0100945:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100948:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010094b:	39 c2                	cmp    %eax,%edx
+c010094d:	7c 56                	jl     c01009a5 <debuginfo_eip+0x383>
+           && stabs[lline].n_type != N_SOL
+c010094f:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100952:	89 c2                	mov    %eax,%edx
+c0100954:	89 d0                	mov    %edx,%eax
+c0100956:	01 c0                	add    %eax,%eax
+c0100958:	01 d0                	add    %edx,%eax
+c010095a:	c1 e0 02             	shl    $0x2,%eax
+c010095d:	89 c2                	mov    %eax,%edx
+c010095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100962:	01 d0                	add    %edx,%eax
+c0100964:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100968:	3c 84                	cmp    $0x84,%al
+c010096a:	74 39                	je     c01009a5 <debuginfo_eip+0x383>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010096f:	89 c2                	mov    %eax,%edx
+c0100971:	89 d0                	mov    %edx,%eax
+c0100973:	01 c0                	add    %eax,%eax
+c0100975:	01 d0                	add    %edx,%eax
+c0100977:	c1 e0 02             	shl    $0x2,%eax
+c010097a:	89 c2                	mov    %eax,%edx
+c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010097f:	01 d0                	add    %edx,%eax
+c0100981:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100985:	3c 64                	cmp    $0x64,%al
+c0100987:	75 b5                	jne    c010093e <debuginfo_eip+0x31c>
+c0100989:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010098c:	89 c2                	mov    %eax,%edx
+c010098e:	89 d0                	mov    %edx,%eax
+c0100990:	01 c0                	add    %eax,%eax
+c0100992:	01 d0                	add    %edx,%eax
+c0100994:	c1 e0 02             	shl    $0x2,%eax
+c0100997:	89 c2                	mov    %eax,%edx
+c0100999:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010099c:	01 d0                	add    %edx,%eax
+c010099e:	8b 40 08             	mov    0x8(%eax),%eax
+c01009a1:	85 c0                	test   %eax,%eax
+c01009a3:	74 99                	je     c010093e <debuginfo_eip+0x31c>
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c01009a5:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01009a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01009ab:	39 c2                	cmp    %eax,%edx
+c01009ad:	7c 46                	jl     c01009f5 <debuginfo_eip+0x3d3>
+c01009af:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009b2:	89 c2                	mov    %eax,%edx
+c01009b4:	89 d0                	mov    %edx,%eax
+c01009b6:	01 c0                	add    %eax,%eax
+c01009b8:	01 d0                	add    %edx,%eax
+c01009ba:	c1 e0 02             	shl    $0x2,%eax
+c01009bd:	89 c2                	mov    %eax,%edx
+c01009bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01009c2:	01 d0                	add    %edx,%eax
+c01009c4:	8b 00                	mov    (%eax),%eax
+c01009c6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01009c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01009cc:	29 d1                	sub    %edx,%ecx
+c01009ce:	89 ca                	mov    %ecx,%edx
+c01009d0:	39 d0                	cmp    %edx,%eax
+c01009d2:	73 21                	jae    c01009f5 <debuginfo_eip+0x3d3>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c01009d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009d7:	89 c2                	mov    %eax,%edx
+c01009d9:	89 d0                	mov    %edx,%eax
+c01009db:	01 c0                	add    %eax,%eax
+c01009dd:	01 d0                	add    %edx,%eax
+c01009df:	c1 e0 02             	shl    $0x2,%eax
+c01009e2:	89 c2                	mov    %eax,%edx
+c01009e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01009e7:	01 d0                	add    %edx,%eax
+c01009e9:	8b 10                	mov    (%eax),%edx
+c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01009ee:	01 c2                	add    %eax,%edx
+c01009f0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01009f3:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c01009f5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01009f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01009fb:	39 c2                	cmp    %eax,%edx
+c01009fd:	7d 46                	jge    c0100a45 <debuginfo_eip+0x423>
+        for (lline = lfun + 1;
+c01009ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100a02:	40                   	inc    %eax
+c0100a03:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0100a06:	eb 16                	jmp    c0100a1e <debuginfo_eip+0x3fc>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c0100a08:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100a0b:	8b 40 14             	mov    0x14(%eax),%eax
+c0100a0e:	8d 50 01             	lea    0x1(%eax),%edx
+c0100a11:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100a14:	89 50 14             	mov    %edx,0x14(%eax)
+             lline ++) {
+c0100a17:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100a1a:	40                   	inc    %eax
+c0100a1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100a1e:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100a21:	8b 45 d0             	mov    -0x30(%ebp),%eax
+        for (lline = lfun + 1;
+c0100a24:	39 c2                	cmp    %eax,%edx
+c0100a26:	7d 1d                	jge    c0100a45 <debuginfo_eip+0x423>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c0100a28:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100a2b:	89 c2                	mov    %eax,%edx
+c0100a2d:	89 d0                	mov    %edx,%eax
+c0100a2f:	01 c0                	add    %eax,%eax
+c0100a31:	01 d0                	add    %edx,%eax
+c0100a33:	c1 e0 02             	shl    $0x2,%eax
+c0100a36:	89 c2                	mov    %eax,%edx
+c0100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a3b:	01 d0                	add    %edx,%eax
+c0100a3d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100a41:	3c a0                	cmp    $0xa0,%al
+c0100a43:	74 c3                	je     c0100a08 <debuginfo_eip+0x3e6>
+        }
+    }
+    return 0;
+c0100a45:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100a4a:	c9                   	leave  
+c0100a4b:	c3                   	ret    
+
+c0100a4c <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c0100a4c:	55                   	push   %ebp
+c0100a4d:	89 e5                	mov    %esp,%ebp
+c0100a4f:	83 ec 18             	sub    $0x18,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c0100a52:	c7 04 24 42 c8 10 c0 	movl   $0xc010c842,(%esp)
+c0100a59:	e8 50 f8 ff ff       	call   c01002ae <cprintf>
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100a5e:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
+c0100a65:	c0 
+c0100a66:	c7 04 24 5b c8 10 c0 	movl   $0xc010c85b,(%esp)
+c0100a6d:	e8 3c f8 ff ff       	call   c01002ae <cprintf>
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c0100a72:	c7 44 24 04 37 c7 10 	movl   $0xc010c737,0x4(%esp)
+c0100a79:	c0 
+c0100a7a:	c7 04 24 73 c8 10 c0 	movl   $0xc010c873,(%esp)
+c0100a81:	e8 28 f8 ff ff       	call   c01002ae <cprintf>
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c0100a86:	c7 44 24 04 00 40 1b 	movl   $0xc01b4000,0x4(%esp)
+c0100a8d:	c0 
+c0100a8e:	c7 04 24 8b c8 10 c0 	movl   $0xc010c88b,(%esp)
+c0100a95:	e8 14 f8 ff ff       	call   c01002ae <cprintf>
+    cprintf("  end    0x%08x (phys)\n", end);
+c0100a9a:	c7 44 24 04 d8 71 1b 	movl   $0xc01b71d8,0x4(%esp)
+c0100aa1:	c0 
+c0100aa2:	c7 04 24 a3 c8 10 c0 	movl   $0xc010c8a3,(%esp)
+c0100aa9:	e8 00 f8 ff ff       	call   c01002ae <cprintf>
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c0100aae:	b8 d8 71 1b c0       	mov    $0xc01b71d8,%eax
+c0100ab3:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100ab9:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
+c0100abe:	29 c2                	sub    %eax,%edx
+c0100ac0:	89 d0                	mov    %edx,%eax
+c0100ac2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100ac8:	85 c0                	test   %eax,%eax
+c0100aca:	0f 48 c2             	cmovs  %edx,%eax
+c0100acd:	c1 f8 0a             	sar    $0xa,%eax
+c0100ad0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100ad4:	c7 04 24 bc c8 10 c0 	movl   $0xc010c8bc,(%esp)
+c0100adb:	e8 ce f7 ff ff       	call   c01002ae <cprintf>
+}
+c0100ae0:	90                   	nop
+c0100ae1:	c9                   	leave  
+c0100ae2:	c3                   	ret    
+
+c0100ae3 <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100ae3:	55                   	push   %ebp
+c0100ae4:	89 e5                	mov    %esp,%ebp
+c0100ae6:	81 ec 48 01 00 00    	sub    $0x148,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100aec:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100aef:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100af3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100af6:	89 04 24             	mov    %eax,(%esp)
+c0100af9:	e8 24 fb ff ff       	call   c0100622 <debuginfo_eip>
+c0100afe:	85 c0                	test   %eax,%eax
+c0100b00:	74 15                	je     c0100b17 <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100b02:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b05:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b09:	c7 04 24 e6 c8 10 c0 	movl   $0xc010c8e6,(%esp)
+c0100b10:	e8 99 f7 ff ff       	call   c01002ae <cprintf>
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100b15:	eb 6c                	jmp    c0100b83 <print_debuginfo+0xa0>
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100b17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100b1e:	eb 1b                	jmp    c0100b3b <print_debuginfo+0x58>
+            fnname[j] = info.eip_fn_name[j];
+c0100b20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b26:	01 d0                	add    %edx,%eax
+c0100b28:	0f b6 00             	movzbl (%eax),%eax
+c0100b2b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100b31:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100b34:	01 ca                	add    %ecx,%edx
+c0100b36:	88 02                	mov    %al,(%edx)
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100b38:	ff 45 f4             	incl   -0xc(%ebp)
+c0100b3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100b3e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0100b41:	7c dd                	jl     c0100b20 <print_debuginfo+0x3d>
+        fnname[j] = '\0';
+c0100b43:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b4c:	01 d0                	add    %edx,%eax
+c0100b4e:	c6 00 00             	movb   $0x0,(%eax)
+                fnname, eip - info.eip_fn_addr);
+c0100b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100b54:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100b57:	89 d1                	mov    %edx,%ecx
+c0100b59:	29 c1                	sub    %eax,%ecx
+c0100b5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100b5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100b61:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+c0100b65:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100b6b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0100b6f:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100b73:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100b77:	c7 04 24 02 c9 10 c0 	movl   $0xc010c902,(%esp)
+c0100b7e:	e8 2b f7 ff ff       	call   c01002ae <cprintf>
+}
+c0100b83:	90                   	nop
+c0100b84:	c9                   	leave  
+c0100b85:	c3                   	ret    
+
+c0100b86 <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100b86:	55                   	push   %ebp
+c0100b87:	89 e5                	mov    %esp,%ebp
+c0100b89:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100b8c:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100b8f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100b92:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100b95:	c9                   	leave  
+c0100b96:	c3                   	ret    
+
+c0100b97 <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100b97:	55                   	push   %ebp
+c0100b98:	89 e5                	mov    %esp,%ebp
+c0100b9a:	53                   	push   %ebx
+c0100b9b:	83 ec 44             	sub    $0x44,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100b9e:	89 e8                	mov    %ebp,%eax
+c0100ba0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return ebp;
+c0100ba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+    uint32_t ebp = read_ebp();
+c0100ba6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t eip = read_eip();
+c0100ba9:	e8 d8 ff ff ff       	call   c0100b86 <read_eip>
+c0100bae:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++)
+c0100bb1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100bb8:	e9 8a 00 00 00       	jmp    c0100c47 <print_stackframe+0xb0>
+    {
+        cprintf("ebp:0x%08x   eip:0x%08x ", ebp, eip);
+c0100bbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100bc0:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0100bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bc7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100bcb:	c7 04 24 14 c9 10 c0 	movl   $0xc010c914,(%esp)
+c0100bd2:	e8 d7 f6 ff ff       	call   c01002ae <cprintf>
+        uint32_t *tmp = (uint32_t *)ebp + 2;
+c0100bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bda:	83 c0 08             	add    $0x8,%eax
+c0100bdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        cprintf("arg :0x%08x 0x%08x 0x%08x 0x%08x", *(tmp + 0), *(tmp + 1), *(tmp + 2), *(tmp + 3));
+c0100be0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100be3:	83 c0 0c             	add    $0xc,%eax
+c0100be6:	8b 18                	mov    (%eax),%ebx
+c0100be8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100beb:	83 c0 08             	add    $0x8,%eax
+c0100bee:	8b 08                	mov    (%eax),%ecx
+c0100bf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100bf3:	83 c0 04             	add    $0x4,%eax
+c0100bf6:	8b 10                	mov    (%eax),%edx
+c0100bf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100bfb:	8b 00                	mov    (%eax),%eax
+c0100bfd:	89 5c 24 10          	mov    %ebx,0x10(%esp)
+c0100c01:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0100c05:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0100c09:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c0d:	c7 04 24 30 c9 10 c0 	movl   $0xc010c930,(%esp)
+c0100c14:	e8 95 f6 ff ff       	call   c01002ae <cprintf>
+        cprintf("\n");
+c0100c19:	c7 04 24 51 c9 10 c0 	movl   $0xc010c951,(%esp)
+c0100c20:	e8 89 f6 ff ff       	call   c01002ae <cprintf>
+        print_debuginfo(eip - 1);
+c0100c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100c28:	48                   	dec    %eax
+c0100c29:	89 04 24             	mov    %eax,(%esp)
+c0100c2c:	e8 b2 fe ff ff       	call   c0100ae3 <print_debuginfo>
+        eip = ((uint32_t *)ebp)[1];
+c0100c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100c34:	83 c0 04             	add    $0x4,%eax
+c0100c37:	8b 00                	mov    (%eax),%eax
+c0100c39:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        ebp = ((uint32_t *)ebp)[0];
+c0100c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100c3f:	8b 00                	mov    (%eax),%eax
+c0100c41:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; i++)
+c0100c44:	ff 45 ec             	incl   -0x14(%ebp)
+c0100c47:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100c4b:	7f 0a                	jg     c0100c57 <print_stackframe+0xc0>
+c0100c4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100c51:	0f 85 66 ff ff ff    	jne    c0100bbd <print_stackframe+0x26>
+    }
+}
+c0100c57:	90                   	nop
+c0100c58:	83 c4 44             	add    $0x44,%esp
+c0100c5b:	5b                   	pop    %ebx
+c0100c5c:	5d                   	pop    %ebp
+c0100c5d:	c3                   	ret    
+
+c0100c5e <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100c5e:	55                   	push   %ebp
+c0100c5f:	89 e5                	mov    %esp,%ebp
+c0100c61:	83 ec 28             	sub    $0x28,%esp
+    int argc = 0;
+c0100c64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c6b:	eb 0c                	jmp    c0100c79 <parse+0x1b>
+            *buf ++ = '\0';
+c0100c6d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c70:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c73:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100c76:	c6 00 00             	movb   $0x0,(%eax)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c79:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c7c:	0f b6 00             	movzbl (%eax),%eax
+c0100c7f:	84 c0                	test   %al,%al
+c0100c81:	74 1d                	je     c0100ca0 <parse+0x42>
+c0100c83:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c86:	0f b6 00             	movzbl (%eax),%eax
+c0100c89:	0f be c0             	movsbl %al,%eax
+c0100c8c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100c90:	c7 04 24 d4 c9 10 c0 	movl   $0xc010c9d4,(%esp)
+c0100c97:	e8 e9 af 00 00       	call   c010bc85 <strchr>
+c0100c9c:	85 c0                	test   %eax,%eax
+c0100c9e:	75 cd                	jne    c0100c6d <parse+0xf>
+        }
+        if (*buf == '\0') {
+c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100ca3:	0f b6 00             	movzbl (%eax),%eax
+c0100ca6:	84 c0                	test   %al,%al
+c0100ca8:	74 65                	je     c0100d0f <parse+0xb1>
+            break;
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100caa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100cae:	75 14                	jne    c0100cc4 <parse+0x66>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100cb0:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+c0100cb7:	00 
+c0100cb8:	c7 04 24 d9 c9 10 c0 	movl   $0xc010c9d9,(%esp)
+c0100cbf:	e8 ea f5 ff ff       	call   c01002ae <cprintf>
+        }
+        argv[argc ++] = buf;
+c0100cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100cc7:	8d 50 01             	lea    0x1(%eax),%edx
+c0100cca:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100ccd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100cd7:	01 c2                	add    %eax,%edx
+c0100cd9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100cdc:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100cde:	eb 03                	jmp    c0100ce3 <parse+0x85>
+            buf ++;
+c0100ce0:	ff 45 08             	incl   0x8(%ebp)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100ce3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100ce6:	0f b6 00             	movzbl (%eax),%eax
+c0100ce9:	84 c0                	test   %al,%al
+c0100ceb:	74 8c                	je     c0100c79 <parse+0x1b>
+c0100ced:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100cf0:	0f b6 00             	movzbl (%eax),%eax
+c0100cf3:	0f be c0             	movsbl %al,%eax
+c0100cf6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100cfa:	c7 04 24 d4 c9 10 c0 	movl   $0xc010c9d4,(%esp)
+c0100d01:	e8 7f af 00 00       	call   c010bc85 <strchr>
+c0100d06:	85 c0                	test   %eax,%eax
+c0100d08:	74 d6                	je     c0100ce0 <parse+0x82>
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100d0a:	e9 6a ff ff ff       	jmp    c0100c79 <parse+0x1b>
+            break;
+c0100d0f:	90                   	nop
+        }
+    }
+    return argc;
+c0100d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100d13:	c9                   	leave  
+c0100d14:	c3                   	ret    
+
+c0100d15 <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100d15:	55                   	push   %ebp
+c0100d16:	89 e5                	mov    %esp,%ebp
+c0100d18:	53                   	push   %ebx
+c0100d19:	83 ec 64             	sub    $0x64,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100d1c:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100d1f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d23:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d26:	89 04 24             	mov    %eax,(%esp)
+c0100d29:	e8 30 ff ff ff       	call   c0100c5e <parse>
+c0100d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100d31:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100d35:	75 0a                	jne    c0100d41 <runcmd+0x2c>
+        return 0;
+c0100d37:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100d3c:	e9 83 00 00 00       	jmp    c0100dc4 <runcmd+0xaf>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100d48:	eb 5a                	jmp    c0100da4 <runcmd+0x8f>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100d4a:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100d4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d50:	89 d0                	mov    %edx,%eax
+c0100d52:	01 c0                	add    %eax,%eax
+c0100d54:	01 d0                	add    %edx,%eax
+c0100d56:	c1 e0 02             	shl    $0x2,%eax
+c0100d59:	05 00 e0 12 c0       	add    $0xc012e000,%eax
+c0100d5e:	8b 00                	mov    (%eax),%eax
+c0100d60:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0100d64:	89 04 24             	mov    %eax,(%esp)
+c0100d67:	e8 7c ae 00 00       	call   c010bbe8 <strcmp>
+c0100d6c:	85 c0                	test   %eax,%eax
+c0100d6e:	75 31                	jne    c0100da1 <runcmd+0x8c>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100d70:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d73:	89 d0                	mov    %edx,%eax
+c0100d75:	01 c0                	add    %eax,%eax
+c0100d77:	01 d0                	add    %edx,%eax
+c0100d79:	c1 e0 02             	shl    $0x2,%eax
+c0100d7c:	05 08 e0 12 c0       	add    $0xc012e008,%eax
+c0100d81:	8b 10                	mov    (%eax),%edx
+c0100d83:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100d86:	83 c0 04             	add    $0x4,%eax
+c0100d89:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0100d8c:	8d 59 ff             	lea    -0x1(%ecx),%ebx
+c0100d8f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+c0100d92:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0100d96:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100d9a:	89 1c 24             	mov    %ebx,(%esp)
+c0100d9d:	ff d2                	call   *%edx
+c0100d9f:	eb 23                	jmp    c0100dc4 <runcmd+0xaf>
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100da1:	ff 45 f4             	incl   -0xc(%ebp)
+c0100da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100da7:	83 f8 02             	cmp    $0x2,%eax
+c0100daa:	76 9e                	jbe    c0100d4a <runcmd+0x35>
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100dac:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100daf:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100db3:	c7 04 24 f7 c9 10 c0 	movl   $0xc010c9f7,(%esp)
+c0100dba:	e8 ef f4 ff ff       	call   c01002ae <cprintf>
+    return 0;
+c0100dbf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dc4:	83 c4 64             	add    $0x64,%esp
+c0100dc7:	5b                   	pop    %ebx
+c0100dc8:	5d                   	pop    %ebp
+c0100dc9:	c3                   	ret    
+
+c0100dca <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100dca:	55                   	push   %ebp
+c0100dcb:	89 e5                	mov    %esp,%ebp
+c0100dcd:	83 ec 28             	sub    $0x28,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100dd0:	c7 04 24 10 ca 10 c0 	movl   $0xc010ca10,(%esp)
+c0100dd7:	e8 d2 f4 ff ff       	call   c01002ae <cprintf>
+    cprintf("Type 'help' for a list of commands.\n");
+c0100ddc:	c7 04 24 38 ca 10 c0 	movl   $0xc010ca38,(%esp)
+c0100de3:	e8 c6 f4 ff ff       	call   c01002ae <cprintf>
+
+    if (tf != NULL) {
+c0100de8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100dec:	74 0b                	je     c0100df9 <kmonitor+0x2f>
+        print_trapframe(tf);
+c0100dee:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100df1:	89 04 24             	mov    %eax,(%esp)
+c0100df4:	e8 73 16 00 00       	call   c010246c <print_trapframe>
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100df9:	c7 04 24 5d ca 10 c0 	movl   $0xc010ca5d,(%esp)
+c0100e00:	e8 4b f5 ff ff       	call   c0100350 <readline>
+c0100e05:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100e08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100e0c:	74 eb                	je     c0100df9 <kmonitor+0x2f>
+            if (runcmd(buf, tf) < 0) {
+c0100e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e11:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e18:	89 04 24             	mov    %eax,(%esp)
+c0100e1b:	e8 f5 fe ff ff       	call   c0100d15 <runcmd>
+c0100e20:	85 c0                	test   %eax,%eax
+c0100e22:	78 02                	js     c0100e26 <kmonitor+0x5c>
+        if ((buf = readline("K> ")) != NULL) {
+c0100e24:	eb d3                	jmp    c0100df9 <kmonitor+0x2f>
+                break;
+c0100e26:	90                   	nop
+            }
+        }
+    }
+}
+c0100e27:	90                   	nop
+c0100e28:	c9                   	leave  
+c0100e29:	c3                   	ret    
+
+c0100e2a <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100e2a:	55                   	push   %ebp
+c0100e2b:	89 e5                	mov    %esp,%ebp
+c0100e2d:	83 ec 28             	sub    $0x28,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100e30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100e37:	eb 3d                	jmp    c0100e76 <mon_help+0x4c>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100e39:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100e3c:	89 d0                	mov    %edx,%eax
+c0100e3e:	01 c0                	add    %eax,%eax
+c0100e40:	01 d0                	add    %edx,%eax
+c0100e42:	c1 e0 02             	shl    $0x2,%eax
+c0100e45:	05 04 e0 12 c0       	add    $0xc012e004,%eax
+c0100e4a:	8b 08                	mov    (%eax),%ecx
+c0100e4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100e4f:	89 d0                	mov    %edx,%eax
+c0100e51:	01 c0                	add    %eax,%eax
+c0100e53:	01 d0                	add    %edx,%eax
+c0100e55:	c1 e0 02             	shl    $0x2,%eax
+c0100e58:	05 00 e0 12 c0       	add    $0xc012e000,%eax
+c0100e5d:	8b 00                	mov    (%eax),%eax
+c0100e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0100e63:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0100e67:	c7 04 24 61 ca 10 c0 	movl   $0xc010ca61,(%esp)
+c0100e6e:	e8 3b f4 ff ff       	call   c01002ae <cprintf>
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100e73:	ff 45 f4             	incl   -0xc(%ebp)
+c0100e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e79:	83 f8 02             	cmp    $0x2,%eax
+c0100e7c:	76 bb                	jbe    c0100e39 <mon_help+0xf>
+    }
+    return 0;
+c0100e7e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e83:	c9                   	leave  
+c0100e84:	c3                   	ret    
+
+c0100e85 <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100e85:	55                   	push   %ebp
+c0100e86:	89 e5                	mov    %esp,%ebp
+c0100e88:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100e8b:	e8 bc fb ff ff       	call   c0100a4c <print_kerninfo>
+    return 0;
+c0100e90:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e95:	c9                   	leave  
+c0100e96:	c3                   	ret    
+
+c0100e97 <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100e97:	55                   	push   %ebp
+c0100e98:	89 e5                	mov    %esp,%ebp
+c0100e9a:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100e9d:	e8 f5 fc ff ff       	call   c0100b97 <print_stackframe>
+    return 0;
+c0100ea2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100ea7:	c9                   	leave  
+c0100ea8:	c3                   	ret    
+
+c0100ea9 <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c0100ea9:	55                   	push   %ebp
+c0100eaa:	89 e5                	mov    %esp,%ebp
+c0100eac:	83 ec 14             	sub    $0x14,%esp
+c0100eaf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100eb2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c0100eb6:	90                   	nop
+c0100eb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100eba:	83 c0 07             	add    $0x7,%eax
+c0100ebd:	0f b7 c0             	movzwl %ax,%eax
+c0100ec0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100ec4:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100ec8:	89 c2                	mov    %eax,%edx
+c0100eca:	ec                   	in     (%dx),%al
+c0100ecb:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0100ece:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0100ed2:	0f b6 c0             	movzbl %al,%eax
+c0100ed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100ed8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100edb:	25 80 00 00 00       	and    $0x80,%eax
+c0100ee0:	85 c0                	test   %eax,%eax
+c0100ee2:	75 d3                	jne    c0100eb7 <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c0100ee4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0100ee8:	74 11                	je     c0100efb <ide_wait_ready+0x52>
+c0100eea:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100eed:	83 e0 21             	and    $0x21,%eax
+c0100ef0:	85 c0                	test   %eax,%eax
+c0100ef2:	74 07                	je     c0100efb <ide_wait_ready+0x52>
+        return -1;
+c0100ef4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100ef9:	eb 05                	jmp    c0100f00 <ide_wait_ready+0x57>
+    }
+    return 0;
+c0100efb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100f00:	c9                   	leave  
+c0100f01:	c3                   	ret    
+
+c0100f02 <ide_init>:
+
+void
+ide_init(void) {
+c0100f02:	55                   	push   %ebp
+c0100f03:	89 e5                	mov    %esp,%ebp
+c0100f05:	57                   	push   %edi
+c0100f06:	53                   	push   %ebx
+c0100f07:	81 ec 50 02 00 00    	sub    $0x250,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0100f0d:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0100f13:	e9 ba 02 00 00       	jmp    c01011d2 <ide_init+0x2d0>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c0100f18:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0100f1c:	89 d0                	mov    %edx,%eax
+c0100f1e:	c1 e0 03             	shl    $0x3,%eax
+c0100f21:	29 d0                	sub    %edx,%eax
+c0100f23:	c1 e0 03             	shl    $0x3,%eax
+c0100f26:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c0100f2b:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0100f2e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f32:	d1 e8                	shr    %eax
+c0100f34:	0f b7 c0             	movzwl %ax,%eax
+c0100f37:	8b 04 85 6c ca 10 c0 	mov    -0x3fef3594(,%eax,4),%eax
+c0100f3e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c0100f42:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f46:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100f4d:	00 
+c0100f4e:	89 04 24             	mov    %eax,(%esp)
+c0100f51:	e8 53 ff ff ff       	call   c0100ea9 <ide_wait_ready>
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0100f56:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f5a:	c1 e0 04             	shl    $0x4,%eax
+c0100f5d:	24 10                	and    $0x10,%al
+c0100f5f:	0c e0                	or     $0xe0,%al
+c0100f61:	0f b6 c0             	movzbl %al,%eax
+c0100f64:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0100f68:	83 c2 06             	add    $0x6,%edx
+c0100f6b:	0f b7 d2             	movzwl %dx,%edx
+c0100f6e:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
+c0100f72:	88 45 c9             	mov    %al,-0x37(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100f75:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c0100f79:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
+c0100f7d:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f82:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100f89:	00 
+c0100f8a:	89 04 24             	mov    %eax,(%esp)
+c0100f8d:	e8 17 ff ff ff       	call   c0100ea9 <ide_wait_ready>
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c0100f92:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f96:	83 c0 07             	add    $0x7,%eax
+c0100f99:	0f b7 c0             	movzwl %ax,%eax
+c0100f9c:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
+c0100fa0:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
+c0100fa4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c0100fa8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c0100fac:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100fad:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100fb1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0100fb8:	00 
+c0100fb9:	89 04 24             	mov    %eax,(%esp)
+c0100fbc:	e8 e8 fe ff ff       	call   c0100ea9 <ide_wait_ready>
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c0100fc1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100fc5:	83 c0 07             	add    $0x7,%eax
+c0100fc8:	0f b7 c0             	movzwl %ax,%eax
+c0100fcb:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100fcf:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
+c0100fd3:	89 c2                	mov    %eax,%edx
+c0100fd5:	ec                   	in     (%dx),%al
+c0100fd6:	88 45 d1             	mov    %al,-0x2f(%ebp)
+    return data;
+c0100fd9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c0100fdd:	84 c0                	test   %al,%al
+c0100fdf:	0f 84 e3 01 00 00    	je     c01011c8 <ide_init+0x2c6>
+c0100fe5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100fe9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0100ff0:	00 
+c0100ff1:	89 04 24             	mov    %eax,(%esp)
+c0100ff4:	e8 b0 fe ff ff       	call   c0100ea9 <ide_wait_ready>
+c0100ff9:	85 c0                	test   %eax,%eax
+c0100ffb:	0f 85 c7 01 00 00    	jne    c01011c8 <ide_init+0x2c6>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c0101001:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101005:	89 d0                	mov    %edx,%eax
+c0101007:	c1 e0 03             	shl    $0x3,%eax
+c010100a:	29 d0                	sub    %edx,%eax
+c010100c:	c1 e0 03             	shl    $0x3,%eax
+c010100f:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c0101014:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0101017:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c010101b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010101e:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101024:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0101027:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+    asm volatile (
+c010102e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0101031:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0101034:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0101037:	89 cb                	mov    %ecx,%ebx
+c0101039:	89 df                	mov    %ebx,%edi
+c010103b:	89 c1                	mov    %eax,%ecx
+c010103d:	fc                   	cld    
+c010103e:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101040:	89 c8                	mov    %ecx,%eax
+c0101042:	89 fb                	mov    %edi,%ebx
+c0101044:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0101047:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c010104a:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0101050:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0101053:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101056:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c010105c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c010105f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0101062:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101067:	85 c0                	test   %eax,%eax
+c0101069:	74 0e                	je     c0101079 <ide_init+0x177>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010106b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010106e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0101074:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0101077:	eb 09                	jmp    c0101082 <ide_init+0x180>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0101079:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010107c:	8b 40 78             	mov    0x78(%eax),%eax
+c010107f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0101082:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101086:	89 d0                	mov    %edx,%eax
+c0101088:	c1 e0 03             	shl    $0x3,%eax
+c010108b:	29 d0                	sub    %edx,%eax
+c010108d:	c1 e0 03             	shl    $0x3,%eax
+c0101090:	8d 90 44 44 1b c0    	lea    -0x3fe4bbbc(%eax),%edx
+c0101096:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0101099:	89 02                	mov    %eax,(%edx)
+        ide_devices[ideno].size = sectors;
+c010109b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010109f:	89 d0                	mov    %edx,%eax
+c01010a1:	c1 e0 03             	shl    $0x3,%eax
+c01010a4:	29 d0                	sub    %edx,%eax
+c01010a6:	c1 e0 03             	shl    $0x3,%eax
+c01010a9:	8d 90 48 44 1b c0    	lea    -0x3fe4bbb8(%eax),%edx
+c01010af:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01010b2:	89 02                	mov    %eax,(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c01010b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01010b7:	83 c0 62             	add    $0x62,%eax
+c01010ba:	0f b7 00             	movzwl (%eax),%eax
+c01010bd:	25 00 02 00 00       	and    $0x200,%eax
+c01010c2:	85 c0                	test   %eax,%eax
+c01010c4:	75 24                	jne    c01010ea <ide_init+0x1e8>
+c01010c6:	c7 44 24 0c 74 ca 10 	movl   $0xc010ca74,0xc(%esp)
+c01010cd:	c0 
+c01010ce:	c7 44 24 08 b7 ca 10 	movl   $0xc010cab7,0x8(%esp)
+c01010d5:	c0 
+c01010d6:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c01010dd:	00 
+c01010de:	c7 04 24 cc ca 10 c0 	movl   $0xc010cacc,(%esp)
+c01010e5:	e8 1b f3 ff ff       	call   c0100405 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c01010ea:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01010ee:	89 d0                	mov    %edx,%eax
+c01010f0:	c1 e0 03             	shl    $0x3,%eax
+c01010f3:	29 d0                	sub    %edx,%eax
+c01010f5:	c1 e0 03             	shl    $0x3,%eax
+c01010f8:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c01010fd:	83 c0 0c             	add    $0xc,%eax
+c0101100:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0101103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0101106:	83 c0 36             	add    $0x36,%eax
+c0101109:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        unsigned int i, length = 40;
+c010110c:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
+        for (i = 0; i < length; i += 2) {
+c0101113:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010111a:	eb 34                	jmp    c0101150 <ide_init+0x24e>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c010111c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010111f:	8d 50 01             	lea    0x1(%eax),%edx
+c0101122:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101125:	01 d0                	add    %edx,%eax
+c0101127:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010112a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010112d:	01 ca                	add    %ecx,%edx
+c010112f:	0f b6 00             	movzbl (%eax),%eax
+c0101132:	88 02                	mov    %al,(%edx)
+c0101134:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0101137:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010113a:	01 d0                	add    %edx,%eax
+c010113c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010113f:	8d 4a 01             	lea    0x1(%edx),%ecx
+c0101142:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101145:	01 ca                	add    %ecx,%edx
+c0101147:	0f b6 00             	movzbl (%eax),%eax
+c010114a:	88 02                	mov    %al,(%edx)
+        for (i = 0; i < length; i += 2) {
+c010114c:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c0101150:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101153:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0101156:	72 c4                	jb     c010111c <ide_init+0x21a>
+        }
+        do {
+            model[i] = '\0';
+c0101158:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010115b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010115e:	01 d0                	add    %edx,%eax
+c0101160:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c0101163:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101166:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101169:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010116c:	85 c0                	test   %eax,%eax
+c010116e:	74 0f                	je     c010117f <ide_init+0x27d>
+c0101170:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0101173:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101176:	01 d0                	add    %edx,%eax
+c0101178:	0f b6 00             	movzbl (%eax),%eax
+c010117b:	3c 20                	cmp    $0x20,%al
+c010117d:	74 d9                	je     c0101158 <ide_init+0x256>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c010117f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101183:	89 d0                	mov    %edx,%eax
+c0101185:	c1 e0 03             	shl    $0x3,%eax
+c0101188:	29 d0                	sub    %edx,%eax
+c010118a:	c1 e0 03             	shl    $0x3,%eax
+c010118d:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c0101192:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101195:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101199:	89 d0                	mov    %edx,%eax
+c010119b:	c1 e0 03             	shl    $0x3,%eax
+c010119e:	29 d0                	sub    %edx,%eax
+c01011a0:	c1 e0 03             	shl    $0x3,%eax
+c01011a3:	05 48 44 1b c0       	add    $0xc01b4448,%eax
+c01011a8:	8b 10                	mov    (%eax),%edx
+c01011aa:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01011ae:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c01011b2:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01011b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01011ba:	c7 04 24 de ca 10 c0 	movl   $0xc010cade,(%esp)
+c01011c1:	e8 e8 f0 ff ff       	call   c01002ae <cprintf>
+c01011c6:	eb 01                	jmp    c01011c9 <ide_init+0x2c7>
+            continue ;
+c01011c8:	90                   	nop
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c01011c9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01011cd:	40                   	inc    %eax
+c01011ce:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c01011d2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01011d6:	83 f8 03             	cmp    $0x3,%eax
+c01011d9:	0f 86 39 fd ff ff    	jbe    c0100f18 <ide_init+0x16>
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c01011df:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
+c01011e6:	e8 91 0e 00 00       	call   c010207c <pic_enable>
+    pic_enable(IRQ_IDE2);
+c01011eb:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
+c01011f2:	e8 85 0e 00 00       	call   c010207c <pic_enable>
+}
+c01011f7:	90                   	nop
+c01011f8:	81 c4 50 02 00 00    	add    $0x250,%esp
+c01011fe:	5b                   	pop    %ebx
+c01011ff:	5f                   	pop    %edi
+c0101200:	5d                   	pop    %ebp
+c0101201:	c3                   	ret    
+
+c0101202 <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c0101202:	55                   	push   %ebp
+c0101203:	89 e5                	mov    %esp,%ebp
+c0101205:	83 ec 04             	sub    $0x4,%esp
+c0101208:	8b 45 08             	mov    0x8(%ebp),%eax
+c010120b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c010120f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101213:	83 f8 03             	cmp    $0x3,%eax
+c0101216:	77 21                	ja     c0101239 <ide_device_valid+0x37>
+c0101218:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c010121c:	89 d0                	mov    %edx,%eax
+c010121e:	c1 e0 03             	shl    $0x3,%eax
+c0101221:	29 d0                	sub    %edx,%eax
+c0101223:	c1 e0 03             	shl    $0x3,%eax
+c0101226:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c010122b:	0f b6 00             	movzbl (%eax),%eax
+c010122e:	84 c0                	test   %al,%al
+c0101230:	74 07                	je     c0101239 <ide_device_valid+0x37>
+c0101232:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101237:	eb 05                	jmp    c010123e <ide_device_valid+0x3c>
+c0101239:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010123e:	c9                   	leave  
+c010123f:	c3                   	ret    
+
+c0101240 <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c0101240:	55                   	push   %ebp
+c0101241:	89 e5                	mov    %esp,%ebp
+c0101243:	83 ec 08             	sub    $0x8,%esp
+c0101246:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101249:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c010124d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101251:	89 04 24             	mov    %eax,(%esp)
+c0101254:	e8 a9 ff ff ff       	call   c0101202 <ide_device_valid>
+c0101259:	85 c0                	test   %eax,%eax
+c010125b:	74 17                	je     c0101274 <ide_device_size+0x34>
+        return ide_devices[ideno].size;
+c010125d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c0101261:	89 d0                	mov    %edx,%eax
+c0101263:	c1 e0 03             	shl    $0x3,%eax
+c0101266:	29 d0                	sub    %edx,%eax
+c0101268:	c1 e0 03             	shl    $0x3,%eax
+c010126b:	05 48 44 1b c0       	add    $0xc01b4448,%eax
+c0101270:	8b 00                	mov    (%eax),%eax
+c0101272:	eb 05                	jmp    c0101279 <ide_device_size+0x39>
+    }
+    return 0;
+c0101274:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101279:	c9                   	leave  
+c010127a:	c3                   	ret    
+
+c010127b <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c010127b:	55                   	push   %ebp
+c010127c:	89 e5                	mov    %esp,%ebp
+c010127e:	57                   	push   %edi
+c010127f:	53                   	push   %ebx
+c0101280:	83 ec 50             	sub    $0x50,%esp
+c0101283:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101286:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c010128a:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101291:	77 23                	ja     c01012b6 <ide_read_secs+0x3b>
+c0101293:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101297:	83 f8 03             	cmp    $0x3,%eax
+c010129a:	77 1a                	ja     c01012b6 <ide_read_secs+0x3b>
+c010129c:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
+c01012a0:	89 d0                	mov    %edx,%eax
+c01012a2:	c1 e0 03             	shl    $0x3,%eax
+c01012a5:	29 d0                	sub    %edx,%eax
+c01012a7:	c1 e0 03             	shl    $0x3,%eax
+c01012aa:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c01012af:	0f b6 00             	movzbl (%eax),%eax
+c01012b2:	84 c0                	test   %al,%al
+c01012b4:	75 24                	jne    c01012da <ide_read_secs+0x5f>
+c01012b6:	c7 44 24 0c fc ca 10 	movl   $0xc010cafc,0xc(%esp)
+c01012bd:	c0 
+c01012be:	c7 44 24 08 b7 ca 10 	movl   $0xc010cab7,0x8(%esp)
+c01012c5:	c0 
+c01012c6:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
+c01012cd:	00 
+c01012ce:	c7 04 24 cc ca 10 c0 	movl   $0xc010cacc,(%esp)
+c01012d5:	e8 2b f1 ff ff       	call   c0100405 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c01012da:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c01012e1:	77 0f                	ja     c01012f2 <ide_read_secs+0x77>
+c01012e3:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01012e6:	8b 45 14             	mov    0x14(%ebp),%eax
+c01012e9:	01 d0                	add    %edx,%eax
+c01012eb:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c01012f0:	76 24                	jbe    c0101316 <ide_read_secs+0x9b>
+c01012f2:	c7 44 24 0c 24 cb 10 	movl   $0xc010cb24,0xc(%esp)
+c01012f9:	c0 
+c01012fa:	c7 44 24 08 b7 ca 10 	movl   $0xc010cab7,0x8(%esp)
+c0101301:	c0 
+c0101302:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c0101309:	00 
+c010130a:	c7 04 24 cc ca 10 c0 	movl   $0xc010cacc,(%esp)
+c0101311:	e8 ef f0 ff ff       	call   c0100405 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c0101316:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010131a:	d1 e8                	shr    %eax
+c010131c:	0f b7 c0             	movzwl %ax,%eax
+c010131f:	8b 04 85 6c ca 10 c0 	mov    -0x3fef3594(,%eax,4),%eax
+c0101326:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c010132a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010132e:	d1 e8                	shr    %eax
+c0101330:	0f b7 c0             	movzwl %ax,%eax
+c0101333:	0f b7 04 85 6e ca 10 	movzwl -0x3fef3592(,%eax,4),%eax
+c010133a:	c0 
+c010133b:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c010133f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101343:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010134a:	00 
+c010134b:	89 04 24             	mov    %eax,(%esp)
+c010134e:	e8 56 fb ff ff       	call   c0100ea9 <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101353:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0101356:	83 c0 02             	add    $0x2,%eax
+c0101359:	0f b7 c0             	movzwl %ax,%eax
+c010135c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101360:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101364:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0101368:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c010136c:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c010136d:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101370:	0f b6 c0             	movzbl %al,%eax
+c0101373:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101377:	83 c2 02             	add    $0x2,%edx
+c010137a:	0f b7 d2             	movzwl %dx,%edx
+c010137d:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c0101381:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101384:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101388:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c010138c:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c010138d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101390:	0f b6 c0             	movzbl %al,%eax
+c0101393:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101397:	83 c2 03             	add    $0x3,%edx
+c010139a:	0f b7 d2             	movzwl %dx,%edx
+c010139d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c01013a1:	88 45 dd             	mov    %al,-0x23(%ebp)
+c01013a4:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01013a8:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01013ac:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c01013ad:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01013b0:	c1 e8 08             	shr    $0x8,%eax
+c01013b3:	0f b6 c0             	movzbl %al,%eax
+c01013b6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01013ba:	83 c2 04             	add    $0x4,%edx
+c01013bd:	0f b7 d2             	movzwl %dx,%edx
+c01013c0:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c01013c4:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c01013c7:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c01013cb:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01013cf:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c01013d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01013d3:	c1 e8 10             	shr    $0x10,%eax
+c01013d6:	0f b6 c0             	movzbl %al,%eax
+c01013d9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01013dd:	83 c2 05             	add    $0x5,%edx
+c01013e0:	0f b7 d2             	movzwl %dx,%edx
+c01013e3:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c01013e7:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c01013ea:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c01013ee:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c01013f2:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c01013f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01013f6:	c0 e0 04             	shl    $0x4,%al
+c01013f9:	24 10                	and    $0x10,%al
+c01013fb:	88 c2                	mov    %al,%dl
+c01013fd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101400:	c1 e8 18             	shr    $0x18,%eax
+c0101403:	24 0f                	and    $0xf,%al
+c0101405:	08 d0                	or     %dl,%al
+c0101407:	0c e0                	or     $0xe0,%al
+c0101409:	0f b6 c0             	movzbl %al,%eax
+c010140c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101410:	83 c2 06             	add    $0x6,%edx
+c0101413:	0f b7 d2             	movzwl %dx,%edx
+c0101416:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c010141a:	88 45 e9             	mov    %al,-0x17(%ebp)
+c010141d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101421:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101425:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c0101426:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010142a:	83 c0 07             	add    $0x7,%eax
+c010142d:	0f b7 c0             	movzwl %ax,%eax
+c0101430:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101434:	c6 45 ed 20          	movb   $0x20,-0x13(%ebp)
+c0101438:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010143c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101440:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101441:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101448:	eb 57                	jmp    c01014a1 <ide_read_secs+0x226>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c010144a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010144e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0101455:	00 
+c0101456:	89 04 24             	mov    %eax,(%esp)
+c0101459:	e8 4b fa ff ff       	call   c0100ea9 <ide_wait_ready>
+c010145e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101461:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101465:	75 42                	jne    c01014a9 <ide_read_secs+0x22e>
+            goto out;
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c0101467:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010146b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010146e:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101471:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0101474:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    asm volatile (
+c010147b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010147e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c0101481:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0101484:	89 cb                	mov    %ecx,%ebx
+c0101486:	89 df                	mov    %ebx,%edi
+c0101488:	89 c1                	mov    %eax,%ecx
+c010148a:	fc                   	cld    
+c010148b:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c010148d:	89 c8                	mov    %ecx,%eax
+c010148f:	89 fb                	mov    %edi,%ebx
+c0101491:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c0101494:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101497:	ff 4d 14             	decl   0x14(%ebp)
+c010149a:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c01014a1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01014a5:	75 a3                	jne    c010144a <ide_read_secs+0x1cf>
+    }
+
+out:
+c01014a7:	eb 01                	jmp    c01014aa <ide_read_secs+0x22f>
+            goto out;
+c01014a9:	90                   	nop
+    return ret;
+c01014aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01014ad:	83 c4 50             	add    $0x50,%esp
+c01014b0:	5b                   	pop    %ebx
+c01014b1:	5f                   	pop    %edi
+c01014b2:	5d                   	pop    %ebp
+c01014b3:	c3                   	ret    
+
+c01014b4 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c01014b4:	55                   	push   %ebp
+c01014b5:	89 e5                	mov    %esp,%ebp
+c01014b7:	56                   	push   %esi
+c01014b8:	53                   	push   %ebx
+c01014b9:	83 ec 50             	sub    $0x50,%esp
+c01014bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01014bf:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c01014c3:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c01014ca:	77 23                	ja     c01014ef <ide_write_secs+0x3b>
+c01014cc:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014d0:	83 f8 03             	cmp    $0x3,%eax
+c01014d3:	77 1a                	ja     c01014ef <ide_write_secs+0x3b>
+c01014d5:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
+c01014d9:	89 d0                	mov    %edx,%eax
+c01014db:	c1 e0 03             	shl    $0x3,%eax
+c01014de:	29 d0                	sub    %edx,%eax
+c01014e0:	c1 e0 03             	shl    $0x3,%eax
+c01014e3:	05 40 44 1b c0       	add    $0xc01b4440,%eax
+c01014e8:	0f b6 00             	movzbl (%eax),%eax
+c01014eb:	84 c0                	test   %al,%al
+c01014ed:	75 24                	jne    c0101513 <ide_write_secs+0x5f>
+c01014ef:	c7 44 24 0c fc ca 10 	movl   $0xc010cafc,0xc(%esp)
+c01014f6:	c0 
+c01014f7:	c7 44 24 08 b7 ca 10 	movl   $0xc010cab7,0x8(%esp)
+c01014fe:	c0 
+c01014ff:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
+c0101506:	00 
+c0101507:	c7 04 24 cc ca 10 c0 	movl   $0xc010cacc,(%esp)
+c010150e:	e8 f2 ee ff ff       	call   c0100405 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101513:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c010151a:	77 0f                	ja     c010152b <ide_write_secs+0x77>
+c010151c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010151f:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101522:	01 d0                	add    %edx,%eax
+c0101524:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c0101529:	76 24                	jbe    c010154f <ide_write_secs+0x9b>
+c010152b:	c7 44 24 0c 24 cb 10 	movl   $0xc010cb24,0xc(%esp)
+c0101532:	c0 
+c0101533:	c7 44 24 08 b7 ca 10 	movl   $0xc010cab7,0x8(%esp)
+c010153a:	c0 
+c010153b:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
+c0101542:	00 
+c0101543:	c7 04 24 cc ca 10 c0 	movl   $0xc010cacc,(%esp)
+c010154a:	e8 b6 ee ff ff       	call   c0100405 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c010154f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101553:	d1 e8                	shr    %eax
+c0101555:	0f b7 c0             	movzwl %ax,%eax
+c0101558:	8b 04 85 6c ca 10 c0 	mov    -0x3fef3594(,%eax,4),%eax
+c010155f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101563:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101567:	d1 e8                	shr    %eax
+c0101569:	0f b7 c0             	movzwl %ax,%eax
+c010156c:	0f b7 04 85 6e ca 10 	movzwl -0x3fef3592(,%eax,4),%eax
+c0101573:	c0 
+c0101574:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101578:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010157c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0101583:	00 
+c0101584:	89 04 24             	mov    %eax,(%esp)
+c0101587:	e8 1d f9 ff ff       	call   c0100ea9 <ide_wait_ready>
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c010158c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010158f:	83 c0 02             	add    $0x2,%eax
+c0101592:	0f b7 c0             	movzwl %ax,%eax
+c0101595:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
+c0101599:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010159d:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c01015a1:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c01015a5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c01015a6:	8b 45 14             	mov    0x14(%ebp),%eax
+c01015a9:	0f b6 c0             	movzbl %al,%eax
+c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015b0:	83 c2 02             	add    $0x2,%edx
+c01015b3:	0f b7 d2             	movzwl %dx,%edx
+c01015b6:	66 89 55 da          	mov    %dx,-0x26(%ebp)
+c01015ba:	88 45 d9             	mov    %al,-0x27(%ebp)
+c01015bd:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c01015c1:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c01015c5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01015c9:	0f b6 c0             	movzbl %al,%eax
+c01015cc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015d0:	83 c2 03             	add    $0x3,%edx
+c01015d3:	0f b7 d2             	movzwl %dx,%edx
+c01015d6:	66 89 55 de          	mov    %dx,-0x22(%ebp)
+c01015da:	88 45 dd             	mov    %al,-0x23(%ebp)
+c01015dd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01015e1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01015e5:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c01015e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01015e9:	c1 e8 08             	shr    $0x8,%eax
+c01015ec:	0f b6 c0             	movzbl %al,%eax
+c01015ef:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015f3:	83 c2 04             	add    $0x4,%edx
+c01015f6:	0f b7 d2             	movzwl %dx,%edx
+c01015f9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c01015fd:	88 45 e1             	mov    %al,-0x1f(%ebp)
+c0101600:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0101604:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101608:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101609:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010160c:	c1 e8 10             	shr    $0x10,%eax
+c010160f:	0f b6 c0             	movzbl %al,%eax
+c0101612:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101616:	83 c2 05             	add    $0x5,%edx
+c0101619:	0f b7 d2             	movzwl %dx,%edx
+c010161c:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101620:	88 45 e5             	mov    %al,-0x1b(%ebp)
+c0101623:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101627:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c010162b:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c010162c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010162f:	c0 e0 04             	shl    $0x4,%al
+c0101632:	24 10                	and    $0x10,%al
+c0101634:	88 c2                	mov    %al,%dl
+c0101636:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101639:	c1 e8 18             	shr    $0x18,%eax
+c010163c:	24 0f                	and    $0xf,%al
+c010163e:	08 d0                	or     %dl,%al
+c0101640:	0c e0                	or     $0xe0,%al
+c0101642:	0f b6 c0             	movzbl %al,%eax
+c0101645:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101649:	83 c2 06             	add    $0x6,%edx
+c010164c:	0f b7 d2             	movzwl %dx,%edx
+c010164f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101653:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101656:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c010165a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010165e:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101663:	83 c0 07             	add    $0x7,%eax
+c0101666:	0f b7 c0             	movzwl %ax,%eax
+c0101669:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c010166d:	c6 45 ed 30          	movb   $0x30,-0x13(%ebp)
+c0101671:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101675:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101679:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c010167a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101681:	eb 57                	jmp    c01016da <ide_write_secs+0x226>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101683:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101687:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010168e:	00 
+c010168f:	89 04 24             	mov    %eax,(%esp)
+c0101692:	e8 12 f8 ff ff       	call   c0100ea9 <ide_wait_ready>
+c0101697:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010169a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010169e:	75 42                	jne    c01016e2 <ide_write_secs+0x22e>
+            goto out;
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c01016a0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01016a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01016a7:	8b 45 10             	mov    0x10(%ebp),%eax
+c01016aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c01016ad:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
+    asm volatile (
+c01016b4:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01016b7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
+c01016ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01016bd:	89 cb                	mov    %ecx,%ebx
+c01016bf:	89 de                	mov    %ebx,%esi
+c01016c1:	89 c1                	mov    %eax,%ecx
+c01016c3:	fc                   	cld    
+c01016c4:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c01016c6:	89 c8                	mov    %ecx,%eax
+c01016c8:	89 f3                	mov    %esi,%ebx
+c01016ca:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+c01016cd:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c01016d0:	ff 4d 14             	decl   0x14(%ebp)
+c01016d3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c01016da:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01016de:	75 a3                	jne    c0101683 <ide_write_secs+0x1cf>
+    }
+
+out:
+c01016e0:	eb 01                	jmp    c01016e3 <ide_write_secs+0x22f>
+            goto out;
+c01016e2:	90                   	nop
+    return ret;
+c01016e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01016e6:	83 c4 50             	add    $0x50,%esp
+c01016e9:	5b                   	pop    %ebx
+c01016ea:	5e                   	pop    %esi
+c01016eb:	5d                   	pop    %ebp
+c01016ec:	c3                   	ret    
+
+c01016ed <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c01016ed:	55                   	push   %ebp
+c01016ee:	89 e5                	mov    %esp,%ebp
+c01016f0:	83 ec 28             	sub    $0x28,%esp
+c01016f3:	66 c7 45 ee 43 00    	movw   $0x43,-0x12(%ebp)
+c01016f9:	c6 45 ed 34          	movb   $0x34,-0x13(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01016fd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101701:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101705:	ee                   	out    %al,(%dx)
+c0101706:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c010170c:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
+c0101710:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101714:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101718:	ee                   	out    %al,(%dx)
+c0101719:	66 c7 45 f6 40 00    	movw   $0x40,-0xa(%ebp)
+c010171f:	c6 45 f5 2e          	movb   $0x2e,-0xb(%ebp)
+c0101723:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0101727:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010172b:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c010172c:	c7 05 7c 70 1b c0 00 	movl   $0x0,0xc01b707c
+c0101733:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c0101736:	c7 04 24 5e cb 10 c0 	movl   $0xc010cb5e,(%esp)
+c010173d:	e8 6c eb ff ff       	call   c01002ae <cprintf>
+    pic_enable(IRQ_TIMER);
+c0101742:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0101749:	e8 2e 09 00 00       	call   c010207c <pic_enable>
+}
+c010174e:	90                   	nop
+c010174f:	c9                   	leave  
+c0101750:	c3                   	ret    
+
+c0101751 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0101751:	55                   	push   %ebp
+c0101752:	89 e5                	mov    %esp,%ebp
+c0101754:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0101757:	9c                   	pushf  
+c0101758:	58                   	pop    %eax
+c0101759:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010175c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010175f:	25 00 02 00 00       	and    $0x200,%eax
+c0101764:	85 c0                	test   %eax,%eax
+c0101766:	74 0c                	je     c0101774 <__intr_save+0x23>
+        intr_disable();
+c0101768:	e8 83 0a 00 00       	call   c01021f0 <intr_disable>
+        return 1;
+c010176d:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101772:	eb 05                	jmp    c0101779 <__intr_save+0x28>
+    }
+    return 0;
+c0101774:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101779:	c9                   	leave  
+c010177a:	c3                   	ret    
+
+c010177b <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010177b:	55                   	push   %ebp
+c010177c:	89 e5                	mov    %esp,%ebp
+c010177e:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0101781:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0101785:	74 05                	je     c010178c <__intr_restore+0x11>
+        intr_enable();
+c0101787:	e8 5d 0a 00 00       	call   c01021e9 <intr_enable>
+    }
+}
+c010178c:	90                   	nop
+c010178d:	c9                   	leave  
+c010178e:	c3                   	ret    
+
+c010178f <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c010178f:	55                   	push   %ebp
+c0101790:	89 e5                	mov    %esp,%ebp
+c0101792:	83 ec 10             	sub    $0x10,%esp
+c0101795:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010179b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010179f:	89 c2                	mov    %eax,%edx
+c01017a1:	ec                   	in     (%dx),%al
+c01017a2:	88 45 f1             	mov    %al,-0xf(%ebp)
+c01017a5:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
+c01017ab:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c01017af:	89 c2                	mov    %eax,%edx
+c01017b1:	ec                   	in     (%dx),%al
+c01017b2:	88 45 f5             	mov    %al,-0xb(%ebp)
+c01017b5:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c01017bb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01017bf:	89 c2                	mov    %eax,%edx
+c01017c1:	ec                   	in     (%dx),%al
+c01017c2:	88 45 f9             	mov    %al,-0x7(%ebp)
+c01017c5:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+c01017cb:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c01017cf:	89 c2                	mov    %eax,%edx
+c01017d1:	ec                   	in     (%dx),%al
+c01017d2:	88 45 fd             	mov    %al,-0x3(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c01017d5:	90                   	nop
+c01017d6:	c9                   	leave  
+c01017d7:	c3                   	ret    
+
+c01017d8 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c01017d8:	55                   	push   %ebp
+c01017d9:	89 e5                	mov    %esp,%ebp
+c01017db:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c01017de:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c01017e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017e8:	0f b7 00             	movzwl (%eax),%eax
+c01017eb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c01017ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017f2:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c01017f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017fa:	0f b7 00             	movzwl (%eax),%eax
+c01017fd:	0f b7 c0             	movzwl %ax,%eax
+c0101800:	3d 5a a5 00 00       	cmp    $0xa55a,%eax
+c0101805:	74 12                	je     c0101819 <cga_init+0x41>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c0101807:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c010180e:	66 c7 05 26 45 1b c0 	movw   $0x3b4,0xc01b4526
+c0101815:	b4 03 
+c0101817:	eb 13                	jmp    c010182c <cga_init+0x54>
+    } else {
+        *cp = was;
+c0101819:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010181c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0101820:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c0101823:	66 c7 05 26 45 1b c0 	movw   $0x3d4,0xc01b4526
+c010182a:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c010182c:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c0101833:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
+c0101837:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010183b:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c010183f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101843:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c0101844:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c010184b:	40                   	inc    %eax
+c010184c:	0f b7 c0             	movzwl %ax,%eax
+c010184f:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101853:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0101857:	89 c2                	mov    %eax,%edx
+c0101859:	ec                   	in     (%dx),%al
+c010185a:	88 45 e9             	mov    %al,-0x17(%ebp)
+    return data;
+c010185d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101861:	0f b6 c0             	movzbl %al,%eax
+c0101864:	c1 e0 08             	shl    $0x8,%eax
+c0101867:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c010186a:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c0101871:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101875:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101879:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010187d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101881:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101882:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c0101889:	40                   	inc    %eax
+c010188a:	0f b7 c0             	movzwl %ax,%eax
+c010188d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101891:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101895:	89 c2                	mov    %eax,%edx
+c0101897:	ec                   	in     (%dx),%al
+c0101898:	88 45 f1             	mov    %al,-0xf(%ebp)
+    return data;
+c010189b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010189f:	0f b6 c0             	movzbl %al,%eax
+c01018a2:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c01018a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01018a8:	a3 20 45 1b c0       	mov    %eax,0xc01b4520
+    crt_pos = pos;
+c01018ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01018b0:	0f b7 c0             	movzwl %ax,%eax
+c01018b3:	66 a3 24 45 1b c0    	mov    %ax,0xc01b4524
+}
+c01018b9:	90                   	nop
+c01018ba:	c9                   	leave  
+c01018bb:	c3                   	ret    
+
+c01018bc <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c01018bc:	55                   	push   %ebp
+c01018bd:	89 e5                	mov    %esp,%ebp
+c01018bf:	83 ec 48             	sub    $0x48,%esp
+c01018c2:	66 c7 45 d2 fa 03    	movw   $0x3fa,-0x2e(%ebp)
+c01018c8:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01018cc:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c01018d0:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c01018d4:	ee                   	out    %al,(%dx)
+c01018d5:	66 c7 45 d6 fb 03    	movw   $0x3fb,-0x2a(%ebp)
+c01018db:	c6 45 d5 80          	movb   $0x80,-0x2b(%ebp)
+c01018df:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c01018e3:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c01018e7:	ee                   	out    %al,(%dx)
+c01018e8:	66 c7 45 da f8 03    	movw   $0x3f8,-0x26(%ebp)
+c01018ee:	c6 45 d9 0c          	movb   $0xc,-0x27(%ebp)
+c01018f2:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c01018f6:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c01018fa:	ee                   	out    %al,(%dx)
+c01018fb:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
+c0101901:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
+c0101905:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101909:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010190d:	ee                   	out    %al,(%dx)
+c010190e:	66 c7 45 e2 fb 03    	movw   $0x3fb,-0x1e(%ebp)
+c0101914:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
+c0101918:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c010191c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101920:	ee                   	out    %al,(%dx)
+c0101921:	66 c7 45 e6 fc 03    	movw   $0x3fc,-0x1a(%ebp)
+c0101927:	c6 45 e5 00          	movb   $0x0,-0x1b(%ebp)
+c010192b:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c010192f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101933:	ee                   	out    %al,(%dx)
+c0101934:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c010193a:	c6 45 e9 01          	movb   $0x1,-0x17(%ebp)
+c010193e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101942:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101946:	ee                   	out    %al,(%dx)
+c0101947:	66 c7 45 ee fd 03    	movw   $0x3fd,-0x12(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010194d:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0101951:	89 c2                	mov    %eax,%edx
+c0101953:	ec                   	in     (%dx),%al
+c0101954:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c0101957:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c010195b:	3c ff                	cmp    $0xff,%al
+c010195d:	0f 95 c0             	setne  %al
+c0101960:	0f b6 c0             	movzbl %al,%eax
+c0101963:	a3 28 45 1b c0       	mov    %eax,0xc01b4528
+c0101968:	66 c7 45 f2 fa 03    	movw   $0x3fa,-0xe(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010196e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101972:	89 c2                	mov    %eax,%edx
+c0101974:	ec                   	in     (%dx),%al
+c0101975:	88 45 f1             	mov    %al,-0xf(%ebp)
+c0101978:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+c010197e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101982:	89 c2                	mov    %eax,%edx
+c0101984:	ec                   	in     (%dx),%al
+c0101985:	88 45 f5             	mov    %al,-0xb(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101988:	a1 28 45 1b c0       	mov    0xc01b4528,%eax
+c010198d:	85 c0                	test   %eax,%eax
+c010198f:	74 0c                	je     c010199d <serial_init+0xe1>
+        pic_enable(IRQ_COM1);
+c0101991:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0101998:	e8 df 06 00 00       	call   c010207c <pic_enable>
+    }
+}
+c010199d:	90                   	nop
+c010199e:	c9                   	leave  
+c010199f:	c3                   	ret    
+
+c01019a0 <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c01019a0:	55                   	push   %ebp
+c01019a1:	89 e5                	mov    %esp,%ebp
+c01019a3:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c01019a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01019ad:	eb 08                	jmp    c01019b7 <lpt_putc_sub+0x17>
+        delay();
+c01019af:	e8 db fd ff ff       	call   c010178f <delay>
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c01019b4:	ff 45 fc             	incl   -0x4(%ebp)
+c01019b7:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
+c01019bd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c01019c1:	89 c2                	mov    %eax,%edx
+c01019c3:	ec                   	in     (%dx),%al
+c01019c4:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c01019c7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01019cb:	84 c0                	test   %al,%al
+c01019cd:	78 09                	js     c01019d8 <lpt_putc_sub+0x38>
+c01019cf:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c01019d6:	7e d7                	jle    c01019af <lpt_putc_sub+0xf>
+    }
+    outb(LPTPORT + 0, c);
+c01019d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01019db:	0f b6 c0             	movzbl %al,%eax
+c01019de:	66 c7 45 ee 78 03    	movw   $0x378,-0x12(%ebp)
+c01019e4:	88 45 ed             	mov    %al,-0x13(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01019e7:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c01019eb:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01019ef:	ee                   	out    %al,(%dx)
+c01019f0:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
+c01019f6:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c01019fa:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01019fe:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101a02:	ee                   	out    %al,(%dx)
+c0101a03:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
+c0101a09:	c6 45 f5 08          	movb   $0x8,-0xb(%ebp)
+c0101a0d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0101a11:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101a15:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c0101a16:	90                   	nop
+c0101a17:	c9                   	leave  
+c0101a18:	c3                   	ret    
+
+c0101a19 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c0101a19:	55                   	push   %ebp
+c0101a1a:	89 e5                	mov    %esp,%ebp
+c0101a1c:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c0101a1f:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c0101a23:	74 0d                	je     c0101a32 <lpt_putc+0x19>
+        lpt_putc_sub(c);
+c0101a25:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101a28:	89 04 24             	mov    %eax,(%esp)
+c0101a2b:	e8 70 ff ff ff       	call   c01019a0 <lpt_putc_sub>
+    else {
+        lpt_putc_sub('\b');
+        lpt_putc_sub(' ');
+        lpt_putc_sub('\b');
+    }
+}
+c0101a30:	eb 24                	jmp    c0101a56 <lpt_putc+0x3d>
+        lpt_putc_sub('\b');
+c0101a32:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101a39:	e8 62 ff ff ff       	call   c01019a0 <lpt_putc_sub>
+        lpt_putc_sub(' ');
+c0101a3e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0101a45:	e8 56 ff ff ff       	call   c01019a0 <lpt_putc_sub>
+        lpt_putc_sub('\b');
+c0101a4a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101a51:	e8 4a ff ff ff       	call   c01019a0 <lpt_putc_sub>
+}
+c0101a56:	90                   	nop
+c0101a57:	c9                   	leave  
+c0101a58:	c3                   	ret    
+
+c0101a59 <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c0101a59:	55                   	push   %ebp
+c0101a5a:	89 e5                	mov    %esp,%ebp
+c0101a5c:	53                   	push   %ebx
+c0101a5d:	83 ec 34             	sub    $0x34,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c0101a60:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101a63:	25 00 ff ff ff       	and    $0xffffff00,%eax
+c0101a68:	85 c0                	test   %eax,%eax
+c0101a6a:	75 07                	jne    c0101a73 <cga_putc+0x1a>
+        c |= 0x0700;
+c0101a6c:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c0101a73:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101a76:	0f b6 c0             	movzbl %al,%eax
+c0101a79:	83 f8 0a             	cmp    $0xa,%eax
+c0101a7c:	74 55                	je     c0101ad3 <cga_putc+0x7a>
+c0101a7e:	83 f8 0d             	cmp    $0xd,%eax
+c0101a81:	74 63                	je     c0101ae6 <cga_putc+0x8d>
+c0101a83:	83 f8 08             	cmp    $0x8,%eax
+c0101a86:	0f 85 94 00 00 00    	jne    c0101b20 <cga_putc+0xc7>
+    case '\b':
+        if (crt_pos > 0) {
+c0101a8c:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101a93:	85 c0                	test   %eax,%eax
+c0101a95:	0f 84 af 00 00 00    	je     c0101b4a <cga_putc+0xf1>
+            crt_pos --;
+c0101a9b:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101aa2:	48                   	dec    %eax
+c0101aa3:	0f b7 c0             	movzwl %ax,%eax
+c0101aa6:	66 a3 24 45 1b c0    	mov    %ax,0xc01b4524
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101aac:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101aaf:	98                   	cwtl   
+c0101ab0:	25 00 ff ff ff       	and    $0xffffff00,%eax
+c0101ab5:	98                   	cwtl   
+c0101ab6:	83 c8 20             	or     $0x20,%eax
+c0101ab9:	98                   	cwtl   
+c0101aba:	8b 15 20 45 1b c0    	mov    0xc01b4520,%edx
+c0101ac0:	0f b7 0d 24 45 1b c0 	movzwl 0xc01b4524,%ecx
+c0101ac7:	01 c9                	add    %ecx,%ecx
+c0101ac9:	01 ca                	add    %ecx,%edx
+c0101acb:	0f b7 c0             	movzwl %ax,%eax
+c0101ace:	66 89 02             	mov    %ax,(%edx)
+        }
+        break;
+c0101ad1:	eb 77                	jmp    c0101b4a <cga_putc+0xf1>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101ad3:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101ada:	83 c0 50             	add    $0x50,%eax
+c0101add:	0f b7 c0             	movzwl %ax,%eax
+c0101ae0:	66 a3 24 45 1b c0    	mov    %ax,0xc01b4524
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101ae6:	0f b7 1d 24 45 1b c0 	movzwl 0xc01b4524,%ebx
+c0101aed:	0f b7 0d 24 45 1b c0 	movzwl 0xc01b4524,%ecx
+c0101af4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+c0101af9:	89 c8                	mov    %ecx,%eax
+c0101afb:	f7 e2                	mul    %edx
+c0101afd:	c1 ea 06             	shr    $0x6,%edx
+c0101b00:	89 d0                	mov    %edx,%eax
+c0101b02:	c1 e0 02             	shl    $0x2,%eax
+c0101b05:	01 d0                	add    %edx,%eax
+c0101b07:	c1 e0 04             	shl    $0x4,%eax
+c0101b0a:	29 c1                	sub    %eax,%ecx
+c0101b0c:	89 c8                	mov    %ecx,%eax
+c0101b0e:	0f b7 c0             	movzwl %ax,%eax
+c0101b11:	29 c3                	sub    %eax,%ebx
+c0101b13:	89 d8                	mov    %ebx,%eax
+c0101b15:	0f b7 c0             	movzwl %ax,%eax
+c0101b18:	66 a3 24 45 1b c0    	mov    %ax,0xc01b4524
+        break;
+c0101b1e:	eb 2b                	jmp    c0101b4b <cga_putc+0xf2>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c0101b20:	8b 0d 20 45 1b c0    	mov    0xc01b4520,%ecx
+c0101b26:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101b2d:	8d 50 01             	lea    0x1(%eax),%edx
+c0101b30:	0f b7 d2             	movzwl %dx,%edx
+c0101b33:	66 89 15 24 45 1b c0 	mov    %dx,0xc01b4524
+c0101b3a:	01 c0                	add    %eax,%eax
+c0101b3c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c0101b3f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b42:	0f b7 c0             	movzwl %ax,%eax
+c0101b45:	66 89 02             	mov    %ax,(%edx)
+        break;
+c0101b48:	eb 01                	jmp    c0101b4b <cga_putc+0xf2>
+        break;
+c0101b4a:	90                   	nop
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c0101b4b:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101b52:	3d cf 07 00 00       	cmp    $0x7cf,%eax
+c0101b57:	76 5d                	jbe    c0101bb6 <cga_putc+0x15d>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c0101b59:	a1 20 45 1b c0       	mov    0xc01b4520,%eax
+c0101b5e:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c0101b64:	a1 20 45 1b c0       	mov    0xc01b4520,%eax
+c0101b69:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
+c0101b70:	00 
+c0101b71:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0101b75:	89 04 24             	mov    %eax,(%esp)
+c0101b78:	e8 fe a2 00 00       	call   c010be7b <memmove>
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101b7d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c0101b84:	eb 14                	jmp    c0101b9a <cga_putc+0x141>
+            crt_buf[i] = 0x0700 | ' ';
+c0101b86:	a1 20 45 1b c0       	mov    0xc01b4520,%eax
+c0101b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101b8e:	01 d2                	add    %edx,%edx
+c0101b90:	01 d0                	add    %edx,%eax
+c0101b92:	66 c7 00 20 07       	movw   $0x720,(%eax)
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101b97:	ff 45 f4             	incl   -0xc(%ebp)
+c0101b9a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c0101ba1:	7e e3                	jle    c0101b86 <cga_putc+0x12d>
+        }
+        crt_pos -= CRT_COLS;
+c0101ba3:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101baa:	83 e8 50             	sub    $0x50,%eax
+c0101bad:	0f b7 c0             	movzwl %ax,%eax
+c0101bb0:	66 a3 24 45 1b c0    	mov    %ax,0xc01b4524
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c0101bb6:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c0101bbd:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
+c0101bc1:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
+c0101bc5:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0101bc9:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101bcd:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101bce:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101bd5:	c1 e8 08             	shr    $0x8,%eax
+c0101bd8:	0f b7 c0             	movzwl %ax,%eax
+c0101bdb:	0f b6 c0             	movzbl %al,%eax
+c0101bde:	0f b7 15 26 45 1b c0 	movzwl 0xc01b4526,%edx
+c0101be5:	42                   	inc    %edx
+c0101be6:	0f b7 d2             	movzwl %dx,%edx
+c0101be9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
+c0101bed:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101bf0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101bf4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101bf8:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101bf9:	0f b7 05 26 45 1b c0 	movzwl 0xc01b4526,%eax
+c0101c00:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101c04:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
+c0101c08:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0101c0c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101c10:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c0101c11:	0f b7 05 24 45 1b c0 	movzwl 0xc01b4524,%eax
+c0101c18:	0f b6 c0             	movzbl %al,%eax
+c0101c1b:	0f b7 15 26 45 1b c0 	movzwl 0xc01b4526,%edx
+c0101c22:	42                   	inc    %edx
+c0101c23:	0f b7 d2             	movzwl %dx,%edx
+c0101c26:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+c0101c2a:	88 45 f1             	mov    %al,-0xf(%ebp)
+c0101c2d:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c0101c31:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101c35:	ee                   	out    %al,(%dx)
+}
+c0101c36:	90                   	nop
+c0101c37:	83 c4 34             	add    $0x34,%esp
+c0101c3a:	5b                   	pop    %ebx
+c0101c3b:	5d                   	pop    %ebp
+c0101c3c:	c3                   	ret    
+
+c0101c3d <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c0101c3d:	55                   	push   %ebp
+c0101c3e:	89 e5                	mov    %esp,%ebp
+c0101c40:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101c43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0101c4a:	eb 08                	jmp    c0101c54 <serial_putc_sub+0x17>
+        delay();
+c0101c4c:	e8 3e fb ff ff       	call   c010178f <delay>
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101c51:	ff 45 fc             	incl   -0x4(%ebp)
+c0101c54:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101c5a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101c5e:	89 c2                	mov    %eax,%edx
+c0101c60:	ec                   	in     (%dx),%al
+c0101c61:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101c64:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0101c68:	0f b6 c0             	movzbl %al,%eax
+c0101c6b:	83 e0 20             	and    $0x20,%eax
+c0101c6e:	85 c0                	test   %eax,%eax
+c0101c70:	75 09                	jne    c0101c7b <serial_putc_sub+0x3e>
+c0101c72:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101c79:	7e d1                	jle    c0101c4c <serial_putc_sub+0xf>
+    }
+    outb(COM1 + COM_TX, c);
+c0101c7b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101c7e:	0f b6 c0             	movzbl %al,%eax
+c0101c81:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+c0101c87:	88 45 f5             	mov    %al,-0xb(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101c8a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c0101c8e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101c92:	ee                   	out    %al,(%dx)
+}
+c0101c93:	90                   	nop
+c0101c94:	c9                   	leave  
+c0101c95:	c3                   	ret    
+
+c0101c96 <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101c96:	55                   	push   %ebp
+c0101c97:	89 e5                	mov    %esp,%ebp
+c0101c99:	83 ec 04             	sub    $0x4,%esp
+    if (c != '\b') {
+c0101c9c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c0101ca0:	74 0d                	je     c0101caf <serial_putc+0x19>
+        serial_putc_sub(c);
+c0101ca2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101ca5:	89 04 24             	mov    %eax,(%esp)
+c0101ca8:	e8 90 ff ff ff       	call   c0101c3d <serial_putc_sub>
+    else {
+        serial_putc_sub('\b');
+        serial_putc_sub(' ');
+        serial_putc_sub('\b');
+    }
+}
+c0101cad:	eb 24                	jmp    c0101cd3 <serial_putc+0x3d>
+        serial_putc_sub('\b');
+c0101caf:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101cb6:	e8 82 ff ff ff       	call   c0101c3d <serial_putc_sub>
+        serial_putc_sub(' ');
+c0101cbb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0101cc2:	e8 76 ff ff ff       	call   c0101c3d <serial_putc_sub>
+        serial_putc_sub('\b');
+c0101cc7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+c0101cce:	e8 6a ff ff ff       	call   c0101c3d <serial_putc_sub>
+}
+c0101cd3:	90                   	nop
+c0101cd4:	c9                   	leave  
+c0101cd5:	c3                   	ret    
+
+c0101cd6 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101cd6:	55                   	push   %ebp
+c0101cd7:	89 e5                	mov    %esp,%ebp
+c0101cd9:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101cdc:	eb 33                	jmp    c0101d11 <cons_intr+0x3b>
+        if (c != 0) {
+c0101cde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101ce2:	74 2d                	je     c0101d11 <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101ce4:	a1 44 47 1b c0       	mov    0xc01b4744,%eax
+c0101ce9:	8d 50 01             	lea    0x1(%eax),%edx
+c0101cec:	89 15 44 47 1b c0    	mov    %edx,0xc01b4744
+c0101cf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101cf5:	88 90 40 45 1b c0    	mov    %dl,-0x3fe4bac0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101cfb:	a1 44 47 1b c0       	mov    0xc01b4744,%eax
+c0101d00:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101d05:	75 0a                	jne    c0101d11 <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101d07:	c7 05 44 47 1b c0 00 	movl   $0x0,0xc01b4744
+c0101d0e:	00 00 00 
+    while ((c = (*proc)()) != -1) {
+c0101d11:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101d14:	ff d0                	call   *%eax
+c0101d16:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101d19:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101d1d:	75 bf                	jne    c0101cde <cons_intr+0x8>
+            }
+        }
+    }
+}
+c0101d1f:	90                   	nop
+c0101d20:	c9                   	leave  
+c0101d21:	c3                   	ret    
+
+c0101d22 <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c0101d22:	55                   	push   %ebp
+c0101d23:	89 e5                	mov    %esp,%ebp
+c0101d25:	83 ec 10             	sub    $0x10,%esp
+c0101d28:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d2e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101d32:	89 c2                	mov    %eax,%edx
+c0101d34:	ec                   	in     (%dx),%al
+c0101d35:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0101d38:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c0101d3c:	0f b6 c0             	movzbl %al,%eax
+c0101d3f:	83 e0 01             	and    $0x1,%eax
+c0101d42:	85 c0                	test   %eax,%eax
+c0101d44:	75 07                	jne    c0101d4d <serial_proc_data+0x2b>
+        return -1;
+c0101d46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101d4b:	eb 2a                	jmp    c0101d77 <serial_proc_data+0x55>
+c0101d4d:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d53:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101d57:	89 c2                	mov    %eax,%edx
+c0101d59:	ec                   	in     (%dx),%al
+c0101d5a:	88 45 f5             	mov    %al,-0xb(%ebp)
+    return data;
+c0101d5d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c0101d61:	0f b6 c0             	movzbl %al,%eax
+c0101d64:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c0101d67:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c0101d6b:	75 07                	jne    c0101d74 <serial_proc_data+0x52>
+        c = '\b';
+c0101d6d:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c0101d74:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0101d77:	c9                   	leave  
+c0101d78:	c3                   	ret    
+
+c0101d79 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c0101d79:	55                   	push   %ebp
+c0101d7a:	89 e5                	mov    %esp,%ebp
+c0101d7c:	83 ec 18             	sub    $0x18,%esp
+    if (serial_exists) {
+c0101d7f:	a1 28 45 1b c0       	mov    0xc01b4528,%eax
+c0101d84:	85 c0                	test   %eax,%eax
+c0101d86:	74 0c                	je     c0101d94 <serial_intr+0x1b>
+        cons_intr(serial_proc_data);
+c0101d88:	c7 04 24 22 1d 10 c0 	movl   $0xc0101d22,(%esp)
+c0101d8f:	e8 42 ff ff ff       	call   c0101cd6 <cons_intr>
+    }
+}
+c0101d94:	90                   	nop
+c0101d95:	c9                   	leave  
+c0101d96:	c3                   	ret    
+
+c0101d97 <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101d97:	55                   	push   %ebp
+c0101d98:	89 e5                	mov    %esp,%ebp
+c0101d9a:	83 ec 38             	sub    $0x38,%esp
+c0101d9d:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0101da6:	89 c2                	mov    %eax,%edx
+c0101da8:	ec                   	in     (%dx),%al
+c0101da9:	88 45 ef             	mov    %al,-0x11(%ebp)
+    return data;
+c0101dac:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c0101db0:	0f b6 c0             	movzbl %al,%eax
+c0101db3:	83 e0 01             	and    $0x1,%eax
+c0101db6:	85 c0                	test   %eax,%eax
+c0101db8:	75 0a                	jne    c0101dc4 <kbd_proc_data+0x2d>
+        return -1;
+c0101dba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101dbf:	e9 55 01 00 00       	jmp    c0101f19 <kbd_proc_data+0x182>
+c0101dc4:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101dca:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101dcd:	89 c2                	mov    %eax,%edx
+c0101dcf:	ec                   	in     (%dx),%al
+c0101dd0:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101dd3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101dd7:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101dda:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c0101dde:	75 17                	jne    c0101df7 <kbd_proc_data+0x60>
+        // E0 escape character
+        shift |= E0ESC;
+c0101de0:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101de5:	83 c8 40             	or     $0x40,%eax
+c0101de8:	a3 48 47 1b c0       	mov    %eax,0xc01b4748
+        return 0;
+c0101ded:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101df2:	e9 22 01 00 00       	jmp    c0101f19 <kbd_proc_data+0x182>
+    } else if (data & 0x80) {
+c0101df7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101dfb:	84 c0                	test   %al,%al
+c0101dfd:	79 45                	jns    c0101e44 <kbd_proc_data+0xad>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c0101dff:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e04:	83 e0 40             	and    $0x40,%eax
+c0101e07:	85 c0                	test   %eax,%eax
+c0101e09:	75 08                	jne    c0101e13 <kbd_proc_data+0x7c>
+c0101e0b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e0f:	24 7f                	and    $0x7f,%al
+c0101e11:	eb 04                	jmp    c0101e17 <kbd_proc_data+0x80>
+c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e17:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101e1a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e1e:	0f b6 80 40 e0 12 c0 	movzbl -0x3fed1fc0(%eax),%eax
+c0101e25:	0c 40                	or     $0x40,%al
+c0101e27:	0f b6 c0             	movzbl %al,%eax
+c0101e2a:	f7 d0                	not    %eax
+c0101e2c:	89 c2                	mov    %eax,%edx
+c0101e2e:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e33:	21 d0                	and    %edx,%eax
+c0101e35:	a3 48 47 1b c0       	mov    %eax,0xc01b4748
+        return 0;
+c0101e3a:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101e3f:	e9 d5 00 00 00       	jmp    c0101f19 <kbd_proc_data+0x182>
+    } else if (shift & E0ESC) {
+c0101e44:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e49:	83 e0 40             	and    $0x40,%eax
+c0101e4c:	85 c0                	test   %eax,%eax
+c0101e4e:	74 11                	je     c0101e61 <kbd_proc_data+0xca>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c0101e50:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c0101e54:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e59:	83 e0 bf             	and    $0xffffffbf,%eax
+c0101e5c:	a3 48 47 1b c0       	mov    %eax,0xc01b4748
+    }
+
+    shift |= shiftcode[data];
+c0101e61:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e65:	0f b6 80 40 e0 12 c0 	movzbl -0x3fed1fc0(%eax),%eax
+c0101e6c:	0f b6 d0             	movzbl %al,%edx
+c0101e6f:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e74:	09 d0                	or     %edx,%eax
+c0101e76:	a3 48 47 1b c0       	mov    %eax,0xc01b4748
+    shift ^= togglecode[data];
+c0101e7b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e7f:	0f b6 80 40 e1 12 c0 	movzbl -0x3fed1ec0(%eax),%eax
+c0101e86:	0f b6 d0             	movzbl %al,%edx
+c0101e89:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e8e:	31 d0                	xor    %edx,%eax
+c0101e90:	a3 48 47 1b c0       	mov    %eax,0xc01b4748
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101e95:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101e9a:	83 e0 03             	and    $0x3,%eax
+c0101e9d:	8b 14 85 40 e5 12 c0 	mov    -0x3fed1ac0(,%eax,4),%edx
+c0101ea4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101ea8:	01 d0                	add    %edx,%eax
+c0101eaa:	0f b6 00             	movzbl (%eax),%eax
+c0101ead:	0f b6 c0             	movzbl %al,%eax
+c0101eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101eb3:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101eb8:	83 e0 08             	and    $0x8,%eax
+c0101ebb:	85 c0                	test   %eax,%eax
+c0101ebd:	74 22                	je     c0101ee1 <kbd_proc_data+0x14a>
+        if ('a' <= c && c <= 'z')
+c0101ebf:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101ec3:	7e 0c                	jle    c0101ed1 <kbd_proc_data+0x13a>
+c0101ec5:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101ec9:	7f 06                	jg     c0101ed1 <kbd_proc_data+0x13a>
+            c += 'A' - 'a';
+c0101ecb:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c0101ecf:	eb 10                	jmp    c0101ee1 <kbd_proc_data+0x14a>
+        else if ('A' <= c && c <= 'Z')
+c0101ed1:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101ed5:	7e 0a                	jle    c0101ee1 <kbd_proc_data+0x14a>
+c0101ed7:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101edb:	7f 04                	jg     c0101ee1 <kbd_proc_data+0x14a>
+            c += 'a' - 'A';
+c0101edd:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c0101ee1:	a1 48 47 1b c0       	mov    0xc01b4748,%eax
+c0101ee6:	f7 d0                	not    %eax
+c0101ee8:	83 e0 06             	and    $0x6,%eax
+c0101eeb:	85 c0                	test   %eax,%eax
+c0101eed:	75 27                	jne    c0101f16 <kbd_proc_data+0x17f>
+c0101eef:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101ef6:	75 1e                	jne    c0101f16 <kbd_proc_data+0x17f>
+        cprintf("Rebooting!\n");
+c0101ef8:	c7 04 24 79 cb 10 c0 	movl   $0xc010cb79,(%esp)
+c0101eff:	e8 aa e3 ff ff       	call   c01002ae <cprintf>
+c0101f04:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
+c0101f0a:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101f0e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+c0101f12:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0101f15:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101f16:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101f19:	c9                   	leave  
+c0101f1a:	c3                   	ret    
+
+c0101f1b <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c0101f1b:	55                   	push   %ebp
+c0101f1c:	89 e5                	mov    %esp,%ebp
+c0101f1e:	83 ec 18             	sub    $0x18,%esp
+    cons_intr(kbd_proc_data);
+c0101f21:	c7 04 24 97 1d 10 c0 	movl   $0xc0101d97,(%esp)
+c0101f28:	e8 a9 fd ff ff       	call   c0101cd6 <cons_intr>
+}
+c0101f2d:	90                   	nop
+c0101f2e:	c9                   	leave  
+c0101f2f:	c3                   	ret    
+
+c0101f30 <kbd_init>:
+
+static void
+kbd_init(void) {
+c0101f30:	55                   	push   %ebp
+c0101f31:	89 e5                	mov    %esp,%ebp
+c0101f33:	83 ec 18             	sub    $0x18,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c0101f36:	e8 e0 ff ff ff       	call   c0101f1b <kbd_intr>
+    pic_enable(IRQ_KBD);
+c0101f3b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0101f42:	e8 35 01 00 00       	call   c010207c <pic_enable>
+}
+c0101f47:	90                   	nop
+c0101f48:	c9                   	leave  
+c0101f49:	c3                   	ret    
+
+c0101f4a <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c0101f4a:	55                   	push   %ebp
+c0101f4b:	89 e5                	mov    %esp,%ebp
+c0101f4d:	83 ec 18             	sub    $0x18,%esp
+    cga_init();
+c0101f50:	e8 83 f8 ff ff       	call   c01017d8 <cga_init>
+    serial_init();
+c0101f55:	e8 62 f9 ff ff       	call   c01018bc <serial_init>
+    kbd_init();
+c0101f5a:	e8 d1 ff ff ff       	call   c0101f30 <kbd_init>
+    if (!serial_exists) {
+c0101f5f:	a1 28 45 1b c0       	mov    0xc01b4528,%eax
+c0101f64:	85 c0                	test   %eax,%eax
+c0101f66:	75 0c                	jne    c0101f74 <cons_init+0x2a>
+        cprintf("serial port does not exist!!\n");
+c0101f68:	c7 04 24 85 cb 10 c0 	movl   $0xc010cb85,(%esp)
+c0101f6f:	e8 3a e3 ff ff       	call   c01002ae <cprintf>
+    }
+}
+c0101f74:	90                   	nop
+c0101f75:	c9                   	leave  
+c0101f76:	c3                   	ret    
+
+c0101f77 <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c0101f77:	55                   	push   %ebp
+c0101f78:	89 e5                	mov    %esp,%ebp
+c0101f7a:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101f7d:	e8 cf f7 ff ff       	call   c0101751 <__intr_save>
+c0101f82:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101f85:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101f88:	89 04 24             	mov    %eax,(%esp)
+c0101f8b:	e8 89 fa ff ff       	call   c0101a19 <lpt_putc>
+        cga_putc(c);
+c0101f90:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101f93:	89 04 24             	mov    %eax,(%esp)
+c0101f96:	e8 be fa ff ff       	call   c0101a59 <cga_putc>
+        serial_putc(c);
+c0101f9b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101f9e:	89 04 24             	mov    %eax,(%esp)
+c0101fa1:	e8 f0 fc ff ff       	call   c0101c96 <serial_putc>
+    }
+    local_intr_restore(intr_flag);
+c0101fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101fa9:	89 04 24             	mov    %eax,(%esp)
+c0101fac:	e8 ca f7 ff ff       	call   c010177b <__intr_restore>
+}
+c0101fb1:	90                   	nop
+c0101fb2:	c9                   	leave  
+c0101fb3:	c3                   	ret    
+
+c0101fb4 <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c0101fb4:	55                   	push   %ebp
+c0101fb5:	89 e5                	mov    %esp,%ebp
+c0101fb7:	83 ec 28             	sub    $0x28,%esp
+    int c = 0;
+c0101fba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101fc1:	e8 8b f7 ff ff       	call   c0101751 <__intr_save>
+c0101fc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101fc9:	e8 ab fd ff ff       	call   c0101d79 <serial_intr>
+        kbd_intr();
+c0101fce:	e8 48 ff ff ff       	call   c0101f1b <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c0101fd3:	8b 15 40 47 1b c0    	mov    0xc01b4740,%edx
+c0101fd9:	a1 44 47 1b c0       	mov    0xc01b4744,%eax
+c0101fde:	39 c2                	cmp    %eax,%edx
+c0101fe0:	74 31                	je     c0102013 <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c0101fe2:	a1 40 47 1b c0       	mov    0xc01b4740,%eax
+c0101fe7:	8d 50 01             	lea    0x1(%eax),%edx
+c0101fea:	89 15 40 47 1b c0    	mov    %edx,0xc01b4740
+c0101ff0:	0f b6 80 40 45 1b c0 	movzbl -0x3fe4bac0(%eax),%eax
+c0101ff7:	0f b6 c0             	movzbl %al,%eax
+c0101ffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101ffd:	a1 40 47 1b c0       	mov    0xc01b4740,%eax
+c0102002:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0102007:	75 0a                	jne    c0102013 <cons_getc+0x5f>
+                cons.rpos = 0;
+c0102009:	c7 05 40 47 1b c0 00 	movl   $0x0,0xc01b4740
+c0102010:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c0102013:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0102016:	89 04 24             	mov    %eax,(%esp)
+c0102019:	e8 5d f7 ff ff       	call   c010177b <__intr_restore>
+    return c;
+c010201e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0102021:	c9                   	leave  
+c0102022:	c3                   	ret    
+
+c0102023 <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c0102023:	55                   	push   %ebp
+c0102024:	89 e5                	mov    %esp,%ebp
+c0102026:	83 ec 14             	sub    $0x14,%esp
+c0102029:	8b 45 08             	mov    0x8(%ebp),%eax
+c010202c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c0102030:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0102033:	66 a3 50 e5 12 c0    	mov    %ax,0xc012e550
+    if (did_init) {
+c0102039:	a1 4c 47 1b c0       	mov    0xc01b474c,%eax
+c010203e:	85 c0                	test   %eax,%eax
+c0102040:	74 37                	je     c0102079 <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c0102042:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0102045:	0f b6 c0             	movzbl %al,%eax
+c0102048:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
+c010204e:	88 45 f9             	mov    %al,-0x7(%ebp)
+c0102051:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0102055:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0102059:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c010205a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c010205e:	c1 e8 08             	shr    $0x8,%eax
+c0102061:	0f b7 c0             	movzwl %ax,%eax
+c0102064:	0f b6 c0             	movzbl %al,%eax
+c0102067:	66 c7 45 fe a1 00    	movw   $0xa1,-0x2(%ebp)
+c010206d:	88 45 fd             	mov    %al,-0x3(%ebp)
+c0102070:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c0102074:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0102078:	ee                   	out    %al,(%dx)
+    }
+}
+c0102079:	90                   	nop
+c010207a:	c9                   	leave  
+c010207b:	c3                   	ret    
+
+c010207c <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c010207c:	55                   	push   %ebp
+c010207d:	89 e5                	mov    %esp,%ebp
+c010207f:	83 ec 04             	sub    $0x4,%esp
+    pic_setmask(irq_mask & ~(1 << irq));
+c0102082:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102085:	ba 01 00 00 00       	mov    $0x1,%edx
+c010208a:	88 c1                	mov    %al,%cl
+c010208c:	d3 e2                	shl    %cl,%edx
+c010208e:	89 d0                	mov    %edx,%eax
+c0102090:	98                   	cwtl   
+c0102091:	f7 d0                	not    %eax
+c0102093:	0f bf d0             	movswl %ax,%edx
+c0102096:	0f b7 05 50 e5 12 c0 	movzwl 0xc012e550,%eax
+c010209d:	98                   	cwtl   
+c010209e:	21 d0                	and    %edx,%eax
+c01020a0:	98                   	cwtl   
+c01020a1:	0f b7 c0             	movzwl %ax,%eax
+c01020a4:	89 04 24             	mov    %eax,(%esp)
+c01020a7:	e8 77 ff ff ff       	call   c0102023 <pic_setmask>
+}
+c01020ac:	90                   	nop
+c01020ad:	c9                   	leave  
+c01020ae:	c3                   	ret    
+
+c01020af <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c01020af:	55                   	push   %ebp
+c01020b0:	89 e5                	mov    %esp,%ebp
+c01020b2:	83 ec 44             	sub    $0x44,%esp
+    did_init = 1;
+c01020b5:	c7 05 4c 47 1b c0 01 	movl   $0x1,0xc01b474c
+c01020bc:	00 00 00 
+c01020bf:	66 c7 45 ca 21 00    	movw   $0x21,-0x36(%ebp)
+c01020c5:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
+c01020c9:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c01020cd:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
+c01020d1:	ee                   	out    %al,(%dx)
+c01020d2:	66 c7 45 ce a1 00    	movw   $0xa1,-0x32(%ebp)
+c01020d8:	c6 45 cd ff          	movb   $0xff,-0x33(%ebp)
+c01020dc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
+c01020e0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
+c01020e4:	ee                   	out    %al,(%dx)
+c01020e5:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
+c01020eb:	c6 45 d1 11          	movb   $0x11,-0x2f(%ebp)
+c01020ef:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
+c01020f3:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
+c01020f7:	ee                   	out    %al,(%dx)
+c01020f8:	66 c7 45 d6 21 00    	movw   $0x21,-0x2a(%ebp)
+c01020fe:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
+c0102102:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
+c0102106:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
+c010210a:	ee                   	out    %al,(%dx)
+c010210b:	66 c7 45 da 21 00    	movw   $0x21,-0x26(%ebp)
+c0102111:	c6 45 d9 04          	movb   $0x4,-0x27(%ebp)
+c0102115:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0102119:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
+c010211d:	ee                   	out    %al,(%dx)
+c010211e:	66 c7 45 de 21 00    	movw   $0x21,-0x22(%ebp)
+c0102124:	c6 45 dd 03          	movb   $0x3,-0x23(%ebp)
+c0102128:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010212c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c0102130:	ee                   	out    %al,(%dx)
+c0102131:	66 c7 45 e2 a0 00    	movw   $0xa0,-0x1e(%ebp)
+c0102137:	c6 45 e1 11          	movb   $0x11,-0x1f(%ebp)
+c010213b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c010213f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0102143:	ee                   	out    %al,(%dx)
+c0102144:	66 c7 45 e6 a1 00    	movw   $0xa1,-0x1a(%ebp)
+c010214a:	c6 45 e5 28          	movb   $0x28,-0x1b(%ebp)
+c010214e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
+c0102152:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102156:	ee                   	out    %al,(%dx)
+c0102157:	66 c7 45 ea a1 00    	movw   $0xa1,-0x16(%ebp)
+c010215d:	c6 45 e9 02          	movb   $0x2,-0x17(%ebp)
+c0102161:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0102165:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0102169:	ee                   	out    %al,(%dx)
+c010216a:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
+c0102170:	c6 45 ed 03          	movb   $0x3,-0x13(%ebp)
+c0102174:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c0102178:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c010217c:	ee                   	out    %al,(%dx)
+c010217d:	66 c7 45 f2 20 00    	movw   $0x20,-0xe(%ebp)
+c0102183:	c6 45 f1 68          	movb   $0x68,-0xf(%ebp)
+c0102187:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010218b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010218f:	ee                   	out    %al,(%dx)
+c0102190:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
+c0102196:	c6 45 f5 0a          	movb   $0xa,-0xb(%ebp)
+c010219a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
+c010219e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01021a2:	ee                   	out    %al,(%dx)
+c01021a3:	66 c7 45 fa a0 00    	movw   $0xa0,-0x6(%ebp)
+c01021a9:	c6 45 f9 68          	movb   $0x68,-0x7(%ebp)
+c01021ad:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c01021b1:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01021b5:	ee                   	out    %al,(%dx)
+c01021b6:	66 c7 45 fe a0 00    	movw   $0xa0,-0x2(%ebp)
+c01021bc:	c6 45 fd 0a          	movb   $0xa,-0x3(%ebp)
+c01021c0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
+c01021c4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c01021c8:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c01021c9:	0f b7 05 50 e5 12 c0 	movzwl 0xc012e550,%eax
+c01021d0:	3d ff ff 00 00       	cmp    $0xffff,%eax
+c01021d5:	74 0f                	je     c01021e6 <pic_init+0x137>
+        pic_setmask(irq_mask);
+c01021d7:	0f b7 05 50 e5 12 c0 	movzwl 0xc012e550,%eax
+c01021de:	89 04 24             	mov    %eax,(%esp)
+c01021e1:	e8 3d fe ff ff       	call   c0102023 <pic_setmask>
+    }
+}
+c01021e6:	90                   	nop
+c01021e7:	c9                   	leave  
+c01021e8:	c3                   	ret    
+
+c01021e9 <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c01021e9:	55                   	push   %ebp
+c01021ea:	89 e5                	mov    %esp,%ebp
+    asm volatile ("sti");
+c01021ec:	fb                   	sti    
+    sti();
+}
+c01021ed:	90                   	nop
+c01021ee:	5d                   	pop    %ebp
+c01021ef:	c3                   	ret    
+
+c01021f0 <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c01021f0:	55                   	push   %ebp
+c01021f1:	89 e5                	mov    %esp,%ebp
+    asm volatile ("cli" ::: "memory");
+c01021f3:	fa                   	cli    
+    cli();
+}
+c01021f4:	90                   	nop
+c01021f5:	5d                   	pop    %ebp
+c01021f6:	c3                   	ret    
+
+c01021f7 <print_ticks>:
+#include <sched.h>
+
+#define TICK_NUM 100
+
+static void print_ticks()
+{
+c01021f7:	55                   	push   %ebp
+c01021f8:	89 e5                	mov    %esp,%ebp
+c01021fa:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%d ticks\n", TICK_NUM);
+c01021fd:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c0102204:	00 
+c0102205:	c7 04 24 c0 cb 10 c0 	movl   $0xc010cbc0,(%esp)
+c010220c:	e8 9d e0 ff ff       	call   c01002ae <cprintf>
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c0102211:	c7 04 24 ca cb 10 c0 	movl   $0xc010cbca,(%esp)
+c0102218:	e8 91 e0 ff ff       	call   c01002ae <cprintf>
+    panic("EOT: kernel seems ok.");
+c010221d:	c7 44 24 08 d8 cb 10 	movl   $0xc010cbd8,0x8(%esp)
+c0102224:	c0 
+c0102225:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+c010222c:	00 
+c010222d:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c0102234:	e8 cc e1 ff ff       	call   c0100405 <__panic>
+
+c0102239 <idt_init>:
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void idt_init(void)
+{
+c0102239:	55                   	push   %ebp
+c010223a:	89 e5                	mov    %esp,%ebp
+c010223c:	83 ec 10             	sub    $0x10,%esp
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+    extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < 256; i++)
+c010223f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0102246:	e9 c4 00 00 00       	jmp    c010230f <idt_init+0xd6>
+    {
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+c010224b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224e:	8b 04 85 e0 e5 12 c0 	mov    -0x3fed1a20(,%eax,4),%eax
+c0102255:	0f b7 d0             	movzwl %ax,%edx
+c0102258:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010225b:	66 89 14 c5 60 47 1b 	mov    %dx,-0x3fe4b8a0(,%eax,8)
+c0102262:	c0 
+c0102263:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102266:	66 c7 04 c5 62 47 1b 	movw   $0x8,-0x3fe4b89e(,%eax,8)
+c010226d:	c0 08 00 
+c0102270:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102273:	0f b6 14 c5 64 47 1b 	movzbl -0x3fe4b89c(,%eax,8),%edx
+c010227a:	c0 
+c010227b:	80 e2 e0             	and    $0xe0,%dl
+c010227e:	88 14 c5 64 47 1b c0 	mov    %dl,-0x3fe4b89c(,%eax,8)
+c0102285:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102288:	0f b6 14 c5 64 47 1b 	movzbl -0x3fe4b89c(,%eax,8),%edx
+c010228f:	c0 
+c0102290:	80 e2 1f             	and    $0x1f,%dl
+c0102293:	88 14 c5 64 47 1b c0 	mov    %dl,-0x3fe4b89c(,%eax,8)
+c010229a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229d:	0f b6 14 c5 65 47 1b 	movzbl -0x3fe4b89b(,%eax,8),%edx
+c01022a4:	c0 
+c01022a5:	80 e2 f0             	and    $0xf0,%dl
+c01022a8:	80 ca 0e             	or     $0xe,%dl
+c01022ab:	88 14 c5 65 47 1b c0 	mov    %dl,-0x3fe4b89b(,%eax,8)
+c01022b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022b5:	0f b6 14 c5 65 47 1b 	movzbl -0x3fe4b89b(,%eax,8),%edx
+c01022bc:	c0 
+c01022bd:	80 e2 ef             	and    $0xef,%dl
+c01022c0:	88 14 c5 65 47 1b c0 	mov    %dl,-0x3fe4b89b(,%eax,8)
+c01022c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ca:	0f b6 14 c5 65 47 1b 	movzbl -0x3fe4b89b(,%eax,8),%edx
+c01022d1:	c0 
+c01022d2:	80 e2 9f             	and    $0x9f,%dl
+c01022d5:	88 14 c5 65 47 1b c0 	mov    %dl,-0x3fe4b89b(,%eax,8)
+c01022dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022df:	0f b6 14 c5 65 47 1b 	movzbl -0x3fe4b89b(,%eax,8),%edx
+c01022e6:	c0 
+c01022e7:	80 ca 80             	or     $0x80,%dl
+c01022ea:	88 14 c5 65 47 1b c0 	mov    %dl,-0x3fe4b89b(,%eax,8)
+c01022f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022f4:	8b 04 85 e0 e5 12 c0 	mov    -0x3fed1a20(,%eax,4),%eax
+c01022fb:	c1 e8 10             	shr    $0x10,%eax
+c01022fe:	0f b7 d0             	movzwl %ax,%edx
+c0102301:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102304:	66 89 14 c5 66 47 1b 	mov    %dx,-0x3fe4b89a(,%eax,8)
+c010230b:	c0 
+    for (i = 0; i < 256; i++)
+c010230c:	ff 45 fc             	incl   -0x4(%ebp)
+c010230f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
+c0102316:	0f 8e 2f ff ff ff    	jle    c010224b <idt_init+0x12>
+    }
+    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+c010231c:	a1 c4 e7 12 c0       	mov    0xc012e7c4,%eax
+c0102321:	0f b7 c0             	movzwl %ax,%eax
+c0102324:	66 a3 28 4b 1b c0    	mov    %ax,0xc01b4b28
+c010232a:	66 c7 05 2a 4b 1b c0 	movw   $0x8,0xc01b4b2a
+c0102331:	08 00 
+c0102333:	0f b6 05 2c 4b 1b c0 	movzbl 0xc01b4b2c,%eax
+c010233a:	24 e0                	and    $0xe0,%al
+c010233c:	a2 2c 4b 1b c0       	mov    %al,0xc01b4b2c
+c0102341:	0f b6 05 2c 4b 1b c0 	movzbl 0xc01b4b2c,%eax
+c0102348:	24 1f                	and    $0x1f,%al
+c010234a:	a2 2c 4b 1b c0       	mov    %al,0xc01b4b2c
+c010234f:	0f b6 05 2d 4b 1b c0 	movzbl 0xc01b4b2d,%eax
+c0102356:	24 f0                	and    $0xf0,%al
+c0102358:	0c 0e                	or     $0xe,%al
+c010235a:	a2 2d 4b 1b c0       	mov    %al,0xc01b4b2d
+c010235f:	0f b6 05 2d 4b 1b c0 	movzbl 0xc01b4b2d,%eax
+c0102366:	24 ef                	and    $0xef,%al
+c0102368:	a2 2d 4b 1b c0       	mov    %al,0xc01b4b2d
+c010236d:	0f b6 05 2d 4b 1b c0 	movzbl 0xc01b4b2d,%eax
+c0102374:	0c 60                	or     $0x60,%al
+c0102376:	a2 2d 4b 1b c0       	mov    %al,0xc01b4b2d
+c010237b:	0f b6 05 2d 4b 1b c0 	movzbl 0xc01b4b2d,%eax
+c0102382:	0c 80                	or     $0x80,%al
+c0102384:	a2 2d 4b 1b c0       	mov    %al,0xc01b4b2d
+c0102389:	a1 c4 e7 12 c0       	mov    0xc012e7c4,%eax
+c010238e:	c1 e8 10             	shr    $0x10,%eax
+c0102391:	0f b7 c0             	movzwl %ax,%eax
+c0102394:	66 a3 2e 4b 1b c0    	mov    %ax,0xc01b4b2e
+    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+c010239a:	a1 e0 e7 12 c0       	mov    0xc012e7e0,%eax
+c010239f:	0f b7 c0             	movzwl %ax,%eax
+c01023a2:	66 a3 60 4b 1b c0    	mov    %ax,0xc01b4b60
+c01023a8:	66 c7 05 62 4b 1b c0 	movw   $0x8,0xc01b4b62
+c01023af:	08 00 
+c01023b1:	0f b6 05 64 4b 1b c0 	movzbl 0xc01b4b64,%eax
+c01023b8:	24 e0                	and    $0xe0,%al
+c01023ba:	a2 64 4b 1b c0       	mov    %al,0xc01b4b64
+c01023bf:	0f b6 05 64 4b 1b c0 	movzbl 0xc01b4b64,%eax
+c01023c6:	24 1f                	and    $0x1f,%al
+c01023c8:	a2 64 4b 1b c0       	mov    %al,0xc01b4b64
+c01023cd:	0f b6 05 65 4b 1b c0 	movzbl 0xc01b4b65,%eax
+c01023d4:	0c 0f                	or     $0xf,%al
+c01023d6:	a2 65 4b 1b c0       	mov    %al,0xc01b4b65
+c01023db:	0f b6 05 65 4b 1b c0 	movzbl 0xc01b4b65,%eax
+c01023e2:	24 ef                	and    $0xef,%al
+c01023e4:	a2 65 4b 1b c0       	mov    %al,0xc01b4b65
+c01023e9:	0f b6 05 65 4b 1b c0 	movzbl 0xc01b4b65,%eax
+c01023f0:	0c 60                	or     $0x60,%al
+c01023f2:	a2 65 4b 1b c0       	mov    %al,0xc01b4b65
+c01023f7:	0f b6 05 65 4b 1b c0 	movzbl 0xc01b4b65,%eax
+c01023fe:	0c 80                	or     $0x80,%al
+c0102400:	a2 65 4b 1b c0       	mov    %al,0xc01b4b65
+c0102405:	a1 e0 e7 12 c0       	mov    0xc012e7e0,%eax
+c010240a:	c1 e8 10             	shr    $0x10,%eax
+c010240d:	0f b7 c0             	movzwl %ax,%eax
+c0102410:	66 a3 66 4b 1b c0    	mov    %ax,0xc01b4b66
+c0102416:	c7 45 f8 60 e5 12 c0 	movl   $0xc012e560,-0x8(%ebp)
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c010241d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102420:	0f 01 18             	lidtl  (%eax)
+    lidt(&idt_pd);
+    /* LAB5 YOUR CODE */
+    //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+    //so you should setup the syscall interrupt gate in here
+}
+c0102423:	90                   	nop
+c0102424:	c9                   	leave  
+c0102425:	c3                   	ret    
+
+c0102426 <trapname>:
+
+static const char *
+trapname(int trapno)
+{
+c0102426:	55                   	push   %ebp
+c0102427:	89 e5                	mov    %esp,%ebp
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"};
+
+    if (trapno < sizeof(excnames) / sizeof(const char *const))
+c0102429:	8b 45 08             	mov    0x8(%ebp),%eax
+c010242c:	83 f8 13             	cmp    $0x13,%eax
+c010242f:	77 0c                	ja     c010243d <trapname+0x17>
+    {
+        return excnames[trapno];
+c0102431:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102434:	8b 04 85 60 d0 10 c0 	mov    -0x3fef2fa0(,%eax,4),%eax
+c010243b:	eb 18                	jmp    c0102455 <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16)
+c010243d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c0102441:	7e 0d                	jle    c0102450 <trapname+0x2a>
+c0102443:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c0102447:	7f 07                	jg     c0102450 <trapname+0x2a>
+    {
+        return "Hardware Interrupt";
+c0102449:	b8 ff cb 10 c0       	mov    $0xc010cbff,%eax
+c010244e:	eb 05                	jmp    c0102455 <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c0102450:	b8 12 cc 10 c0       	mov    $0xc010cc12,%eax
+}
+c0102455:	5d                   	pop    %ebp
+c0102456:	c3                   	ret    
+
+c0102457 <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool trap_in_kernel(struct trapframe *tf)
+{
+c0102457:	55                   	push   %ebp
+c0102458:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c010245a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010245d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c0102461:	83 f8 08             	cmp    $0x8,%eax
+c0102464:	0f 94 c0             	sete   %al
+c0102467:	0f b6 c0             	movzbl %al,%eax
+}
+c010246a:	5d                   	pop    %ebp
+c010246b:	c3                   	ret    
+
+c010246c <print_trapframe>:
+    NULL,
+    NULL,
+};
+
+void print_trapframe(struct trapframe *tf)
+{
+c010246c:	55                   	push   %ebp
+c010246d:	89 e5                	mov    %esp,%ebp
+c010246f:	83 ec 28             	sub    $0x28,%esp
+    cprintf("trapframe at %p\n", tf);
+c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102475:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102479:	c7 04 24 53 cc 10 c0 	movl   $0xc010cc53,(%esp)
+c0102480:	e8 29 de ff ff       	call   c01002ae <cprintf>
+    print_regs(&tf->tf_regs);
+c0102485:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102488:	89 04 24             	mov    %eax,(%esp)
+c010248b:	e8 8f 01 00 00       	call   c010261f <print_regs>
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c0102490:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102493:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c0102497:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010249b:	c7 04 24 64 cc 10 c0 	movl   $0xc010cc64,(%esp)
+c01024a2:	e8 07 de ff ff       	call   c01002ae <cprintf>
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c01024a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024aa:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c01024ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024b2:	c7 04 24 77 cc 10 c0 	movl   $0xc010cc77,(%esp)
+c01024b9:	e8 f0 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c01024be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024c1:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c01024c5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024c9:	c7 04 24 8a cc 10 c0 	movl   $0xc010cc8a,(%esp)
+c01024d0:	e8 d9 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c01024d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024d8:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c01024dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01024e0:	c7 04 24 9d cc 10 c0 	movl   $0xc010cc9d,(%esp)
+c01024e7:	e8 c2 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c01024ec:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024ef:	8b 40 30             	mov    0x30(%eax),%eax
+c01024f2:	89 04 24             	mov    %eax,(%esp)
+c01024f5:	e8 2c ff ff ff       	call   c0102426 <trapname>
+c01024fa:	89 c2                	mov    %eax,%edx
+c01024fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024ff:	8b 40 30             	mov    0x30(%eax),%eax
+c0102502:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0102506:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010250a:	c7 04 24 b0 cc 10 c0 	movl   $0xc010ccb0,(%esp)
+c0102511:	e8 98 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c0102516:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102519:	8b 40 34             	mov    0x34(%eax),%eax
+c010251c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102520:	c7 04 24 c2 cc 10 c0 	movl   $0xc010ccc2,(%esp)
+c0102527:	e8 82 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c010252c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010252f:	8b 40 38             	mov    0x38(%eax),%eax
+c0102532:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102536:	c7 04 24 d1 cc 10 c0 	movl   $0xc010ccd1,(%esp)
+c010253d:	e8 6c dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c0102542:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102545:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c0102549:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010254d:	c7 04 24 e0 cc 10 c0 	movl   $0xc010cce0,(%esp)
+c0102554:	e8 55 dd ff ff       	call   c01002ae <cprintf>
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c0102559:	8b 45 08             	mov    0x8(%ebp),%eax
+c010255c:	8b 40 40             	mov    0x40(%eax),%eax
+c010255f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102563:	c7 04 24 f3 cc 10 c0 	movl   $0xc010ccf3,(%esp)
+c010256a:	e8 3f dd ff ff       	call   c01002ae <cprintf>
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i++, j <<= 1)
+c010256f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0102576:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c010257d:	eb 3d                	jmp    c01025bc <print_trapframe+0x150>
+    {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL)
+c010257f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102582:	8b 50 40             	mov    0x40(%eax),%edx
+c0102585:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0102588:	21 d0                	and    %edx,%eax
+c010258a:	85 c0                	test   %eax,%eax
+c010258c:	74 28                	je     c01025b6 <print_trapframe+0x14a>
+c010258e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102591:	8b 04 85 80 e5 12 c0 	mov    -0x3fed1a80(,%eax,4),%eax
+c0102598:	85 c0                	test   %eax,%eax
+c010259a:	74 1a                	je     c01025b6 <print_trapframe+0x14a>
+        {
+            cprintf("%s,", IA32flags[i]);
+c010259c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010259f:	8b 04 85 80 e5 12 c0 	mov    -0x3fed1a80(,%eax,4),%eax
+c01025a6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025aa:	c7 04 24 02 cd 10 c0 	movl   $0xc010cd02,(%esp)
+c01025b1:	e8 f8 dc ff ff       	call   c01002ae <cprintf>
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i++, j <<= 1)
+c01025b6:	ff 45 f4             	incl   -0xc(%ebp)
+c01025b9:	d1 65 f0             	shll   -0x10(%ebp)
+c01025bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01025bf:	83 f8 17             	cmp    $0x17,%eax
+c01025c2:	76 bb                	jbe    c010257f <print_trapframe+0x113>
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c01025c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025c7:	8b 40 40             	mov    0x40(%eax),%eax
+c01025ca:	c1 e8 0c             	shr    $0xc,%eax
+c01025cd:	83 e0 03             	and    $0x3,%eax
+c01025d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025d4:	c7 04 24 06 cd 10 c0 	movl   $0xc010cd06,(%esp)
+c01025db:	e8 ce dc ff ff       	call   c01002ae <cprintf>
+
+    if (!trap_in_kernel(tf))
+c01025e0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025e3:	89 04 24             	mov    %eax,(%esp)
+c01025e6:	e8 6c fe ff ff       	call   c0102457 <trap_in_kernel>
+c01025eb:	85 c0                	test   %eax,%eax
+c01025ed:	75 2d                	jne    c010261c <print_trapframe+0x1b0>
+    {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c01025ef:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025f2:	8b 40 44             	mov    0x44(%eax),%eax
+c01025f5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01025f9:	c7 04 24 0f cd 10 c0 	movl   $0xc010cd0f,(%esp)
+c0102600:	e8 a9 dc ff ff       	call   c01002ae <cprintf>
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c0102605:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102608:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c010260c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102610:	c7 04 24 1e cd 10 c0 	movl   $0xc010cd1e,(%esp)
+c0102617:	e8 92 dc ff ff       	call   c01002ae <cprintf>
+    }
+}
+c010261c:	90                   	nop
+c010261d:	c9                   	leave  
+c010261e:	c3                   	ret    
+
+c010261f <print_regs>:
+
+void print_regs(struct pushregs *regs)
+{
+c010261f:	55                   	push   %ebp
+c0102620:	89 e5                	mov    %esp,%ebp
+c0102622:	83 ec 18             	sub    $0x18,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c0102625:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102628:	8b 00                	mov    (%eax),%eax
+c010262a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010262e:	c7 04 24 31 cd 10 c0 	movl   $0xc010cd31,(%esp)
+c0102635:	e8 74 dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c010263a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010263d:	8b 40 04             	mov    0x4(%eax),%eax
+c0102640:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102644:	c7 04 24 40 cd 10 c0 	movl   $0xc010cd40,(%esp)
+c010264b:	e8 5e dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c0102650:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102653:	8b 40 08             	mov    0x8(%eax),%eax
+c0102656:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010265a:	c7 04 24 4f cd 10 c0 	movl   $0xc010cd4f,(%esp)
+c0102661:	e8 48 dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c0102666:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102669:	8b 40 0c             	mov    0xc(%eax),%eax
+c010266c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102670:	c7 04 24 5e cd 10 c0 	movl   $0xc010cd5e,(%esp)
+c0102677:	e8 32 dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c010267c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010267f:	8b 40 10             	mov    0x10(%eax),%eax
+c0102682:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102686:	c7 04 24 6d cd 10 c0 	movl   $0xc010cd6d,(%esp)
+c010268d:	e8 1c dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c0102692:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102695:	8b 40 14             	mov    0x14(%eax),%eax
+c0102698:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010269c:	c7 04 24 7c cd 10 c0 	movl   $0xc010cd7c,(%esp)
+c01026a3:	e8 06 dc ff ff       	call   c01002ae <cprintf>
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c01026a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026ab:	8b 40 18             	mov    0x18(%eax),%eax
+c01026ae:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026b2:	c7 04 24 8b cd 10 c0 	movl   $0xc010cd8b,(%esp)
+c01026b9:	e8 f0 db ff ff       	call   c01002ae <cprintf>
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c01026be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c1:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01026c4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01026c8:	c7 04 24 9a cd 10 c0 	movl   $0xc010cd9a,(%esp)
+c01026cf:	e8 da db ff ff       	call   c01002ae <cprintf>
+}
+c01026d4:	90                   	nop
+c01026d5:	c9                   	leave  
+c01026d6:	c3                   	ret    
+
+c01026d7 <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf)
+{
+c01026d7:	55                   	push   %ebp
+c01026d8:	89 e5                	mov    %esp,%ebp
+c01026da:	53                   	push   %ebx
+c01026db:	83 ec 34             	sub    $0x34,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c01026de:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026e1:	8b 40 34             	mov    0x34(%eax),%eax
+c01026e4:	83 e0 01             	and    $0x1,%eax
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026e7:	85 c0                	test   %eax,%eax
+c01026e9:	74 07                	je     c01026f2 <print_pgfault+0x1b>
+c01026eb:	bb a9 cd 10 c0       	mov    $0xc010cda9,%ebx
+c01026f0:	eb 05                	jmp    c01026f7 <print_pgfault+0x20>
+c01026f2:	bb ba cd 10 c0       	mov    $0xc010cdba,%ebx
+            (tf->tf_err & 2) ? 'W' : 'R',
+c01026f7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026fa:	8b 40 34             	mov    0x34(%eax),%eax
+c01026fd:	83 e0 02             	and    $0x2,%eax
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102700:	85 c0                	test   %eax,%eax
+c0102702:	74 07                	je     c010270b <print_pgfault+0x34>
+c0102704:	b9 57 00 00 00       	mov    $0x57,%ecx
+c0102709:	eb 05                	jmp    c0102710 <print_pgfault+0x39>
+c010270b:	b9 52 00 00 00       	mov    $0x52,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c0102710:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102713:	8b 40 34             	mov    0x34(%eax),%eax
+c0102716:	83 e0 04             	and    $0x4,%eax
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102719:	85 c0                	test   %eax,%eax
+c010271b:	74 07                	je     c0102724 <print_pgfault+0x4d>
+c010271d:	ba 55 00 00 00       	mov    $0x55,%edx
+c0102722:	eb 05                	jmp    c0102729 <print_pgfault+0x52>
+c0102724:	ba 4b 00 00 00       	mov    $0x4b,%edx
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c0102729:	0f 20 d0             	mov    %cr2,%eax
+c010272c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr2;
+c010272f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102732:	89 5c 24 10          	mov    %ebx,0x10(%esp)
+c0102736:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010273a:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010273e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102742:	c7 04 24 c8 cd 10 c0 	movl   $0xc010cdc8,(%esp)
+c0102749:	e8 60 db ff ff       	call   c01002ae <cprintf>
+}
+c010274e:	90                   	nop
+c010274f:	83 c4 34             	add    $0x34,%esp
+c0102752:	5b                   	pop    %ebx
+c0102753:	5d                   	pop    %ebp
+c0102754:	c3                   	ret    
+
+c0102755 <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf)
+{
+c0102755:	55                   	push   %ebp
+c0102756:	89 e5                	mov    %esp,%ebp
+c0102758:	83 ec 28             	sub    $0x28,%esp
+    extern struct mm_struct *check_mm_struct;
+    if (check_mm_struct != NULL)
+c010275b:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c0102760:	85 c0                	test   %eax,%eax
+c0102762:	74 0b                	je     c010276f <pgfault_handler+0x1a>
+    { //used for test check_swap
+        print_pgfault(tf);
+c0102764:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102767:	89 04 24             	mov    %eax,(%esp)
+c010276a:	e8 68 ff ff ff       	call   c01026d7 <print_pgfault>
+    }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL)
+c010276f:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c0102774:	85 c0                	test   %eax,%eax
+c0102776:	74 3d                	je     c01027b5 <pgfault_handler+0x60>
+    {
+        assert(current == idleproc);
+c0102778:	8b 15 28 50 1b c0    	mov    0xc01b5028,%edx
+c010277e:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c0102783:	39 c2                	cmp    %eax,%edx
+c0102785:	74 24                	je     c01027ab <pgfault_handler+0x56>
+c0102787:	c7 44 24 0c eb cd 10 	movl   $0xc010cdeb,0xc(%esp)
+c010278e:	c0 
+c010278f:	c7 44 24 08 ff cd 10 	movl   $0xc010cdff,0x8(%esp)
+c0102796:	c0 
+c0102797:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
+c010279e:	00 
+c010279f:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c01027a6:	e8 5a dc ff ff       	call   c0100405 <__panic>
+        mm = check_mm_struct;
+c01027ab:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c01027b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01027b3:	eb 46                	jmp    c01027fb <pgfault_handler+0xa6>
+    }
+    else
+    {
+        if (current == NULL)
+c01027b5:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c01027ba:	85 c0                	test   %eax,%eax
+c01027bc:	75 32                	jne    c01027f0 <pgfault_handler+0x9b>
+        {
+            print_trapframe(tf);
+c01027be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027c1:	89 04 24             	mov    %eax,(%esp)
+c01027c4:	e8 a3 fc ff ff       	call   c010246c <print_trapframe>
+            print_pgfault(tf);
+c01027c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027cc:	89 04 24             	mov    %eax,(%esp)
+c01027cf:	e8 03 ff ff ff       	call   c01026d7 <print_pgfault>
+            panic("unhandled page fault.\n");
+c01027d4:	c7 44 24 08 14 ce 10 	movl   $0xc010ce14,0x8(%esp)
+c01027db:	c0 
+c01027dc:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
+c01027e3:	00 
+c01027e4:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c01027eb:	e8 15 dc ff ff       	call   c0100405 <__panic>
+        }
+        mm = current->mm;
+c01027f0:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c01027f5:	8b 40 18             	mov    0x18(%eax),%eax
+c01027f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01027fb:	0f 20 d0             	mov    %cr2,%eax
+c01027fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c0102801:	8b 55 f0             	mov    -0x10(%ebp),%edx
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c0102804:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102807:	8b 40 34             	mov    0x34(%eax),%eax
+c010280a:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010280e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0102812:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102815:	89 04 24             	mov    %eax,(%esp)
+c0102818:	e8 98 41 00 00       	call   c01069b5 <do_pgfault>
+}
+c010281d:	c9                   	leave  
+c010281e:	c3                   	ret    
+
+c010281f <trap_dispatch>:
+/* temporary trapframe or pointer to trapframe */
+struct trapframe switchk2u, *switchu2k;
+
+static void
+trap_dispatch(struct trapframe *tf)
+{
+c010281f:	55                   	push   %ebp
+c0102820:	89 e5                	mov    %esp,%ebp
+c0102822:	57                   	push   %edi
+c0102823:	56                   	push   %esi
+c0102824:	53                   	push   %ebx
+c0102825:	83 ec 2c             	sub    $0x2c,%esp
+    char c;
+
+    int ret = 0;
+c0102828:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    switch (tf->tf_trapno)
+c010282f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102832:	8b 40 30             	mov    0x30(%eax),%eax
+c0102835:	83 f8 2f             	cmp    $0x2f,%eax
+c0102838:	77 38                	ja     c0102872 <trap_dispatch+0x53>
+c010283a:	83 f8 2e             	cmp    $0x2e,%eax
+c010283d:	0f 83 43 03 00 00    	jae    c0102b86 <trap_dispatch+0x367>
+c0102843:	83 f8 20             	cmp    $0x20,%eax
+c0102846:	0f 84 02 01 00 00    	je     c010294e <trap_dispatch+0x12f>
+c010284c:	83 f8 20             	cmp    $0x20,%eax
+c010284f:	77 0a                	ja     c010285b <trap_dispatch+0x3c>
+c0102851:	83 f8 0e             	cmp    $0xe,%eax
+c0102854:	74 3e                	je     c0102894 <trap_dispatch+0x75>
+c0102856:	e9 e3 02 00 00       	jmp    c0102b3e <trap_dispatch+0x31f>
+c010285b:	83 f8 21             	cmp    $0x21,%eax
+c010285e:	0f 84 5d 01 00 00    	je     c01029c1 <trap_dispatch+0x1a2>
+c0102864:	83 f8 24             	cmp    $0x24,%eax
+c0102867:	0f 84 2b 01 00 00    	je     c0102998 <trap_dispatch+0x179>
+c010286d:	e9 cc 02 00 00       	jmp    c0102b3e <trap_dispatch+0x31f>
+c0102872:	83 f8 79             	cmp    $0x79,%eax
+c0102875:	0f 84 4b 02 00 00    	je     c0102ac6 <trap_dispatch+0x2a7>
+c010287b:	3d 80 00 00 00       	cmp    $0x80,%eax
+c0102880:	0f 84 be 00 00 00    	je     c0102944 <trap_dispatch+0x125>
+c0102886:	83 f8 78             	cmp    $0x78,%eax
+c0102889:	0f 84 5b 01 00 00    	je     c01029ea <trap_dispatch+0x1cb>
+c010288f:	e9 aa 02 00 00       	jmp    c0102b3e <trap_dispatch+0x31f>
+    {
+    case T_PGFLT: //page fault
+        if ((ret = pgfault_handler(tf)) != 0)
+c0102894:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102897:	89 04 24             	mov    %eax,(%esp)
+c010289a:	e8 b6 fe ff ff       	call   c0102755 <pgfault_handler>
+c010289f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01028a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01028a6:	0f 84 dd 02 00 00    	je     c0102b89 <trap_dispatch+0x36a>
+        {
+            print_trapframe(tf);
+c01028ac:	8b 45 08             	mov    0x8(%ebp),%eax
+c01028af:	89 04 24             	mov    %eax,(%esp)
+c01028b2:	e8 b5 fb ff ff       	call   c010246c <print_trapframe>
+            if (current == NULL)
+c01028b7:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c01028bc:	85 c0                	test   %eax,%eax
+c01028be:	75 23                	jne    c01028e3 <trap_dispatch+0xc4>
+            {
+                panic("handle pgfault failed. ret=%d\n", ret);
+c01028c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01028c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01028c7:	c7 44 24 08 2c ce 10 	movl   $0xc010ce2c,0x8(%esp)
+c01028ce:	c0 
+c01028cf:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
+c01028d6:	00 
+c01028d7:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c01028de:	e8 22 db ff ff       	call   c0100405 <__panic>
+            }
+            else
+            {
+                if (trap_in_kernel(tf))
+c01028e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01028e6:	89 04 24             	mov    %eax,(%esp)
+c01028e9:	e8 69 fb ff ff       	call   c0102457 <trap_in_kernel>
+c01028ee:	85 c0                	test   %eax,%eax
+c01028f0:	74 23                	je     c0102915 <trap_dispatch+0xf6>
+                {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c01028f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01028f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01028f9:	c7 44 24 08 4c ce 10 	movl   $0xc010ce4c,0x8(%esp)
+c0102900:	c0 
+c0102901:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
+c0102908:	00 
+c0102909:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c0102910:	e8 f0 da ff ff       	call   c0100405 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c0102915:	c7 04 24 7a ce 10 c0 	movl   $0xc010ce7a,(%esp)
+c010291c:	e8 8d d9 ff ff       	call   c01002ae <cprintf>
+                panic("handle user mode pgfault failed. ret=%d\n", ret);
+c0102921:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0102924:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0102928:	c7 44 24 08 90 ce 10 	movl   $0xc010ce90,0x8(%esp)
+c010292f:	c0 
+c0102930:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
+c0102937:	00 
+c0102938:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c010293f:	e8 c1 da ff ff       	call   c0100405 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+c0102944:	e8 0a 91 00 00       	call   c010ba53 <syscall>
+        break;
+c0102949:	e9 42 02 00 00       	jmp    c0102b90 <trap_dispatch+0x371>
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        ticks++;
+c010294e:	a1 7c 70 1b c0       	mov    0xc01b707c,%eax
+c0102953:	40                   	inc    %eax
+c0102954:	a3 7c 70 1b c0       	mov    %eax,0xc01b707c
+        assert(current != NULL);
+c0102959:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010295e:	85 c0                	test   %eax,%eax
+c0102960:	75 24                	jne    c0102986 <trap_dispatch+0x167>
+c0102962:	c7 44 24 0c b9 ce 10 	movl   $0xc010ceb9,0xc(%esp)
+c0102969:	c0 
+c010296a:	c7 44 24 08 ff cd 10 	movl   $0xc010cdff,0x8(%esp)
+c0102971:	c0 
+c0102972:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
+c0102979:	00 
+c010297a:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c0102981:	e8 7f da ff ff       	call   c0100405 <__panic>
+        sched_class_proc_tick(current);
+c0102986:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010298b:	89 04 24             	mov    %eax,(%esp)
+c010298e:	e8 02 88 00 00       	call   c010b195 <sched_class_proc_tick>
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */
+        break;
+c0102993:	e9 f8 01 00 00       	jmp    c0102b90 <trap_dispatch+0x371>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c0102998:	e8 17 f6 ff ff       	call   c0101fb4 <cons_getc>
+c010299d:	88 45 e3             	mov    %al,-0x1d(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c01029a0:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
+c01029a4:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
+c01029a8:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01029ac:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01029b0:	c7 04 24 c9 ce 10 c0 	movl   $0xc010cec9,(%esp)
+c01029b7:	e8 f2 d8 ff ff       	call   c01002ae <cprintf>
+        break;
+c01029bc:	e9 cf 01 00 00       	jmp    c0102b90 <trap_dispatch+0x371>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c01029c1:	e8 ee f5 ff ff       	call   c0101fb4 <cons_getc>
+c01029c6:	88 45 e3             	mov    %al,-0x1d(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c01029c9:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
+c01029cd:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
+c01029d1:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01029d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01029d9:	c7 04 24 db ce 10 c0 	movl   $0xc010cedb,(%esp)
+c01029e0:	e8 c9 d8 ff ff       	call   c01002ae <cprintf>
+        break;
+c01029e5:	e9 a6 01 00 00       	jmp    c0102b90 <trap_dispatch+0x371>
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+        if (tf->tf_cs != USER_CS)
+c01029ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029ed:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01029f1:	83 f8 1b             	cmp    $0x1b,%eax
+c01029f4:	0f 84 92 01 00 00    	je     c0102b8c <trap_dispatch+0x36d>
+        {
+            switchk2u = *tf;
+c01029fa:	8b 55 08             	mov    0x8(%ebp),%edx
+c01029fd:	b8 80 70 1b c0       	mov    $0xc01b7080,%eax
+c0102a02:	bb 4c 00 00 00       	mov    $0x4c,%ebx
+c0102a07:	89 c1                	mov    %eax,%ecx
+c0102a09:	83 e1 01             	and    $0x1,%ecx
+c0102a0c:	85 c9                	test   %ecx,%ecx
+c0102a0e:	74 0c                	je     c0102a1c <trap_dispatch+0x1fd>
+c0102a10:	0f b6 0a             	movzbl (%edx),%ecx
+c0102a13:	88 08                	mov    %cl,(%eax)
+c0102a15:	8d 40 01             	lea    0x1(%eax),%eax
+c0102a18:	8d 52 01             	lea    0x1(%edx),%edx
+c0102a1b:	4b                   	dec    %ebx
+c0102a1c:	89 c1                	mov    %eax,%ecx
+c0102a1e:	83 e1 02             	and    $0x2,%ecx
+c0102a21:	85 c9                	test   %ecx,%ecx
+c0102a23:	74 0f                	je     c0102a34 <trap_dispatch+0x215>
+c0102a25:	0f b7 0a             	movzwl (%edx),%ecx
+c0102a28:	66 89 08             	mov    %cx,(%eax)
+c0102a2b:	8d 40 02             	lea    0x2(%eax),%eax
+c0102a2e:	8d 52 02             	lea    0x2(%edx),%edx
+c0102a31:	83 eb 02             	sub    $0x2,%ebx
+c0102a34:	89 df                	mov    %ebx,%edi
+c0102a36:	83 e7 fc             	and    $0xfffffffc,%edi
+c0102a39:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0102a3e:	8b 34 0a             	mov    (%edx,%ecx,1),%esi
+c0102a41:	89 34 08             	mov    %esi,(%eax,%ecx,1)
+c0102a44:	83 c1 04             	add    $0x4,%ecx
+c0102a47:	39 f9                	cmp    %edi,%ecx
+c0102a49:	72 f3                	jb     c0102a3e <trap_dispatch+0x21f>
+c0102a4b:	01 c8                	add    %ecx,%eax
+c0102a4d:	01 ca                	add    %ecx,%edx
+c0102a4f:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0102a54:	89 de                	mov    %ebx,%esi
+c0102a56:	83 e6 02             	and    $0x2,%esi
+c0102a59:	85 f6                	test   %esi,%esi
+c0102a5b:	74 0b                	je     c0102a68 <trap_dispatch+0x249>
+c0102a5d:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
+c0102a61:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
+c0102a65:	83 c1 02             	add    $0x2,%ecx
+c0102a68:	83 e3 01             	and    $0x1,%ebx
+c0102a6b:	85 db                	test   %ebx,%ebx
+c0102a6d:	74 07                	je     c0102a76 <trap_dispatch+0x257>
+c0102a6f:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
+c0102a73:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+            switchk2u.tf_cs = USER_CS;
+c0102a76:	66 c7 05 bc 70 1b c0 	movw   $0x1b,0xc01b70bc
+c0102a7d:	1b 00 
+            switchk2u.tf_ds = USER_DS;
+c0102a7f:	66 c7 05 ac 70 1b c0 	movw   $0x23,0xc01b70ac
+c0102a86:	23 00 
+            switchk2u.tf_es = USER_DS;
+c0102a88:	66 c7 05 a8 70 1b c0 	movw   $0x23,0xc01b70a8
+c0102a8f:	23 00 
+            switchk2u.tf_ss = USER_DS;
+c0102a91:	66 c7 05 c8 70 1b c0 	movw   $0x23,0xc01b70c8
+c0102a98:	23 00 
+            switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
+c0102a9a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102a9d:	83 c0 44             	add    $0x44,%eax
+c0102aa0:	a3 c4 70 1b c0       	mov    %eax,0xc01b70c4
+            switchk2u.tf_eflags |= FL_IOPL_MASK;
+c0102aa5:	a1 c0 70 1b c0       	mov    0xc01b70c0,%eax
+c0102aaa:	0d 00 30 00 00       	or     $0x3000,%eax
+c0102aaf:	a3 c0 70 1b c0       	mov    %eax,0xc01b70c0
+            *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
+c0102ab4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ab7:	83 e8 04             	sub    $0x4,%eax
+c0102aba:	ba 80 70 1b c0       	mov    $0xc01b7080,%edx
+c0102abf:	89 10                	mov    %edx,(%eax)
+        }
+        break;
+c0102ac1:	e9 c6 00 00 00       	jmp    c0102b8c <trap_dispatch+0x36d>
+    case T_SWITCH_TOK:
+        if (tf->tf_cs != KERNEL_CS)
+c0102ac6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ac9:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c0102acd:	83 f8 08             	cmp    $0x8,%eax
+c0102ad0:	0f 84 b9 00 00 00    	je     c0102b8f <trap_dispatch+0x370>
+        {
+            tf->tf_cs = KERNEL_CS;
+c0102ad6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ad9:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
+            tf->tf_ds = KERNEL_DS;
+c0102adf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102ae2:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
+            tf->tf_es = KERNEL_DS;
+c0102ae8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102aeb:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
+            tf->tf_eflags &= ~FL_IOPL_MASK;
+c0102af1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102af4:	8b 40 40             	mov    0x40(%eax),%eax
+c0102af7:	25 ff cf ff ff       	and    $0xffffcfff,%eax
+c0102afc:	89 c2                	mov    %eax,%edx
+c0102afe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102b01:	89 50 40             	mov    %edx,0x40(%eax)
+            switchu2k = (struct trapframe *)(tf->tf_esp - (sizeof(struct trapframe) - 8));
+c0102b04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102b07:	8b 40 44             	mov    0x44(%eax),%eax
+c0102b0a:	83 e8 44             	sub    $0x44,%eax
+c0102b0d:	a3 cc 70 1b c0       	mov    %eax,0xc01b70cc
+            memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
+c0102b12:	a1 cc 70 1b c0       	mov    0xc01b70cc,%eax
+c0102b17:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
+c0102b1e:	00 
+c0102b1f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102b22:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0102b26:	89 04 24             	mov    %eax,(%esp)
+c0102b29:	e8 4d 93 00 00       	call   c010be7b <memmove>
+            *((uint32_t *)tf - 1) = (uint32_t)switchu2k;
+c0102b2e:	8b 15 cc 70 1b c0    	mov    0xc01b70cc,%edx
+c0102b34:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102b37:	83 e8 04             	sub    $0x4,%eax
+c0102b3a:	89 10                	mov    %edx,(%eax)
+        }
+        break;
+c0102b3c:	eb 51                	jmp    c0102b8f <trap_dispatch+0x370>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c0102b3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102b41:	89 04 24             	mov    %eax,(%esp)
+c0102b44:	e8 23 f9 ff ff       	call   c010246c <print_trapframe>
+        if (current != NULL)
+c0102b49:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102b4e:	85 c0                	test   %eax,%eax
+c0102b50:	74 18                	je     c0102b6a <trap_dispatch+0x34b>
+        {
+            cprintf("unhandled trap.\n");
+c0102b52:	c7 04 24 ea ce 10 c0 	movl   $0xc010ceea,(%esp)
+c0102b59:	e8 50 d7 ff ff       	call   c01002ae <cprintf>
+            do_exit(-E_KILLED);
+c0102b5e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102b65:	e8 dc 75 00 00       	call   c010a146 <do_exit>
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c0102b6a:	c7 44 24 08 fb ce 10 	movl   $0xc010cefb,0x8(%esp)
+c0102b71:	c0 
+c0102b72:	c7 44 24 04 4d 01 00 	movl   $0x14d,0x4(%esp)
+c0102b79:	00 
+c0102b7a:	c7 04 24 ee cb 10 c0 	movl   $0xc010cbee,(%esp)
+c0102b81:	e8 7f d8 ff ff       	call   c0100405 <__panic>
+        break;
+c0102b86:	90                   	nop
+c0102b87:	eb 07                	jmp    c0102b90 <trap_dispatch+0x371>
+        break;
+c0102b89:	90                   	nop
+c0102b8a:	eb 04                	jmp    c0102b90 <trap_dispatch+0x371>
+        break;
+c0102b8c:	90                   	nop
+c0102b8d:	eb 01                	jmp    c0102b90 <trap_dispatch+0x371>
+        break;
+c0102b8f:	90                   	nop
+    }
+}
+c0102b90:	90                   	nop
+c0102b91:	83 c4 2c             	add    $0x2c,%esp
+c0102b94:	5b                   	pop    %ebx
+c0102b95:	5e                   	pop    %esi
+c0102b96:	5f                   	pop    %edi
+c0102b97:	5d                   	pop    %ebp
+c0102b98:	c3                   	ret    
+
+c0102b99 <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void trap(struct trapframe *tf)
+{
+c0102b99:	55                   	push   %ebp
+c0102b9a:	89 e5                	mov    %esp,%ebp
+c0102b9c:	83 ec 28             	sub    $0x28,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL)
+c0102b9f:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102ba4:	85 c0                	test   %eax,%eax
+c0102ba6:	75 0d                	jne    c0102bb5 <trap+0x1c>
+    {
+        trap_dispatch(tf);
+c0102ba8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102bab:	89 04 24             	mov    %eax,(%esp)
+c0102bae:	e8 6c fc ff ff       	call   c010281f <trap_dispatch>
+            {
+                schedule();
+            }
+        }
+    }
+}
+c0102bb3:	eb 6c                	jmp    c0102c21 <trap+0x88>
+        struct trapframe *otf = current->tf;
+c0102bb5:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102bba:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102bbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102bc0:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102bc5:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102bc8:	89 50 3c             	mov    %edx,0x3c(%eax)
+        bool in_kernel = trap_in_kernel(tf);
+c0102bcb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102bce:	89 04 24             	mov    %eax,(%esp)
+c0102bd1:	e8 81 f8 ff ff       	call   c0102457 <trap_in_kernel>
+c0102bd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        trap_dispatch(tf);
+c0102bd9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102bdc:	89 04 24             	mov    %eax,(%esp)
+c0102bdf:	e8 3b fc ff ff       	call   c010281f <trap_dispatch>
+        current->tf = otf;
+c0102be4:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102bec:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel)
+c0102bef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102bf3:	75 2c                	jne    c0102c21 <trap+0x88>
+            if (current->flags & PF_EXITING)
+c0102bf5:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102bfa:	8b 40 44             	mov    0x44(%eax),%eax
+c0102bfd:	83 e0 01             	and    $0x1,%eax
+c0102c00:	85 c0                	test   %eax,%eax
+c0102c02:	74 0c                	je     c0102c10 <trap+0x77>
+                do_exit(-E_KILLED);
+c0102c04:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c0102c0b:	e8 36 75 00 00       	call   c010a146 <do_exit>
+            if (current->need_resched)
+c0102c10:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0102c15:	8b 40 10             	mov    0x10(%eax),%eax
+c0102c18:	85 c0                	test   %eax,%eax
+c0102c1a:	74 05                	je     c0102c21 <trap+0x88>
+                schedule();
+c0102c1c:	e8 b5 86 00 00       	call   c010b2d6 <schedule>
+}
+c0102c21:	90                   	nop
+c0102c22:	c9                   	leave  
+c0102c23:	c3                   	ret    
+
+c0102c24 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102c24:	6a 00                	push   $0x0
+  pushl $0
+c0102c26:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102c28:	e9 69 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c2d <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102c2d:	6a 00                	push   $0x0
+  pushl $1
+c0102c2f:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102c31:	e9 60 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c36 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102c36:	6a 00                	push   $0x0
+  pushl $2
+c0102c38:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102c3a:	e9 57 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c3f <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102c3f:	6a 00                	push   $0x0
+  pushl $3
+c0102c41:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102c43:	e9 4e 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c48 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102c48:	6a 00                	push   $0x0
+  pushl $4
+c0102c4a:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102c4c:	e9 45 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c51 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102c51:	6a 00                	push   $0x0
+  pushl $5
+c0102c53:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102c55:	e9 3c 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c5a <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102c5a:	6a 00                	push   $0x0
+  pushl $6
+c0102c5c:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102c5e:	e9 33 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c63 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102c63:	6a 00                	push   $0x0
+  pushl $7
+c0102c65:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102c67:	e9 2a 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c6c <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102c6c:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102c6e:	e9 23 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c73 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+c0102c73:	6a 00                	push   $0x0
+  pushl $9
+c0102c75:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102c77:	e9 1a 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c7c <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102c7c:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102c7e:	e9 13 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c83 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102c83:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102c85:	e9 0c 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c8a <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102c8a:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102c8c:	e9 05 0a 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c91 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102c91:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102c93:	e9 fe 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c98 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102c98:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102c9a:	e9 f7 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102c9f <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102c9f:	6a 00                	push   $0x0
+  pushl $15
+c0102ca1:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102ca3:	e9 ee 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ca8 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102ca8:	6a 00                	push   $0x0
+  pushl $16
+c0102caa:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102cac:	e9 e5 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cb1 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102cb1:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102cb3:	e9 de 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cb8 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102cb8:	6a 00                	push   $0x0
+  pushl $18
+c0102cba:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102cbc:	e9 d5 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cc1 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102cc1:	6a 00                	push   $0x0
+  pushl $19
+c0102cc3:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102cc5:	e9 cc 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cca <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102cca:	6a 00                	push   $0x0
+  pushl $20
+c0102ccc:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102cce:	e9 c3 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cd3 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102cd3:	6a 00                	push   $0x0
+  pushl $21
+c0102cd5:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102cd7:	e9 ba 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cdc <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102cdc:	6a 00                	push   $0x0
+  pushl $22
+c0102cde:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102ce0:	e9 b1 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ce5 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102ce5:	6a 00                	push   $0x0
+  pushl $23
+c0102ce7:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102ce9:	e9 a8 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cee <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102cee:	6a 00                	push   $0x0
+  pushl $24
+c0102cf0:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102cf2:	e9 9f 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102cf7 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102cf7:	6a 00                	push   $0x0
+  pushl $25
+c0102cf9:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102cfb:	e9 96 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d00 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102d00:	6a 00                	push   $0x0
+  pushl $26
+c0102d02:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102d04:	e9 8d 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d09 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102d09:	6a 00                	push   $0x0
+  pushl $27
+c0102d0b:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102d0d:	e9 84 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d12 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102d12:	6a 00                	push   $0x0
+  pushl $28
+c0102d14:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102d16:	e9 7b 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d1b <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102d1b:	6a 00                	push   $0x0
+  pushl $29
+c0102d1d:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102d1f:	e9 72 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d24 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102d24:	6a 00                	push   $0x0
+  pushl $30
+c0102d26:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102d28:	e9 69 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d2d <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102d2d:	6a 00                	push   $0x0
+  pushl $31
+c0102d2f:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102d31:	e9 60 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d36 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102d36:	6a 00                	push   $0x0
+  pushl $32
+c0102d38:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102d3a:	e9 57 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d3f <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102d3f:	6a 00                	push   $0x0
+  pushl $33
+c0102d41:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102d43:	e9 4e 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d48 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102d48:	6a 00                	push   $0x0
+  pushl $34
+c0102d4a:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102d4c:	e9 45 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d51 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102d51:	6a 00                	push   $0x0
+  pushl $35
+c0102d53:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102d55:	e9 3c 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d5a <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102d5a:	6a 00                	push   $0x0
+  pushl $36
+c0102d5c:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102d5e:	e9 33 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d63 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102d63:	6a 00                	push   $0x0
+  pushl $37
+c0102d65:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102d67:	e9 2a 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d6c <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102d6c:	6a 00                	push   $0x0
+  pushl $38
+c0102d6e:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102d70:	e9 21 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d75 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102d75:	6a 00                	push   $0x0
+  pushl $39
+c0102d77:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102d79:	e9 18 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d7e <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102d7e:	6a 00                	push   $0x0
+  pushl $40
+c0102d80:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102d82:	e9 0f 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d87 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102d87:	6a 00                	push   $0x0
+  pushl $41
+c0102d89:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102d8b:	e9 06 09 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d90 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102d90:	6a 00                	push   $0x0
+  pushl $42
+c0102d92:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102d94:	e9 fd 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102d99 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102d99:	6a 00                	push   $0x0
+  pushl $43
+c0102d9b:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102d9d:	e9 f4 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102da2 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102da2:	6a 00                	push   $0x0
+  pushl $44
+c0102da4:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102da6:	e9 eb 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dab <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102dab:	6a 00                	push   $0x0
+  pushl $45
+c0102dad:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102daf:	e9 e2 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102db4 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102db4:	6a 00                	push   $0x0
+  pushl $46
+c0102db6:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102db8:	e9 d9 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dbd <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102dbd:	6a 00                	push   $0x0
+  pushl $47
+c0102dbf:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102dc1:	e9 d0 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dc6 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102dc6:	6a 00                	push   $0x0
+  pushl $48
+c0102dc8:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102dca:	e9 c7 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dcf <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102dcf:	6a 00                	push   $0x0
+  pushl $49
+c0102dd1:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102dd3:	e9 be 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dd8 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102dd8:	6a 00                	push   $0x0
+  pushl $50
+c0102dda:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102ddc:	e9 b5 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102de1 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102de1:	6a 00                	push   $0x0
+  pushl $51
+c0102de3:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102de5:	e9 ac 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dea <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102dea:	6a 00                	push   $0x0
+  pushl $52
+c0102dec:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102dee:	e9 a3 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102df3 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102df3:	6a 00                	push   $0x0
+  pushl $53
+c0102df5:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102df7:	e9 9a 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102dfc <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102dfc:	6a 00                	push   $0x0
+  pushl $54
+c0102dfe:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102e00:	e9 91 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e05 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102e05:	6a 00                	push   $0x0
+  pushl $55
+c0102e07:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102e09:	e9 88 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e0e <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102e0e:	6a 00                	push   $0x0
+  pushl $56
+c0102e10:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102e12:	e9 7f 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e17 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102e17:	6a 00                	push   $0x0
+  pushl $57
+c0102e19:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102e1b:	e9 76 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e20 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102e20:	6a 00                	push   $0x0
+  pushl $58
+c0102e22:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102e24:	e9 6d 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e29 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102e29:	6a 00                	push   $0x0
+  pushl $59
+c0102e2b:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102e2d:	e9 64 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e32 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102e32:	6a 00                	push   $0x0
+  pushl $60
+c0102e34:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102e36:	e9 5b 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e3b <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102e3b:	6a 00                	push   $0x0
+  pushl $61
+c0102e3d:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102e3f:	e9 52 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e44 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102e44:	6a 00                	push   $0x0
+  pushl $62
+c0102e46:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102e48:	e9 49 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e4d <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102e4d:	6a 00                	push   $0x0
+  pushl $63
+c0102e4f:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102e51:	e9 40 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e56 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102e56:	6a 00                	push   $0x0
+  pushl $64
+c0102e58:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102e5a:	e9 37 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e5f <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102e5f:	6a 00                	push   $0x0
+  pushl $65
+c0102e61:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102e63:	e9 2e 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e68 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102e68:	6a 00                	push   $0x0
+  pushl $66
+c0102e6a:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102e6c:	e9 25 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e71 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102e71:	6a 00                	push   $0x0
+  pushl $67
+c0102e73:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102e75:	e9 1c 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e7a <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102e7a:	6a 00                	push   $0x0
+  pushl $68
+c0102e7c:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102e7e:	e9 13 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e83 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102e83:	6a 00                	push   $0x0
+  pushl $69
+c0102e85:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102e87:	e9 0a 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e8c <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102e8c:	6a 00                	push   $0x0
+  pushl $70
+c0102e8e:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102e90:	e9 01 08 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e95 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102e95:	6a 00                	push   $0x0
+  pushl $71
+c0102e97:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102e99:	e9 f8 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102e9e <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102e9e:	6a 00                	push   $0x0
+  pushl $72
+c0102ea0:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102ea2:	e9 ef 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ea7 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102ea7:	6a 00                	push   $0x0
+  pushl $73
+c0102ea9:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102eab:	e9 e6 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102eb0 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102eb0:	6a 00                	push   $0x0
+  pushl $74
+c0102eb2:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102eb4:	e9 dd 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102eb9 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102eb9:	6a 00                	push   $0x0
+  pushl $75
+c0102ebb:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102ebd:	e9 d4 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ec2 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102ec2:	6a 00                	push   $0x0
+  pushl $76
+c0102ec4:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102ec6:	e9 cb 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ecb <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102ecb:	6a 00                	push   $0x0
+  pushl $77
+c0102ecd:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102ecf:	e9 c2 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ed4 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102ed4:	6a 00                	push   $0x0
+  pushl $78
+c0102ed6:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102ed8:	e9 b9 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102edd <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102edd:	6a 00                	push   $0x0
+  pushl $79
+c0102edf:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102ee1:	e9 b0 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ee6 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102ee6:	6a 00                	push   $0x0
+  pushl $80
+c0102ee8:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102eea:	e9 a7 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102eef <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102eef:	6a 00                	push   $0x0
+  pushl $81
+c0102ef1:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102ef3:	e9 9e 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ef8 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102ef8:	6a 00                	push   $0x0
+  pushl $82
+c0102efa:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102efc:	e9 95 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f01 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102f01:	6a 00                	push   $0x0
+  pushl $83
+c0102f03:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102f05:	e9 8c 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f0a <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102f0a:	6a 00                	push   $0x0
+  pushl $84
+c0102f0c:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102f0e:	e9 83 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f13 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102f13:	6a 00                	push   $0x0
+  pushl $85
+c0102f15:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102f17:	e9 7a 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f1c <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102f1c:	6a 00                	push   $0x0
+  pushl $86
+c0102f1e:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102f20:	e9 71 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f25 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102f25:	6a 00                	push   $0x0
+  pushl $87
+c0102f27:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102f29:	e9 68 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f2e <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102f2e:	6a 00                	push   $0x0
+  pushl $88
+c0102f30:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102f32:	e9 5f 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f37 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102f37:	6a 00                	push   $0x0
+  pushl $89
+c0102f39:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102f3b:	e9 56 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f40 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102f40:	6a 00                	push   $0x0
+  pushl $90
+c0102f42:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102f44:	e9 4d 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f49 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102f49:	6a 00                	push   $0x0
+  pushl $91
+c0102f4b:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102f4d:	e9 44 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f52 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102f52:	6a 00                	push   $0x0
+  pushl $92
+c0102f54:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102f56:	e9 3b 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f5b <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102f5b:	6a 00                	push   $0x0
+  pushl $93
+c0102f5d:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102f5f:	e9 32 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f64 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102f64:	6a 00                	push   $0x0
+  pushl $94
+c0102f66:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102f68:	e9 29 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f6d <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102f6d:	6a 00                	push   $0x0
+  pushl $95
+c0102f6f:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102f71:	e9 20 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f76 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102f76:	6a 00                	push   $0x0
+  pushl $96
+c0102f78:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102f7a:	e9 17 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f7f <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102f7f:	6a 00                	push   $0x0
+  pushl $97
+c0102f81:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102f83:	e9 0e 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f88 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102f88:	6a 00                	push   $0x0
+  pushl $98
+c0102f8a:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102f8c:	e9 05 07 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f91 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102f91:	6a 00                	push   $0x0
+  pushl $99
+c0102f93:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102f95:	e9 fc 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102f9a <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102f9a:	6a 00                	push   $0x0
+  pushl $100
+c0102f9c:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102f9e:	e9 f3 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fa3 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102fa3:	6a 00                	push   $0x0
+  pushl $101
+c0102fa5:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102fa7:	e9 ea 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fac <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102fac:	6a 00                	push   $0x0
+  pushl $102
+c0102fae:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102fb0:	e9 e1 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fb5 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102fb5:	6a 00                	push   $0x0
+  pushl $103
+c0102fb7:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102fb9:	e9 d8 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fbe <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102fbe:	6a 00                	push   $0x0
+  pushl $104
+c0102fc0:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102fc2:	e9 cf 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fc7 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102fc7:	6a 00                	push   $0x0
+  pushl $105
+c0102fc9:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102fcb:	e9 c6 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fd0 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102fd0:	6a 00                	push   $0x0
+  pushl $106
+c0102fd2:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102fd4:	e9 bd 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fd9 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102fd9:	6a 00                	push   $0x0
+  pushl $107
+c0102fdb:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102fdd:	e9 b4 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102fe2 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102fe2:	6a 00                	push   $0x0
+  pushl $108
+c0102fe4:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102fe6:	e9 ab 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102feb <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102feb:	6a 00                	push   $0x0
+  pushl $109
+c0102fed:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102fef:	e9 a2 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ff4 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102ff4:	6a 00                	push   $0x0
+  pushl $110
+c0102ff6:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102ff8:	e9 99 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0102ffd <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102ffd:	6a 00                	push   $0x0
+  pushl $111
+c0102fff:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0103001:	e9 90 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103006 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0103006:	6a 00                	push   $0x0
+  pushl $112
+c0103008:	6a 70                	push   $0x70
+  jmp __alltraps
+c010300a:	e9 87 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010300f <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c010300f:	6a 00                	push   $0x0
+  pushl $113
+c0103011:	6a 71                	push   $0x71
+  jmp __alltraps
+c0103013:	e9 7e 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103018 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0103018:	6a 00                	push   $0x0
+  pushl $114
+c010301a:	6a 72                	push   $0x72
+  jmp __alltraps
+c010301c:	e9 75 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103021 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0103021:	6a 00                	push   $0x0
+  pushl $115
+c0103023:	6a 73                	push   $0x73
+  jmp __alltraps
+c0103025:	e9 6c 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010302a <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c010302a:	6a 00                	push   $0x0
+  pushl $116
+c010302c:	6a 74                	push   $0x74
+  jmp __alltraps
+c010302e:	e9 63 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103033 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0103033:	6a 00                	push   $0x0
+  pushl $117
+c0103035:	6a 75                	push   $0x75
+  jmp __alltraps
+c0103037:	e9 5a 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010303c <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c010303c:	6a 00                	push   $0x0
+  pushl $118
+c010303e:	6a 76                	push   $0x76
+  jmp __alltraps
+c0103040:	e9 51 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103045 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0103045:	6a 00                	push   $0x0
+  pushl $119
+c0103047:	6a 77                	push   $0x77
+  jmp __alltraps
+c0103049:	e9 48 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010304e <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c010304e:	6a 00                	push   $0x0
+  pushl $120
+c0103050:	6a 78                	push   $0x78
+  jmp __alltraps
+c0103052:	e9 3f 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103057 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0103057:	6a 00                	push   $0x0
+  pushl $121
+c0103059:	6a 79                	push   $0x79
+  jmp __alltraps
+c010305b:	e9 36 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103060 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0103060:	6a 00                	push   $0x0
+  pushl $122
+c0103062:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0103064:	e9 2d 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103069 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0103069:	6a 00                	push   $0x0
+  pushl $123
+c010306b:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c010306d:	e9 24 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103072 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0103072:	6a 00                	push   $0x0
+  pushl $124
+c0103074:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0103076:	e9 1b 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010307b <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c010307b:	6a 00                	push   $0x0
+  pushl $125
+c010307d:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c010307f:	e9 12 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103084 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0103084:	6a 00                	push   $0x0
+  pushl $126
+c0103086:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0103088:	e9 09 06 00 00       	jmp    c0103696 <__alltraps>
+
+c010308d <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c010308d:	6a 00                	push   $0x0
+  pushl $127
+c010308f:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0103091:	e9 00 06 00 00       	jmp    c0103696 <__alltraps>
+
+c0103096 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0103096:	6a 00                	push   $0x0
+  pushl $128
+c0103098:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c010309d:	e9 f4 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030a2 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c01030a2:	6a 00                	push   $0x0
+  pushl $129
+c01030a4:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c01030a9:	e9 e8 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030ae <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c01030ae:	6a 00                	push   $0x0
+  pushl $130
+c01030b0:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c01030b5:	e9 dc 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030ba <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c01030ba:	6a 00                	push   $0x0
+  pushl $131
+c01030bc:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c01030c1:	e9 d0 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030c6 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c01030c6:	6a 00                	push   $0x0
+  pushl $132
+c01030c8:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c01030cd:	e9 c4 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030d2 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c01030d2:	6a 00                	push   $0x0
+  pushl $133
+c01030d4:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c01030d9:	e9 b8 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030de <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c01030de:	6a 00                	push   $0x0
+  pushl $134
+c01030e0:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c01030e5:	e9 ac 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030ea <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c01030ea:	6a 00                	push   $0x0
+  pushl $135
+c01030ec:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c01030f1:	e9 a0 05 00 00       	jmp    c0103696 <__alltraps>
+
+c01030f6 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c01030f6:	6a 00                	push   $0x0
+  pushl $136
+c01030f8:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c01030fd:	e9 94 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103102 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0103102:	6a 00                	push   $0x0
+  pushl $137
+c0103104:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0103109:	e9 88 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010310e <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c010310e:	6a 00                	push   $0x0
+  pushl $138
+c0103110:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0103115:	e9 7c 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010311a <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c010311a:	6a 00                	push   $0x0
+  pushl $139
+c010311c:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0103121:	e9 70 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103126 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0103126:	6a 00                	push   $0x0
+  pushl $140
+c0103128:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c010312d:	e9 64 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103132 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0103132:	6a 00                	push   $0x0
+  pushl $141
+c0103134:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0103139:	e9 58 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010313e <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c010313e:	6a 00                	push   $0x0
+  pushl $142
+c0103140:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0103145:	e9 4c 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010314a <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c010314a:	6a 00                	push   $0x0
+  pushl $143
+c010314c:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0103151:	e9 40 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103156 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0103156:	6a 00                	push   $0x0
+  pushl $144
+c0103158:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c010315d:	e9 34 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103162 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0103162:	6a 00                	push   $0x0
+  pushl $145
+c0103164:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0103169:	e9 28 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010316e <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c010316e:	6a 00                	push   $0x0
+  pushl $146
+c0103170:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0103175:	e9 1c 05 00 00       	jmp    c0103696 <__alltraps>
+
+c010317a <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c010317a:	6a 00                	push   $0x0
+  pushl $147
+c010317c:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0103181:	e9 10 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103186 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0103186:	6a 00                	push   $0x0
+  pushl $148
+c0103188:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c010318d:	e9 04 05 00 00       	jmp    c0103696 <__alltraps>
+
+c0103192 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0103192:	6a 00                	push   $0x0
+  pushl $149
+c0103194:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c0103199:	e9 f8 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010319e <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c010319e:	6a 00                	push   $0x0
+  pushl $150
+c01031a0:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c01031a5:	e9 ec 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031aa <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c01031aa:	6a 00                	push   $0x0
+  pushl $151
+c01031ac:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c01031b1:	e9 e0 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031b6 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c01031b6:	6a 00                	push   $0x0
+  pushl $152
+c01031b8:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c01031bd:	e9 d4 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031c2 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c01031c2:	6a 00                	push   $0x0
+  pushl $153
+c01031c4:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c01031c9:	e9 c8 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031ce <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c01031ce:	6a 00                	push   $0x0
+  pushl $154
+c01031d0:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c01031d5:	e9 bc 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031da <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c01031da:	6a 00                	push   $0x0
+  pushl $155
+c01031dc:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c01031e1:	e9 b0 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031e6 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c01031e6:	6a 00                	push   $0x0
+  pushl $156
+c01031e8:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c01031ed:	e9 a4 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031f2 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c01031f2:	6a 00                	push   $0x0
+  pushl $157
+c01031f4:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c01031f9:	e9 98 04 00 00       	jmp    c0103696 <__alltraps>
+
+c01031fe <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c01031fe:	6a 00                	push   $0x0
+  pushl $158
+c0103200:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c0103205:	e9 8c 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010320a <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c010320a:	6a 00                	push   $0x0
+  pushl $159
+c010320c:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c0103211:	e9 80 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103216 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c0103216:	6a 00                	push   $0x0
+  pushl $160
+c0103218:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c010321d:	e9 74 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103222 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c0103222:	6a 00                	push   $0x0
+  pushl $161
+c0103224:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c0103229:	e9 68 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010322e <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c010322e:	6a 00                	push   $0x0
+  pushl $162
+c0103230:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c0103235:	e9 5c 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010323a <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c010323a:	6a 00                	push   $0x0
+  pushl $163
+c010323c:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c0103241:	e9 50 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103246 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c0103246:	6a 00                	push   $0x0
+  pushl $164
+c0103248:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c010324d:	e9 44 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103252 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c0103252:	6a 00                	push   $0x0
+  pushl $165
+c0103254:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c0103259:	e9 38 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010325e <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c010325e:	6a 00                	push   $0x0
+  pushl $166
+c0103260:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c0103265:	e9 2c 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010326a <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c010326a:	6a 00                	push   $0x0
+  pushl $167
+c010326c:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c0103271:	e9 20 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103276 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0103276:	6a 00                	push   $0x0
+  pushl $168
+c0103278:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c010327d:	e9 14 04 00 00       	jmp    c0103696 <__alltraps>
+
+c0103282 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0103282:	6a 00                	push   $0x0
+  pushl $169
+c0103284:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c0103289:	e9 08 04 00 00       	jmp    c0103696 <__alltraps>
+
+c010328e <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c010328e:	6a 00                	push   $0x0
+  pushl $170
+c0103290:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c0103295:	e9 fc 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010329a <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c010329a:	6a 00                	push   $0x0
+  pushl $171
+c010329c:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c01032a1:	e9 f0 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032a6 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c01032a6:	6a 00                	push   $0x0
+  pushl $172
+c01032a8:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c01032ad:	e9 e4 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032b2 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c01032b2:	6a 00                	push   $0x0
+  pushl $173
+c01032b4:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c01032b9:	e9 d8 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032be <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c01032be:	6a 00                	push   $0x0
+  pushl $174
+c01032c0:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c01032c5:	e9 cc 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032ca <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c01032ca:	6a 00                	push   $0x0
+  pushl $175
+c01032cc:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c01032d1:	e9 c0 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032d6 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c01032d6:	6a 00                	push   $0x0
+  pushl $176
+c01032d8:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c01032dd:	e9 b4 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032e2 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c01032e2:	6a 00                	push   $0x0
+  pushl $177
+c01032e4:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c01032e9:	e9 a8 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032ee <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c01032ee:	6a 00                	push   $0x0
+  pushl $178
+c01032f0:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c01032f5:	e9 9c 03 00 00       	jmp    c0103696 <__alltraps>
+
+c01032fa <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c01032fa:	6a 00                	push   $0x0
+  pushl $179
+c01032fc:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c0103301:	e9 90 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103306 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c0103306:	6a 00                	push   $0x0
+  pushl $180
+c0103308:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c010330d:	e9 84 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103312 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c0103312:	6a 00                	push   $0x0
+  pushl $181
+c0103314:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c0103319:	e9 78 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010331e <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c010331e:	6a 00                	push   $0x0
+  pushl $182
+c0103320:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c0103325:	e9 6c 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010332a <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c010332a:	6a 00                	push   $0x0
+  pushl $183
+c010332c:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c0103331:	e9 60 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103336 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c0103336:	6a 00                	push   $0x0
+  pushl $184
+c0103338:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c010333d:	e9 54 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103342 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c0103342:	6a 00                	push   $0x0
+  pushl $185
+c0103344:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c0103349:	e9 48 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010334e <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c010334e:	6a 00                	push   $0x0
+  pushl $186
+c0103350:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c0103355:	e9 3c 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010335a <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c010335a:	6a 00                	push   $0x0
+  pushl $187
+c010335c:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c0103361:	e9 30 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103366 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c0103366:	6a 00                	push   $0x0
+  pushl $188
+c0103368:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c010336d:	e9 24 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103372 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c0103372:	6a 00                	push   $0x0
+  pushl $189
+c0103374:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c0103379:	e9 18 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010337e <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c010337e:	6a 00                	push   $0x0
+  pushl $190
+c0103380:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0103385:	e9 0c 03 00 00       	jmp    c0103696 <__alltraps>
+
+c010338a <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c010338a:	6a 00                	push   $0x0
+  pushl $191
+c010338c:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0103391:	e9 00 03 00 00       	jmp    c0103696 <__alltraps>
+
+c0103396 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c0103396:	6a 00                	push   $0x0
+  pushl $192
+c0103398:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c010339d:	e9 f4 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033a2 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c01033a2:	6a 00                	push   $0x0
+  pushl $193
+c01033a4:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c01033a9:	e9 e8 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033ae <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c01033ae:	6a 00                	push   $0x0
+  pushl $194
+c01033b0:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c01033b5:	e9 dc 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033ba <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c01033ba:	6a 00                	push   $0x0
+  pushl $195
+c01033bc:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c01033c1:	e9 d0 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033c6 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c01033c6:	6a 00                	push   $0x0
+  pushl $196
+c01033c8:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c01033cd:	e9 c4 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033d2 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c01033d2:	6a 00                	push   $0x0
+  pushl $197
+c01033d4:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c01033d9:	e9 b8 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033de <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c01033de:	6a 00                	push   $0x0
+  pushl $198
+c01033e0:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c01033e5:	e9 ac 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033ea <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c01033ea:	6a 00                	push   $0x0
+  pushl $199
+c01033ec:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c01033f1:	e9 a0 02 00 00       	jmp    c0103696 <__alltraps>
+
+c01033f6 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c01033f6:	6a 00                	push   $0x0
+  pushl $200
+c01033f8:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c01033fd:	e9 94 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103402 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c0103402:	6a 00                	push   $0x0
+  pushl $201
+c0103404:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c0103409:	e9 88 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010340e <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c010340e:	6a 00                	push   $0x0
+  pushl $202
+c0103410:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c0103415:	e9 7c 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010341a <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c010341a:	6a 00                	push   $0x0
+  pushl $203
+c010341c:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c0103421:	e9 70 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103426 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c0103426:	6a 00                	push   $0x0
+  pushl $204
+c0103428:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c010342d:	e9 64 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103432 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c0103432:	6a 00                	push   $0x0
+  pushl $205
+c0103434:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c0103439:	e9 58 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010343e <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c010343e:	6a 00                	push   $0x0
+  pushl $206
+c0103440:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c0103445:	e9 4c 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010344a <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c010344a:	6a 00                	push   $0x0
+  pushl $207
+c010344c:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c0103451:	e9 40 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103456 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c0103456:	6a 00                	push   $0x0
+  pushl $208
+c0103458:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c010345d:	e9 34 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103462 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c0103462:	6a 00                	push   $0x0
+  pushl $209
+c0103464:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c0103469:	e9 28 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010346e <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c010346e:	6a 00                	push   $0x0
+  pushl $210
+c0103470:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c0103475:	e9 1c 02 00 00       	jmp    c0103696 <__alltraps>
+
+c010347a <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c010347a:	6a 00                	push   $0x0
+  pushl $211
+c010347c:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c0103481:	e9 10 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103486 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c0103486:	6a 00                	push   $0x0
+  pushl $212
+c0103488:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c010348d:	e9 04 02 00 00       	jmp    c0103696 <__alltraps>
+
+c0103492 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c0103492:	6a 00                	push   $0x0
+  pushl $213
+c0103494:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c0103499:	e9 f8 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010349e <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c010349e:	6a 00                	push   $0x0
+  pushl $214
+c01034a0:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c01034a5:	e9 ec 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034aa <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c01034aa:	6a 00                	push   $0x0
+  pushl $215
+c01034ac:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c01034b1:	e9 e0 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034b6 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c01034b6:	6a 00                	push   $0x0
+  pushl $216
+c01034b8:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c01034bd:	e9 d4 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034c2 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c01034c2:	6a 00                	push   $0x0
+  pushl $217
+c01034c4:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c01034c9:	e9 c8 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034ce <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c01034ce:	6a 00                	push   $0x0
+  pushl $218
+c01034d0:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c01034d5:	e9 bc 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034da <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c01034da:	6a 00                	push   $0x0
+  pushl $219
+c01034dc:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c01034e1:	e9 b0 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034e6 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c01034e6:	6a 00                	push   $0x0
+  pushl $220
+c01034e8:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c01034ed:	e9 a4 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034f2 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c01034f2:	6a 00                	push   $0x0
+  pushl $221
+c01034f4:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c01034f9:	e9 98 01 00 00       	jmp    c0103696 <__alltraps>
+
+c01034fe <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c01034fe:	6a 00                	push   $0x0
+  pushl $222
+c0103500:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c0103505:	e9 8c 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010350a <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c010350a:	6a 00                	push   $0x0
+  pushl $223
+c010350c:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c0103511:	e9 80 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103516 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c0103516:	6a 00                	push   $0x0
+  pushl $224
+c0103518:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c010351d:	e9 74 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103522 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c0103522:	6a 00                	push   $0x0
+  pushl $225
+c0103524:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c0103529:	e9 68 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010352e <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c010352e:	6a 00                	push   $0x0
+  pushl $226
+c0103530:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c0103535:	e9 5c 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010353a <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c010353a:	6a 00                	push   $0x0
+  pushl $227
+c010353c:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c0103541:	e9 50 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103546 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c0103546:	6a 00                	push   $0x0
+  pushl $228
+c0103548:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c010354d:	e9 44 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103552 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c0103552:	6a 00                	push   $0x0
+  pushl $229
+c0103554:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c0103559:	e9 38 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010355e <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c010355e:	6a 00                	push   $0x0
+  pushl $230
+c0103560:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c0103565:	e9 2c 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010356a <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c010356a:	6a 00                	push   $0x0
+  pushl $231
+c010356c:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c0103571:	e9 20 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103576 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c0103576:	6a 00                	push   $0x0
+  pushl $232
+c0103578:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c010357d:	e9 14 01 00 00       	jmp    c0103696 <__alltraps>
+
+c0103582 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c0103582:	6a 00                	push   $0x0
+  pushl $233
+c0103584:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c0103589:	e9 08 01 00 00       	jmp    c0103696 <__alltraps>
+
+c010358e <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c010358e:	6a 00                	push   $0x0
+  pushl $234
+c0103590:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c0103595:	e9 fc 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010359a <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c010359a:	6a 00                	push   $0x0
+  pushl $235
+c010359c:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c01035a1:	e9 f0 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035a6 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c01035a6:	6a 00                	push   $0x0
+  pushl $236
+c01035a8:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c01035ad:	e9 e4 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035b2 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c01035b2:	6a 00                	push   $0x0
+  pushl $237
+c01035b4:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c01035b9:	e9 d8 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035be <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c01035be:	6a 00                	push   $0x0
+  pushl $238
+c01035c0:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c01035c5:	e9 cc 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035ca <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c01035ca:	6a 00                	push   $0x0
+  pushl $239
+c01035cc:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c01035d1:	e9 c0 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035d6 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c01035d6:	6a 00                	push   $0x0
+  pushl $240
+c01035d8:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c01035dd:	e9 b4 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035e2 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c01035e2:	6a 00                	push   $0x0
+  pushl $241
+c01035e4:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c01035e9:	e9 a8 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035ee <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c01035ee:	6a 00                	push   $0x0
+  pushl $242
+c01035f0:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c01035f5:	e9 9c 00 00 00       	jmp    c0103696 <__alltraps>
+
+c01035fa <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c01035fa:	6a 00                	push   $0x0
+  pushl $243
+c01035fc:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c0103601:	e9 90 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103606 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c0103606:	6a 00                	push   $0x0
+  pushl $244
+c0103608:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c010360d:	e9 84 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103612 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c0103612:	6a 00                	push   $0x0
+  pushl $245
+c0103614:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c0103619:	e9 78 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010361e <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c010361e:	6a 00                	push   $0x0
+  pushl $246
+c0103620:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c0103625:	e9 6c 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010362a <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c010362a:	6a 00                	push   $0x0
+  pushl $247
+c010362c:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c0103631:	e9 60 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103636 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c0103636:	6a 00                	push   $0x0
+  pushl $248
+c0103638:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c010363d:	e9 54 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103642 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c0103642:	6a 00                	push   $0x0
+  pushl $249
+c0103644:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c0103649:	e9 48 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010364e <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c010364e:	6a 00                	push   $0x0
+  pushl $250
+c0103650:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c0103655:	e9 3c 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010365a <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c010365a:	6a 00                	push   $0x0
+  pushl $251
+c010365c:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c0103661:	e9 30 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103666 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c0103666:	6a 00                	push   $0x0
+  pushl $252
+c0103668:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c010366d:	e9 24 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103672 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c0103672:	6a 00                	push   $0x0
+  pushl $253
+c0103674:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c0103679:	e9 18 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010367e <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c010367e:	6a 00                	push   $0x0
+  pushl $254
+c0103680:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c0103685:	e9 0c 00 00 00       	jmp    c0103696 <__alltraps>
+
+c010368a <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c010368a:	6a 00                	push   $0x0
+  pushl $255
+c010368c:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c0103691:	e9 00 00 00 00       	jmp    c0103696 <__alltraps>
+
+c0103696 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0103696:	1e                   	push   %ds
+    pushl %es
+c0103697:	06                   	push   %es
+    pushl %fs
+c0103698:	0f a0                	push   %fs
+    pushl %gs
+c010369a:	0f a8                	push   %gs
+    pushal
+c010369c:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c010369d:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c01036a2:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c01036a4:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c01036a6:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c01036a7:	e8 ed f4 ff ff       	call   c0102b99 <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c01036ac:	5c                   	pop    %esp
+
+c01036ad <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c01036ad:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c01036ae:	0f a9                	pop    %gs
+    popl %fs
+c01036b0:	0f a1                	pop    %fs
+    popl %es
+c01036b2:	07                   	pop    %es
+    popl %ds
+c01036b3:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c01036b4:	83 c4 08             	add    $0x8,%esp
+    iret
+c01036b7:	cf                   	iret   
+
+c01036b8 <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c01036b8:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c01036bc:	eb ef                	jmp    c01036ad <__trapret>
+
+c01036be <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01036be:	55                   	push   %ebp
+c01036bf:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01036c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036c4:	8b 15 d8 70 1b c0    	mov    0xc01b70d8,%edx
+c01036ca:	29 d0                	sub    %edx,%eax
+c01036cc:	c1 f8 05             	sar    $0x5,%eax
+}
+c01036cf:	5d                   	pop    %ebp
+c01036d0:	c3                   	ret    
+
+c01036d1 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01036d1:	55                   	push   %ebp
+c01036d2:	89 e5                	mov    %esp,%ebp
+c01036d4:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01036d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036da:	89 04 24             	mov    %eax,(%esp)
+c01036dd:	e8 dc ff ff ff       	call   c01036be <page2ppn>
+c01036e2:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01036e5:	c9                   	leave  
+c01036e6:	c3                   	ret    
+
+c01036e7 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01036e7:	55                   	push   %ebp
+c01036e8:	89 e5                	mov    %esp,%ebp
+c01036ea:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c01036ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036f0:	c1 e8 0c             	shr    $0xc,%eax
+c01036f3:	89 c2                	mov    %eax,%edx
+c01036f5:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c01036fa:	39 c2                	cmp    %eax,%edx
+c01036fc:	72 1c                	jb     c010371a <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c01036fe:	c7 44 24 08 b0 d0 10 	movl   $0xc010d0b0,0x8(%esp)
+c0103705:	c0 
+c0103706:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c010370d:	00 
+c010370e:	c7 04 24 cf d0 10 c0 	movl   $0xc010d0cf,(%esp)
+c0103715:	e8 eb cc ff ff       	call   c0100405 <__panic>
+    }
+    return &pages[PPN(pa)];
+c010371a:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c010371f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103722:	c1 ea 0c             	shr    $0xc,%edx
+c0103725:	c1 e2 05             	shl    $0x5,%edx
+c0103728:	01 d0                	add    %edx,%eax
+}
+c010372a:	c9                   	leave  
+c010372b:	c3                   	ret    
+
+c010372c <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c010372c:	55                   	push   %ebp
+c010372d:	89 e5                	mov    %esp,%ebp
+c010372f:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0103732:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103735:	89 04 24             	mov    %eax,(%esp)
+c0103738:	e8 94 ff ff ff       	call   c01036d1 <page2pa>
+c010373d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103740:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103743:	c1 e8 0c             	shr    $0xc,%eax
+c0103746:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103749:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c010374e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0103751:	72 23                	jb     c0103776 <page2kva+0x4a>
+c0103753:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103756:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010375a:	c7 44 24 08 e0 d0 10 	movl   $0xc010d0e0,0x8(%esp)
+c0103761:	c0 
+c0103762:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0103769:	00 
+c010376a:	c7 04 24 cf d0 10 c0 	movl   $0xc010d0cf,(%esp)
+c0103771:	e8 8f cc ff ff       	call   c0100405 <__panic>
+c0103776:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103779:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c010377e:	c9                   	leave  
+c010377f:	c3                   	ret    
+
+c0103780 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0103780:	55                   	push   %ebp
+c0103781:	89 e5                	mov    %esp,%ebp
+c0103783:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0103786:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103789:	83 e0 01             	and    $0x1,%eax
+c010378c:	85 c0                	test   %eax,%eax
+c010378e:	75 1c                	jne    c01037ac <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c0103790:	c7 44 24 08 04 d1 10 	movl   $0xc010d104,0x8(%esp)
+c0103797:	c0 
+c0103798:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c010379f:	00 
+c01037a0:	c7 04 24 cf d0 10 c0 	movl   $0xc010d0cf,(%esp)
+c01037a7:	e8 59 cc ff ff       	call   c0100405 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c01037ac:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01037b4:	89 04 24             	mov    %eax,(%esp)
+c01037b7:	e8 2b ff ff ff       	call   c01036e7 <pa2page>
+}
+c01037bc:	c9                   	leave  
+c01037bd:	c3                   	ret    
+
+c01037be <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c01037be:	55                   	push   %ebp
+c01037bf:	89 e5                	mov    %esp,%ebp
+c01037c1:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c01037c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01037cc:	89 04 24             	mov    %eax,(%esp)
+c01037cf:	e8 13 ff ff ff       	call   c01036e7 <pa2page>
+}
+c01037d4:	c9                   	leave  
+c01037d5:	c3                   	ret    
+
+c01037d6 <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c01037d6:	55                   	push   %ebp
+c01037d7:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01037d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037dc:	8b 00                	mov    (%eax),%eax
+}
+c01037de:	5d                   	pop    %ebp
+c01037df:	c3                   	ret    
+
+c01037e0 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c01037e0:	55                   	push   %ebp
+c01037e1:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c01037e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037e6:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01037e9:	89 10                	mov    %edx,(%eax)
+}
+c01037eb:	90                   	nop
+c01037ec:	5d                   	pop    %ebp
+c01037ed:	c3                   	ret    
+
+c01037ee <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c01037ee:	55                   	push   %ebp
+c01037ef:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c01037f1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037f4:	8b 00                	mov    (%eax),%eax
+c01037f6:	8d 50 01             	lea    0x1(%eax),%edx
+c01037f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01037fc:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c01037fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103801:	8b 00                	mov    (%eax),%eax
+}
+c0103803:	5d                   	pop    %ebp
+c0103804:	c3                   	ret    
+
+c0103805 <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c0103805:	55                   	push   %ebp
+c0103806:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0103808:	8b 45 08             	mov    0x8(%ebp),%eax
+c010380b:	8b 00                	mov    (%eax),%eax
+c010380d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0103810:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103813:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0103815:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103818:	8b 00                	mov    (%eax),%eax
+}
+c010381a:	5d                   	pop    %ebp
+c010381b:	c3                   	ret    
+
+c010381c <__intr_save>:
+__intr_save(void) {
+c010381c:	55                   	push   %ebp
+c010381d:	89 e5                	mov    %esp,%ebp
+c010381f:	83 ec 18             	sub    $0x18,%esp
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0103822:	9c                   	pushf  
+c0103823:	58                   	pop    %eax
+c0103824:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0103827:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010382a:	25 00 02 00 00       	and    $0x200,%eax
+c010382f:	85 c0                	test   %eax,%eax
+c0103831:	74 0c                	je     c010383f <__intr_save+0x23>
+        intr_disable();
+c0103833:	e8 b8 e9 ff ff       	call   c01021f0 <intr_disable>
+        return 1;
+c0103838:	b8 01 00 00 00       	mov    $0x1,%eax
+c010383d:	eb 05                	jmp    c0103844 <__intr_save+0x28>
+    return 0;
+c010383f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0103844:	c9                   	leave  
+c0103845:	c3                   	ret    
+
+c0103846 <__intr_restore>:
+__intr_restore(bool flag) {
+c0103846:	55                   	push   %ebp
+c0103847:	89 e5                	mov    %esp,%ebp
+c0103849:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010384c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0103850:	74 05                	je     c0103857 <__intr_restore+0x11>
+        intr_enable();
+c0103852:	e8 92 e9 ff ff       	call   c01021e9 <intr_enable>
+}
+c0103857:	90                   	nop
+c0103858:	c9                   	leave  
+c0103859:	c3                   	ret    
+
+c010385a <lgdt>:
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd)
+{
+c010385a:	55                   	push   %ebp
+c010385b:	89 e5                	mov    %esp,%ebp
+    asm volatile("lgdt (%0)" ::"r"(pd));
+c010385d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103860:	0f 01 10             	lgdtl  (%eax)
+    asm volatile("movw %%ax, %%gs" ::"a"(USER_DS));
+c0103863:	b8 23 00 00 00       	mov    $0x23,%eax
+c0103868:	8e e8                	mov    %eax,%gs
+    asm volatile("movw %%ax, %%fs" ::"a"(USER_DS));
+c010386a:	b8 23 00 00 00       	mov    $0x23,%eax
+c010386f:	8e e0                	mov    %eax,%fs
+    asm volatile("movw %%ax, %%es" ::"a"(KERNEL_DS));
+c0103871:	b8 10 00 00 00       	mov    $0x10,%eax
+c0103876:	8e c0                	mov    %eax,%es
+    asm volatile("movw %%ax, %%ds" ::"a"(KERNEL_DS));
+c0103878:	b8 10 00 00 00       	mov    $0x10,%eax
+c010387d:	8e d8                	mov    %eax,%ds
+    asm volatile("movw %%ax, %%ss" ::"a"(KERNEL_DS));
+c010387f:	b8 10 00 00 00       	mov    $0x10,%eax
+c0103884:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile("ljmp %0, $1f\n 1:\n" ::"i"(KERNEL_CS));
+c0103886:	ea 8d 38 10 c0 08 00 	ljmp   $0x8,$0xc010388d
+}
+c010388d:	90                   	nop
+c010388e:	5d                   	pop    %ebp
+c010388f:	c3                   	ret    
+
+c0103890 <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void load_esp0(uintptr_t esp0)
+{
+c0103890:	55                   	push   %ebp
+c0103891:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c0103893:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103896:	a3 a4 4f 1b c0       	mov    %eax,0xc01b4fa4
+}
+c010389b:	90                   	nop
+c010389c:	5d                   	pop    %ebp
+c010389d:	c3                   	ret    
+
+c010389e <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void)
+{
+c010389e:	55                   	push   %ebp
+c010389f:	89 e5                	mov    %esp,%ebp
+c01038a1:	83 ec 14             	sub    $0x14,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c01038a4:	b8 00 e0 12 c0       	mov    $0xc012e000,%eax
+c01038a9:	89 04 24             	mov    %eax,(%esp)
+c01038ac:	e8 df ff ff ff       	call   c0103890 <load_esp0>
+    ts.ts_ss0 = KERNEL_DS;
+c01038b1:	66 c7 05 a8 4f 1b c0 	movw   $0x10,0xc01b4fa8
+c01038b8:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c01038ba:	66 c7 05 28 ea 12 c0 	movw   $0x68,0xc012ea28
+c01038c1:	68 00 
+c01038c3:	b8 a0 4f 1b c0       	mov    $0xc01b4fa0,%eax
+c01038c8:	0f b7 c0             	movzwl %ax,%eax
+c01038cb:	66 a3 2a ea 12 c0    	mov    %ax,0xc012ea2a
+c01038d1:	b8 a0 4f 1b c0       	mov    $0xc01b4fa0,%eax
+c01038d6:	c1 e8 10             	shr    $0x10,%eax
+c01038d9:	a2 2c ea 12 c0       	mov    %al,0xc012ea2c
+c01038de:	0f b6 05 2d ea 12 c0 	movzbl 0xc012ea2d,%eax
+c01038e5:	24 f0                	and    $0xf0,%al
+c01038e7:	0c 09                	or     $0x9,%al
+c01038e9:	a2 2d ea 12 c0       	mov    %al,0xc012ea2d
+c01038ee:	0f b6 05 2d ea 12 c0 	movzbl 0xc012ea2d,%eax
+c01038f5:	24 ef                	and    $0xef,%al
+c01038f7:	a2 2d ea 12 c0       	mov    %al,0xc012ea2d
+c01038fc:	0f b6 05 2d ea 12 c0 	movzbl 0xc012ea2d,%eax
+c0103903:	24 9f                	and    $0x9f,%al
+c0103905:	a2 2d ea 12 c0       	mov    %al,0xc012ea2d
+c010390a:	0f b6 05 2d ea 12 c0 	movzbl 0xc012ea2d,%eax
+c0103911:	0c 80                	or     $0x80,%al
+c0103913:	a2 2d ea 12 c0       	mov    %al,0xc012ea2d
+c0103918:	0f b6 05 2e ea 12 c0 	movzbl 0xc012ea2e,%eax
+c010391f:	24 f0                	and    $0xf0,%al
+c0103921:	a2 2e ea 12 c0       	mov    %al,0xc012ea2e
+c0103926:	0f b6 05 2e ea 12 c0 	movzbl 0xc012ea2e,%eax
+c010392d:	24 ef                	and    $0xef,%al
+c010392f:	a2 2e ea 12 c0       	mov    %al,0xc012ea2e
+c0103934:	0f b6 05 2e ea 12 c0 	movzbl 0xc012ea2e,%eax
+c010393b:	24 df                	and    $0xdf,%al
+c010393d:	a2 2e ea 12 c0       	mov    %al,0xc012ea2e
+c0103942:	0f b6 05 2e ea 12 c0 	movzbl 0xc012ea2e,%eax
+c0103949:	0c 40                	or     $0x40,%al
+c010394b:	a2 2e ea 12 c0       	mov    %al,0xc012ea2e
+c0103950:	0f b6 05 2e ea 12 c0 	movzbl 0xc012ea2e,%eax
+c0103957:	24 7f                	and    $0x7f,%al
+c0103959:	a2 2e ea 12 c0       	mov    %al,0xc012ea2e
+c010395e:	b8 a0 4f 1b c0       	mov    $0xc01b4fa0,%eax
+c0103963:	c1 e8 18             	shr    $0x18,%eax
+c0103966:	a2 2f ea 12 c0       	mov    %al,0xc012ea2f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c010396b:	c7 04 24 30 ea 12 c0 	movl   $0xc012ea30,(%esp)
+c0103972:	e8 e3 fe ff ff       	call   c010385a <lgdt>
+c0103977:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c010397d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0103981:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0103984:	90                   	nop
+c0103985:	c9                   	leave  
+c0103986:	c3                   	ret    
+
+c0103987 <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void)
+{
+c0103987:	55                   	push   %ebp
+c0103988:	89 e5                	mov    %esp,%ebp
+c010398a:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager = &default_pmm_manager;
+c010398d:	c7 05 d0 70 1b c0 b8 	movl   $0xc010e6b8,0xc01b70d0
+c0103994:	e6 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c0103997:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c010399c:	8b 00                	mov    (%eax),%eax
+c010399e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01039a2:	c7 04 24 30 d1 10 c0 	movl   $0xc010d130,(%esp)
+c01039a9:	e8 00 c9 ff ff       	call   c01002ae <cprintf>
+    pmm_manager->init();
+c01039ae:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c01039b3:	8b 40 04             	mov    0x4(%eax),%eax
+c01039b6:	ff d0                	call   *%eax
+}
+c01039b8:	90                   	nop
+c01039b9:	c9                   	leave  
+c01039ba:	c3                   	ret    
+
+c01039bb <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory
+static void
+init_memmap(struct Page *base, size_t n)
+{
+c01039bb:	55                   	push   %ebp
+c01039bc:	89 e5                	mov    %esp,%ebp
+c01039be:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->init_memmap(base, n);
+c01039c1:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c01039c6:	8b 40 08             	mov    0x8(%eax),%eax
+c01039c9:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01039cc:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01039d0:	8b 55 08             	mov    0x8(%ebp),%edx
+c01039d3:	89 14 24             	mov    %edx,(%esp)
+c01039d6:	ff d0                	call   *%eax
+}
+c01039d8:	90                   	nop
+c01039d9:	c9                   	leave  
+c01039da:	c3                   	ret    
+
+c01039db <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory
+struct Page *
+alloc_pages(size_t n)
+{
+c01039db:	55                   	push   %ebp
+c01039dc:	89 e5                	mov    %esp,%ebp
+c01039de:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = NULL;
+c01039e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+
+    while (1)
+    {
+        local_intr_save(intr_flag);
+c01039e8:	e8 2f fe ff ff       	call   c010381c <__intr_save>
+c01039ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        {
+            page = pmm_manager->alloc_pages(n);
+c01039f0:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c01039f5:	8b 40 0c             	mov    0xc(%eax),%eax
+c01039f8:	8b 55 08             	mov    0x8(%ebp),%edx
+c01039fb:	89 14 24             	mov    %edx,(%esp)
+c01039fe:	ff d0                	call   *%eax
+c0103a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        local_intr_restore(intr_flag);
+c0103a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103a06:	89 04 24             	mov    %eax,(%esp)
+c0103a09:	e8 38 fe ff ff       	call   c0103846 <__intr_restore>
+
+        if (page != NULL || n > 1 || swap_init_ok == 0)
+c0103a0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103a12:	75 2d                	jne    c0103a41 <alloc_pages+0x66>
+c0103a14:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c0103a18:	77 27                	ja     c0103a41 <alloc_pages+0x66>
+c0103a1a:	a1 14 50 1b c0       	mov    0xc01b5014,%eax
+c0103a1f:	85 c0                	test   %eax,%eax
+c0103a21:	74 1e                	je     c0103a41 <alloc_pages+0x66>
+            break;
+
+        extern struct mm_struct *check_mm_struct;
+        //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+        swap_out(check_mm_struct, n, 0);
+c0103a23:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103a26:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c0103a2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0103a32:	00 
+c0103a33:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0103a37:	89 04 24             	mov    %eax,(%esp)
+c0103a3a:	e8 b6 3b 00 00       	call   c01075f5 <swap_out>
+    {
+c0103a3f:	eb a7                	jmp    c01039e8 <alloc_pages+0xd>
+    }
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c0103a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0103a44:	c9                   	leave  
+c0103a45:	c3                   	ret    
+
+c0103a46 <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory
+void free_pages(struct Page *base, size_t n)
+{
+c0103a46:	55                   	push   %ebp
+c0103a47:	89 e5                	mov    %esp,%ebp
+c0103a49:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0103a4c:	e8 cb fd ff ff       	call   c010381c <__intr_save>
+c0103a51:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c0103a54:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c0103a59:	8b 40 10             	mov    0x10(%eax),%eax
+c0103a5c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0103a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0103a63:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103a66:	89 14 24             	mov    %edx,(%esp)
+c0103a69:	ff d0                	call   *%eax
+    }
+    local_intr_restore(intr_flag);
+c0103a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a6e:	89 04 24             	mov    %eax,(%esp)
+c0103a71:	e8 d0 fd ff ff       	call   c0103846 <__intr_restore>
+}
+c0103a76:	90                   	nop
+c0103a77:	c9                   	leave  
+c0103a78:	c3                   	ret    
+
+c0103a79 <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE)
+//of current free memory
+size_t
+nr_free_pages(void)
+{
+c0103a79:	55                   	push   %ebp
+c0103a7a:	89 e5                	mov    %esp,%ebp
+c0103a7c:	83 ec 28             	sub    $0x28,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0103a7f:	e8 98 fd ff ff       	call   c010381c <__intr_save>
+c0103a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c0103a87:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c0103a8c:	8b 40 14             	mov    0x14(%eax),%eax
+c0103a8f:	ff d0                	call   *%eax
+c0103a91:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0103a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a97:	89 04 24             	mov    %eax,(%esp)
+c0103a9a:	e8 a7 fd ff ff       	call   c0103846 <__intr_restore>
+    return ret;
+c0103a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0103aa2:	c9                   	leave  
+c0103aa3:	c3                   	ret    
+
+c0103aa4 <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void)
+{
+c0103aa4:	55                   	push   %ebp
+c0103aa5:	89 e5                	mov    %esp,%ebp
+c0103aa7:	57                   	push   %edi
+c0103aa8:	56                   	push   %esi
+c0103aa9:	53                   	push   %ebx
+c0103aaa:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0103ab0:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c0103ab7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c0103abe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c0103ac5:	c7 04 24 47 d1 10 c0 	movl   $0xc010d147,(%esp)
+c0103acc:	e8 dd c7 ff ff       	call   c01002ae <cprintf>
+    int i;
+    for (i = 0; i < memmap->nr_map; i++)
+c0103ad1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103ad8:	e9 22 01 00 00       	jmp    c0103bff <page_init+0x15b>
+    {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103add:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103ae0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103ae3:	89 d0                	mov    %edx,%eax
+c0103ae5:	c1 e0 02             	shl    $0x2,%eax
+c0103ae8:	01 d0                	add    %edx,%eax
+c0103aea:	c1 e0 02             	shl    $0x2,%eax
+c0103aed:	01 c8                	add    %ecx,%eax
+c0103aef:	8b 50 08             	mov    0x8(%eax),%edx
+c0103af2:	8b 40 04             	mov    0x4(%eax),%eax
+c0103af5:	89 45 a0             	mov    %eax,-0x60(%ebp)
+c0103af8:	89 55 a4             	mov    %edx,-0x5c(%ebp)
+c0103afb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103afe:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b01:	89 d0                	mov    %edx,%eax
+c0103b03:	c1 e0 02             	shl    $0x2,%eax
+c0103b06:	01 d0                	add    %edx,%eax
+c0103b08:	c1 e0 02             	shl    $0x2,%eax
+c0103b0b:	01 c8                	add    %ecx,%eax
+c0103b0d:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0103b10:	8b 58 10             	mov    0x10(%eax),%ebx
+c0103b13:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103b16:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0103b19:	01 c8                	add    %ecx,%eax
+c0103b1b:	11 da                	adc    %ebx,%edx
+c0103b1d:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103b20:	89 55 9c             	mov    %edx,-0x64(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c0103b23:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b26:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b29:	89 d0                	mov    %edx,%eax
+c0103b2b:	c1 e0 02             	shl    $0x2,%eax
+c0103b2e:	01 d0                	add    %edx,%eax
+c0103b30:	c1 e0 02             	shl    $0x2,%eax
+c0103b33:	01 c8                	add    %ecx,%eax
+c0103b35:	83 c0 14             	add    $0x14,%eax
+c0103b38:	8b 00                	mov    (%eax),%eax
+c0103b3a:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c0103b3d:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103b40:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0103b43:	83 c0 ff             	add    $0xffffffff,%eax
+c0103b46:	83 d2 ff             	adc    $0xffffffff,%edx
+c0103b49:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
+c0103b4f:	89 95 7c ff ff ff    	mov    %edx,-0x84(%ebp)
+c0103b55:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b58:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b5b:	89 d0                	mov    %edx,%eax
+c0103b5d:	c1 e0 02             	shl    $0x2,%eax
+c0103b60:	01 d0                	add    %edx,%eax
+c0103b62:	c1 e0 02             	shl    $0x2,%eax
+c0103b65:	01 c8                	add    %ecx,%eax
+c0103b67:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0103b6a:	8b 58 10             	mov    0x10(%eax),%ebx
+c0103b6d:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0103b70:	89 54 24 1c          	mov    %edx,0x1c(%esp)
+c0103b74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
+c0103b7a:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
+c0103b80:	89 44 24 14          	mov    %eax,0x14(%esp)
+c0103b84:	89 54 24 18          	mov    %edx,0x18(%esp)
+c0103b88:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103b8b:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0103b8e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0103b92:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0103b96:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0103b9a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+c0103b9e:	c7 04 24 54 d1 10 c0 	movl   $0xc010d154,(%esp)
+c0103ba5:	e8 04 c7 ff ff       	call   c01002ae <cprintf>
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM)
+c0103baa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103bad:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103bb0:	89 d0                	mov    %edx,%eax
+c0103bb2:	c1 e0 02             	shl    $0x2,%eax
+c0103bb5:	01 d0                	add    %edx,%eax
+c0103bb7:	c1 e0 02             	shl    $0x2,%eax
+c0103bba:	01 c8                	add    %ecx,%eax
+c0103bbc:	83 c0 14             	add    $0x14,%eax
+c0103bbf:	8b 00                	mov    (%eax),%eax
+c0103bc1:	83 f8 01             	cmp    $0x1,%eax
+c0103bc4:	75 36                	jne    c0103bfc <page_init+0x158>
+        {
+            if (maxpa < end && begin < KMEMSIZE)
+c0103bc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103bc9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103bcc:	3b 55 9c             	cmp    -0x64(%ebp),%edx
+c0103bcf:	77 2b                	ja     c0103bfc <page_init+0x158>
+c0103bd1:	3b 55 9c             	cmp    -0x64(%ebp),%edx
+c0103bd4:	72 05                	jb     c0103bdb <page_init+0x137>
+c0103bd6:	3b 45 98             	cmp    -0x68(%ebp),%eax
+c0103bd9:	73 21                	jae    c0103bfc <page_init+0x158>
+c0103bdb:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0103bdf:	77 1b                	ja     c0103bfc <page_init+0x158>
+c0103be1:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0103be5:	72 09                	jb     c0103bf0 <page_init+0x14c>
+c0103be7:	81 7d a0 ff ff ff 37 	cmpl   $0x37ffffff,-0x60(%ebp)
+c0103bee:	77 0c                	ja     c0103bfc <page_init+0x158>
+            {
+                maxpa = end;
+c0103bf0:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103bf3:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0103bf6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0103bf9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    for (i = 0; i < memmap->nr_map; i++)
+c0103bfc:	ff 45 dc             	incl   -0x24(%ebp)
+c0103bff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103c02:	8b 00                	mov    (%eax),%eax
+c0103c04:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0103c07:	0f 8c d0 fe ff ff    	jl     c0103add <page_init+0x39>
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE)
+c0103c0d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103c11:	72 1d                	jb     c0103c30 <page_init+0x18c>
+c0103c13:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103c17:	77 09                	ja     c0103c22 <page_init+0x17e>
+c0103c19:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c0103c20:	76 0e                	jbe    c0103c30 <page_init+0x18c>
+    {
+        maxpa = KMEMSIZE;
+c0103c22:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c0103c29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c0103c30:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103c33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103c36:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103c3a:	c1 ea 0c             	shr    $0xc,%edx
+c0103c3d:	89 c1                	mov    %eax,%ecx
+c0103c3f:	89 d3                	mov    %edx,%ebx
+c0103c41:	89 c8                	mov    %ecx,%eax
+c0103c43:	a3 80 4f 1b c0       	mov    %eax,0xc01b4f80
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c0103c48:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
+c0103c4f:	b8 d8 71 1b c0       	mov    $0xc01b71d8,%eax
+c0103c54:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0103c57:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0103c5a:	01 d0                	add    %edx,%eax
+c0103c5c:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c0103c5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0103c62:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c67:	f7 75 c0             	divl   -0x40(%ebp)
+c0103c6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0103c6d:	29 d0                	sub    %edx,%eax
+c0103c6f:	a3 d8 70 1b c0       	mov    %eax,0xc01b70d8
+
+    for (i = 0; i < npage; i++)
+c0103c74:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103c7b:	eb 26                	jmp    c0103ca3 <page_init+0x1ff>
+    {
+        SetPageReserved(pages + i);
+c0103c7d:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c0103c82:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103c85:	c1 e2 05             	shl    $0x5,%edx
+c0103c88:	01 d0                	add    %edx,%eax
+c0103c8a:	83 c0 04             	add    $0x4,%eax
+c0103c8d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
+c0103c94:	89 45 90             	mov    %eax,-0x70(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103c97:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0103c9a:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c0103c9d:	0f ab 10             	bts    %edx,(%eax)
+    for (i = 0; i < npage; i++)
+c0103ca0:	ff 45 dc             	incl   -0x24(%ebp)
+c0103ca3:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103ca6:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0103cab:	39 c2                	cmp    %eax,%edx
+c0103cad:	72 ce                	jb     c0103c7d <page_init+0x1d9>
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0103caf:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0103cb4:	c1 e0 05             	shl    $0x5,%eax
+c0103cb7:	89 c2                	mov    %eax,%edx
+c0103cb9:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c0103cbe:	01 d0                	add    %edx,%eax
+c0103cc0:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0103cc3:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c0103cca:	77 23                	ja     c0103cef <page_init+0x24b>
+c0103ccc:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103ccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0103cd3:	c7 44 24 08 84 d1 10 	movl   $0xc010d184,0x8(%esp)
+c0103cda:	c0 
+c0103cdb:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
+c0103ce2:	00 
+c0103ce3:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0103cea:	e8 16 c7 ff ff       	call   c0100405 <__panic>
+c0103cef:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103cf2:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103cf7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+
+    for (i = 0; i < memmap->nr_map; i++)
+c0103cfa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103d01:	e9 69 01 00 00       	jmp    c0103e6f <page_init+0x3cb>
+    {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103d06:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103d09:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103d0c:	89 d0                	mov    %edx,%eax
+c0103d0e:	c1 e0 02             	shl    $0x2,%eax
+c0103d11:	01 d0                	add    %edx,%eax
+c0103d13:	c1 e0 02             	shl    $0x2,%eax
+c0103d16:	01 c8                	add    %ecx,%eax
+c0103d18:	8b 50 08             	mov    0x8(%eax),%edx
+c0103d1b:	8b 40 04             	mov    0x4(%eax),%eax
+c0103d1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103d21:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103d24:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103d27:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103d2a:	89 d0                	mov    %edx,%eax
+c0103d2c:	c1 e0 02             	shl    $0x2,%eax
+c0103d2f:	01 d0                	add    %edx,%eax
+c0103d31:	c1 e0 02             	shl    $0x2,%eax
+c0103d34:	01 c8                	add    %ecx,%eax
+c0103d36:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0103d39:	8b 58 10             	mov    0x10(%eax),%ebx
+c0103d3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103d3f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103d42:	01 c8                	add    %ecx,%eax
+c0103d44:	11 da                	adc    %ebx,%edx
+c0103d46:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103d49:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM)
+c0103d4c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103d4f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103d52:	89 d0                	mov    %edx,%eax
+c0103d54:	c1 e0 02             	shl    $0x2,%eax
+c0103d57:	01 d0                	add    %edx,%eax
+c0103d59:	c1 e0 02             	shl    $0x2,%eax
+c0103d5c:	01 c8                	add    %ecx,%eax
+c0103d5e:	83 c0 14             	add    $0x14,%eax
+c0103d61:	8b 00                	mov    (%eax),%eax
+c0103d63:	83 f8 01             	cmp    $0x1,%eax
+c0103d66:	0f 85 00 01 00 00    	jne    c0103e6c <page_init+0x3c8>
+        {
+            if (begin < freemem)
+c0103d6c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0103d6f:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103d74:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+c0103d77:	77 17                	ja     c0103d90 <page_init+0x2ec>
+c0103d79:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+c0103d7c:	72 05                	jb     c0103d83 <page_init+0x2df>
+c0103d7e:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+c0103d81:	73 0d                	jae    c0103d90 <page_init+0x2ec>
+            {
+                begin = freemem;
+c0103d83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0103d86:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103d89:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE)
+c0103d90:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103d94:	72 1d                	jb     c0103db3 <page_init+0x30f>
+c0103d96:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103d9a:	77 09                	ja     c0103da5 <page_init+0x301>
+c0103d9c:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0103da3:	76 0e                	jbe    c0103db3 <page_init+0x30f>
+            {
+                end = KMEMSIZE;
+c0103da5:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c0103dac:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end)
+c0103db3:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103db6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103db9:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103dbc:	0f 87 aa 00 00 00    	ja     c0103e6c <page_init+0x3c8>
+c0103dc2:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103dc5:	72 09                	jb     c0103dd0 <page_init+0x32c>
+c0103dc7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103dca:	0f 83 9c 00 00 00    	jae    c0103e6c <page_init+0x3c8>
+            {
+                begin = ROUNDUP(begin, PGSIZE);
+c0103dd0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
+c0103dd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103dda:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0103ddd:	01 d0                	add    %edx,%eax
+c0103ddf:	48                   	dec    %eax
+c0103de0:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c0103de3:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103de6:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103deb:	f7 75 b0             	divl   -0x50(%ebp)
+c0103dee:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103df1:	29 d0                	sub    %edx,%eax
+c0103df3:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103df8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103dfb:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c0103dfe:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103e01:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c0103e04:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103e07:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103e0c:	89 c3                	mov    %eax,%ebx
+c0103e0e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+c0103e14:	89 de                	mov    %ebx,%esi
+c0103e16:	89 d0                	mov    %edx,%eax
+c0103e18:	83 e0 00             	and    $0x0,%eax
+c0103e1b:	89 c7                	mov    %eax,%edi
+c0103e1d:	89 75 c8             	mov    %esi,-0x38(%ebp)
+c0103e20:	89 7d cc             	mov    %edi,-0x34(%ebp)
+                if (begin < end)
+c0103e23:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103e26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103e29:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103e2c:	77 3e                	ja     c0103e6c <page_init+0x3c8>
+c0103e2e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103e31:	72 05                	jb     c0103e38 <page_init+0x394>
+c0103e33:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103e36:	73 34                	jae    c0103e6c <page_init+0x3c8>
+                {
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c0103e38:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103e3b:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0103e3e:	2b 45 d0             	sub    -0x30(%ebp),%eax
+c0103e41:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
+c0103e44:	89 c1                	mov    %eax,%ecx
+c0103e46:	89 d3                	mov    %edx,%ebx
+c0103e48:	89 c8                	mov    %ecx,%eax
+c0103e4a:	89 da                	mov    %ebx,%edx
+c0103e4c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103e50:	c1 ea 0c             	shr    $0xc,%edx
+c0103e53:	89 c3                	mov    %eax,%ebx
+c0103e55:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103e58:	89 04 24             	mov    %eax,(%esp)
+c0103e5b:	e8 87 f8 ff ff       	call   c01036e7 <pa2page>
+c0103e60:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0103e64:	89 04 24             	mov    %eax,(%esp)
+c0103e67:	e8 4f fb ff ff       	call   c01039bb <init_memmap>
+    for (i = 0; i < memmap->nr_map; i++)
+c0103e6c:	ff 45 dc             	incl   -0x24(%ebp)
+c0103e6f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103e72:	8b 00                	mov    (%eax),%eax
+c0103e74:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0103e77:	0f 8c 89 fe ff ff    	jl     c0103d06 <page_init+0x262>
+                }
+            }
+        }
+    }
+}
+c0103e7d:	90                   	nop
+c0103e7e:	81 c4 9c 00 00 00    	add    $0x9c,%esp
+c0103e84:	5b                   	pop    %ebx
+c0103e85:	5e                   	pop    %esi
+c0103e86:	5f                   	pop    %edi
+c0103e87:	5d                   	pop    %ebp
+c0103e88:	c3                   	ret    
+
+c0103e89 <boot_map_segment>:
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm)
+{
+c0103e89:	55                   	push   %ebp
+c0103e8a:	89 e5                	mov    %esp,%ebp
+c0103e8c:	83 ec 38             	sub    $0x38,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c0103e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103e92:	33 45 14             	xor    0x14(%ebp),%eax
+c0103e95:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103e9a:	85 c0                	test   %eax,%eax
+c0103e9c:	74 24                	je     c0103ec2 <boot_map_segment+0x39>
+c0103e9e:	c7 44 24 0c b6 d1 10 	movl   $0xc010d1b6,0xc(%esp)
+c0103ea5:	c0 
+c0103ea6:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0103ead:	c0 
+c0103eae:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
+c0103eb5:	00 
+c0103eb6:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0103ebd:	e8 43 c5 ff ff       	call   c0100405 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c0103ec2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c0103ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103ecc:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103ed1:	89 c2                	mov    %eax,%edx
+c0103ed3:	8b 45 10             	mov    0x10(%ebp),%eax
+c0103ed6:	01 c2                	add    %eax,%edx
+c0103ed8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103edb:	01 d0                	add    %edx,%eax
+c0103edd:	48                   	dec    %eax
+c0103ede:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103ee4:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103ee9:	f7 75 f0             	divl   -0x10(%ebp)
+c0103eec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103eef:	29 d0                	sub    %edx,%eax
+c0103ef1:	c1 e8 0c             	shr    $0xc,%eax
+c0103ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0103ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103efa:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0103efd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103f00:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103f05:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0103f08:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103f0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0103f0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103f16:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n--, la += PGSIZE, pa += PGSIZE)
+c0103f19:	eb 68                	jmp    c0103f83 <boot_map_segment+0xfa>
+    {
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c0103f1b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0103f22:	00 
+c0103f23:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103f26:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0103f2a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103f2d:	89 04 24             	mov    %eax,(%esp)
+c0103f30:	e8 86 01 00 00       	call   c01040bb <get_pte>
+c0103f35:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c0103f38:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0103f3c:	75 24                	jne    c0103f62 <boot_map_segment+0xd9>
+c0103f3e:	c7 44 24 0c e2 d1 10 	movl   $0xc010d1e2,0xc(%esp)
+c0103f45:	c0 
+c0103f46:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0103f4d:	c0 
+c0103f4e:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
+c0103f55:	00 
+c0103f56:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0103f5d:	e8 a3 c4 ff ff       	call   c0100405 <__panic>
+        *ptep = pa | PTE_P | perm;
+c0103f62:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103f65:	0b 45 18             	or     0x18(%ebp),%eax
+c0103f68:	83 c8 01             	or     $0x1,%eax
+c0103f6b:	89 c2                	mov    %eax,%edx
+c0103f6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103f70:	89 10                	mov    %edx,(%eax)
+    for (; n > 0; n--, la += PGSIZE, pa += PGSIZE)
+c0103f72:	ff 4d f4             	decl   -0xc(%ebp)
+c0103f75:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c0103f7c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c0103f83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103f87:	75 92                	jne    c0103f1b <boot_map_segment+0x92>
+    }
+}
+c0103f89:	90                   	nop
+c0103f8a:	c9                   	leave  
+c0103f8b:	c3                   	ret    
+
+c0103f8c <boot_alloc_page>:
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1)
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void)
+{
+c0103f8c:	55                   	push   %ebp
+c0103f8d:	89 e5                	mov    %esp,%ebp
+c0103f8f:	83 ec 28             	sub    $0x28,%esp
+    struct Page *p = alloc_page();
+c0103f92:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0103f99:	e8 3d fa ff ff       	call   c01039db <alloc_pages>
+c0103f9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL)
+c0103fa1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103fa5:	75 1c                	jne    c0103fc3 <boot_alloc_page+0x37>
+    {
+        panic("boot_alloc_page failed.\n");
+c0103fa7:	c7 44 24 08 ef d1 10 	movl   $0xc010d1ef,0x8(%esp)
+c0103fae:	c0 
+c0103faf:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
+c0103fb6:	00 
+c0103fb7:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0103fbe:	e8 42 c4 ff ff       	call   c0100405 <__panic>
+    }
+    return page2kva(p);
+c0103fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103fc6:	89 04 24             	mov    %eax,(%esp)
+c0103fc9:	e8 5e f7 ff ff       	call   c010372c <page2kva>
+}
+c0103fce:	c9                   	leave  
+c0103fcf:	c3                   	ret    
+
+c0103fd0 <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void pmm_init(void)
+{
+c0103fd0:	55                   	push   %ebp
+c0103fd1:	89 e5                	mov    %esp,%ebp
+c0103fd3:	83 ec 38             	sub    $0x38,%esp
+    // We've already enabled paging
+    boot_cr3 = PADDR(boot_pgdir);
+c0103fd6:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0103fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103fde:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0103fe5:	77 23                	ja     c010400a <pmm_init+0x3a>
+c0103fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103fea:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0103fee:	c7 44 24 08 84 d1 10 	movl   $0xc010d184,0x8(%esp)
+c0103ff5:	c0 
+c0103ff6:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
+c0103ffd:	00 
+c0103ffe:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104005:	e8 fb c3 ff ff       	call   c0100405 <__panic>
+c010400a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010400d:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104012:	a3 d4 70 1b c0       	mov    %eax,0xc01b70d4
+    //We need to alloc/free the physical memory (granularity is 4KB or other size).
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory.
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c0104017:	e8 6b f9 ff ff       	call   c0103987 <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c010401c:	e8 83 fa ff ff       	call   c0103aa4 <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c0104021:	e8 d2 08 00 00       	call   c01048f8 <check_alloc_page>
+
+    check_pgdir();
+c0104026:	e8 ec 08 00 00       	call   c0104917 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c010402b:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104030:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104033:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c010403a:	77 23                	ja     c010405f <pmm_init+0x8f>
+c010403c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010403f:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104043:	c7 44 24 08 84 d1 10 	movl   $0xc010d184,0x8(%esp)
+c010404a:	c0 
+c010404b:	c7 44 24 04 50 01 00 	movl   $0x150,0x4(%esp)
+c0104052:	00 
+c0104053:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010405a:	e8 a6 c3 ff ff       	call   c0100405 <__panic>
+c010405f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104062:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c0104068:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c010406d:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0104072:	83 ca 03             	or     $0x3,%edx
+c0104075:	89 10                	mov    %edx,(%eax)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c0104077:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c010407c:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
+c0104083:	00 
+c0104084:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010408b:	00 
+c010408c:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
+c0104093:	38 
+c0104094:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+c010409b:	c0 
+c010409c:	89 04 24             	mov    %eax,(%esp)
+c010409f:	e8 e5 fd ff ff       	call   c0103e89 <boot_map_segment>
+
+    // Since we are using bootloader's GDT,
+    // we should reload gdt (second time, the last time) to get user segments and the TSS
+    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
+    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c01040a4:	e8 f5 f7 ff ff       	call   c010389e <gdt_init>
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c01040a9:	e8 05 0f 00 00       	call   c0104fb3 <check_boot_pgdir>
+
+    print_pgdir();
+c01040ae:	e8 7e 13 00 00       	call   c0105431 <print_pgdir>
+
+    kmalloc_init();
+c01040b3:	e8 f6 30 00 00       	call   c01071ae <kmalloc_init>
+}
+c01040b8:	90                   	nop
+c01040b9:	c9                   	leave  
+c01040ba:	c3                   	ret    
+
+c01040bb <get_pte>:
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create)
+{
+c01040bb:	55                   	push   %ebp
+c01040bc:	89 e5                	mov    %esp,%ebp
+c01040be:	83 ec 38             	sub    $0x38,%esp
+                          // (6) clear page content using memset
+                          // (7) set page directory entry's permission
+    }
+    return NULL;          // (8) return page table entry
+#endif
+    pde_t *pdep = &pgdir[PDX(la)];
+c01040c1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01040c4:	c1 e8 16             	shr    $0x16,%eax
+c01040c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01040ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01040d1:	01 d0                	add    %edx,%eax
+c01040d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!(*pdep & PTE_P))
+c01040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040d9:	8b 00                	mov    (%eax),%eax
+c01040db:	83 e0 01             	and    $0x1,%eax
+c01040de:	85 c0                	test   %eax,%eax
+c01040e0:	0f 85 af 00 00 00    	jne    c0104195 <get_pte+0xda>
+    {
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL)
+c01040e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01040ea:	74 15                	je     c0104101 <get_pte+0x46>
+c01040ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01040f3:	e8 e3 f8 ff ff       	call   c01039db <alloc_pages>
+c01040f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01040fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01040ff:	75 0a                	jne    c010410b <get_pte+0x50>
+        {
+            return NULL;
+c0104101:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104106:	e9 e7 00 00 00       	jmp    c01041f2 <get_pte+0x137>
+        }
+        set_page_ref(page, 1);
+c010410b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104112:	00 
+c0104113:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104116:	89 04 24             	mov    %eax,(%esp)
+c0104119:	e8 c2 f6 ff ff       	call   c01037e0 <set_page_ref>
+        uintptr_t pa = page2pa(page);
+c010411e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104121:	89 04 24             	mov    %eax,(%esp)
+c0104124:	e8 a8 f5 ff ff       	call   c01036d1 <page2pa>
+c0104129:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        memset(KADDR(pa), 0, PGSIZE);
+c010412c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010412f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104132:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104135:	c1 e8 0c             	shr    $0xc,%eax
+c0104138:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010413b:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0104140:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+c0104143:	72 23                	jb     c0104168 <get_pte+0xad>
+c0104145:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104148:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010414c:	c7 44 24 08 e0 d0 10 	movl   $0xc010d0e0,0x8(%esp)
+c0104153:	c0 
+c0104154:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
+c010415b:	00 
+c010415c:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104163:	e8 9d c2 ff ff       	call   c0100405 <__panic>
+c0104168:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010416b:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0104170:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0104177:	00 
+c0104178:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010417f:	00 
+c0104180:	89 04 24             	mov    %eax,(%esp)
+c0104183:	e8 b3 7c 00 00       	call   c010be3b <memset>
+        *pdep = pa | PTE_U | PTE_W | PTE_P;
+c0104188:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010418b:	83 c8 07             	or     $0x7,%eax
+c010418e:	89 c2                	mov    %eax,%edx
+c0104190:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104193:	89 10                	mov    %edx,(%eax)
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
+c0104195:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104198:	8b 00                	mov    (%eax),%eax
+c010419a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010419f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01041a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01041a5:	c1 e8 0c             	shr    $0xc,%eax
+c01041a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01041ab:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c01041b0:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c01041b3:	72 23                	jb     c01041d8 <get_pte+0x11d>
+c01041b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01041b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01041bc:	c7 44 24 08 e0 d0 10 	movl   $0xc010d0e0,0x8(%esp)
+c01041c3:	c0 
+c01041c4:	c7 44 24 04 9d 01 00 	movl   $0x19d,0x4(%esp)
+c01041cb:	00 
+c01041cc:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01041d3:	e8 2d c2 ff ff       	call   c0100405 <__panic>
+c01041d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01041db:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01041e0:	89 c2                	mov    %eax,%edx
+c01041e2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01041e5:	c1 e8 0c             	shr    $0xc,%eax
+c01041e8:	25 ff 03 00 00       	and    $0x3ff,%eax
+c01041ed:	c1 e0 02             	shl    $0x2,%eax
+c01041f0:	01 d0                	add    %edx,%eax
+}
+c01041f2:	c9                   	leave  
+c01041f3:	c3                   	ret    
+
+c01041f4 <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store)
+{
+c01041f4:	55                   	push   %ebp
+c01041f5:	89 e5                	mov    %esp,%ebp
+c01041f7:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c01041fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104201:	00 
+c0104202:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104205:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104209:	8b 45 08             	mov    0x8(%ebp),%eax
+c010420c:	89 04 24             	mov    %eax,(%esp)
+c010420f:	e8 a7 fe ff ff       	call   c01040bb <get_pte>
+c0104214:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL)
+c0104217:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010421b:	74 08                	je     c0104225 <get_page+0x31>
+    {
+        *ptep_store = ptep;
+c010421d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104220:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0104223:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P)
+c0104225:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104229:	74 1b                	je     c0104246 <get_page+0x52>
+c010422b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010422e:	8b 00                	mov    (%eax),%eax
+c0104230:	83 e0 01             	and    $0x1,%eax
+c0104233:	85 c0                	test   %eax,%eax
+c0104235:	74 0f                	je     c0104246 <get_page+0x52>
+    {
+        return pte2page(*ptep);
+c0104237:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010423a:	8b 00                	mov    (%eax),%eax
+c010423c:	89 04 24             	mov    %eax,(%esp)
+c010423f:	e8 3c f5 ff ff       	call   c0103780 <pte2page>
+c0104244:	eb 05                	jmp    c010424b <get_page+0x57>
+    }
+    return NULL;
+c0104246:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010424b:	c9                   	leave  
+c010424c:	c3                   	ret    
+
+c010424d <page_remove_pte>:
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep)
+{
+c010424d:	55                   	push   %ebp
+c010424e:	89 e5                	mov    %esp,%ebp
+c0104250:	83 ec 28             	sub    $0x28,%esp
+                                  //(4) and free this page when page reference reachs 0
+                                  //(5) clear second page table entry
+                                  //(6) flush tlb
+    }
+#endif
+    if (*ptep & PTE_P)
+c0104253:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104256:	8b 00                	mov    (%eax),%eax
+c0104258:	83 e0 01             	and    $0x1,%eax
+c010425b:	85 c0                	test   %eax,%eax
+c010425d:	74 4d                	je     c01042ac <page_remove_pte+0x5f>
+    {
+        struct Page *page = pte2page(*ptep);
+c010425f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104262:	8b 00                	mov    (%eax),%eax
+c0104264:	89 04 24             	mov    %eax,(%esp)
+c0104267:	e8 14 f5 ff ff       	call   c0103780 <pte2page>
+c010426c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (page_ref_dec(page) == 0)
+c010426f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104272:	89 04 24             	mov    %eax,(%esp)
+c0104275:	e8 8b f5 ff ff       	call   c0103805 <page_ref_dec>
+c010427a:	85 c0                	test   %eax,%eax
+c010427c:	75 13                	jne    c0104291 <page_remove_pte+0x44>
+        {
+            free_page(page);
+c010427e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104285:	00 
+c0104286:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104289:	89 04 24             	mov    %eax,(%esp)
+c010428c:	e8 b5 f7 ff ff       	call   c0103a46 <free_pages>
+        }
+        *ptep = 0;
+c0104291:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104294:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        tlb_invalidate(pgdir, la);
+c010429a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010429d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01042a1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042a4:	89 04 24             	mov    %eax,(%esp)
+c01042a7:	e8 1c 05 00 00       	call   c01047c8 <tlb_invalidate>
+    }
+}
+c01042ac:	90                   	nop
+c01042ad:	c9                   	leave  
+c01042ae:	c3                   	ret    
+
+c01042af <unmap_range>:
+
+void unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end)
+{
+c01042af:	55                   	push   %ebp
+c01042b0:	89 e5                	mov    %esp,%ebp
+c01042b2:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c01042b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01042b8:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01042bd:	85 c0                	test   %eax,%eax
+c01042bf:	75 0c                	jne    c01042cd <unmap_range+0x1e>
+c01042c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01042c4:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01042c9:	85 c0                	test   %eax,%eax
+c01042cb:	74 24                	je     c01042f1 <unmap_range+0x42>
+c01042cd:	c7 44 24 0c 08 d2 10 	movl   $0xc010d208,0xc(%esp)
+c01042d4:	c0 
+c01042d5:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01042dc:	c0 
+c01042dd:	c7 44 24 04 dd 01 00 	movl   $0x1dd,0x4(%esp)
+c01042e4:	00 
+c01042e5:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01042ec:	e8 14 c1 ff ff       	call   c0100405 <__panic>
+    assert(USER_ACCESS(start, end));
+c01042f1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c01042f8:	76 11                	jbe    c010430b <unmap_range+0x5c>
+c01042fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01042fd:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0104300:	73 09                	jae    c010430b <unmap_range+0x5c>
+c0104302:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0104309:	76 24                	jbe    c010432f <unmap_range+0x80>
+c010430b:	c7 44 24 0c 31 d2 10 	movl   $0xc010d231,0xc(%esp)
+c0104312:	c0 
+c0104313:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010431a:	c0 
+c010431b:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
+c0104322:	00 
+c0104323:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010432a:	e8 d6 c0 ff ff       	call   c0100405 <__panic>
+
+    do
+    {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c010432f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104336:	00 
+c0104337:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010433a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010433e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104341:	89 04 24             	mov    %eax,(%esp)
+c0104344:	e8 72 fd ff ff       	call   c01040bb <get_pte>
+c0104349:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL)
+c010434c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104350:	75 18                	jne    c010436a <unmap_range+0xbb>
+        {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0104352:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104355:	05 00 00 40 00       	add    $0x400000,%eax
+c010435a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010435d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104360:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0104365:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue;
+c0104368:	eb 29                	jmp    c0104393 <unmap_range+0xe4>
+        }
+        if (*ptep != 0)
+c010436a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010436d:	8b 00                	mov    (%eax),%eax
+c010436f:	85 c0                	test   %eax,%eax
+c0104371:	74 19                	je     c010438c <unmap_range+0xdd>
+        {
+            page_remove_pte(pgdir, start, ptep);
+c0104373:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104376:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010437a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010437d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104381:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104384:	89 04 24             	mov    %eax,(%esp)
+c0104387:	e8 c1 fe ff ff       	call   c010424d <page_remove_pte>
+        }
+        start += PGSIZE;
+c010438c:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0104393:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0104397:	74 08                	je     c01043a1 <unmap_range+0xf2>
+c0104399:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010439c:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010439f:	72 8e                	jb     c010432f <unmap_range+0x80>
+}
+c01043a1:	90                   	nop
+c01043a2:	c9                   	leave  
+c01043a3:	c3                   	ret    
+
+c01043a4 <exit_range>:
+
+void exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end)
+{
+c01043a4:	55                   	push   %ebp
+c01043a5:	89 e5                	mov    %esp,%ebp
+c01043a7:	83 ec 28             	sub    $0x28,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c01043aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01043ad:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01043b2:	85 c0                	test   %eax,%eax
+c01043b4:	75 0c                	jne    c01043c2 <exit_range+0x1e>
+c01043b6:	8b 45 10             	mov    0x10(%ebp),%eax
+c01043b9:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01043be:	85 c0                	test   %eax,%eax
+c01043c0:	74 24                	je     c01043e6 <exit_range+0x42>
+c01043c2:	c7 44 24 0c 08 d2 10 	movl   $0xc010d208,0xc(%esp)
+c01043c9:	c0 
+c01043ca:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01043d1:	c0 
+c01043d2:	c7 44 24 04 f2 01 00 	movl   $0x1f2,0x4(%esp)
+c01043d9:	00 
+c01043da:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01043e1:	e8 1f c0 ff ff       	call   c0100405 <__panic>
+    assert(USER_ACCESS(start, end));
+c01043e6:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c01043ed:	76 11                	jbe    c0104400 <exit_range+0x5c>
+c01043ef:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01043f2:	3b 45 10             	cmp    0x10(%ebp),%eax
+c01043f5:	73 09                	jae    c0104400 <exit_range+0x5c>
+c01043f7:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c01043fe:	76 24                	jbe    c0104424 <exit_range+0x80>
+c0104400:	c7 44 24 0c 31 d2 10 	movl   $0xc010d231,0xc(%esp)
+c0104407:	c0 
+c0104408:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010440f:	c0 
+c0104410:	c7 44 24 04 f3 01 00 	movl   $0x1f3,0x4(%esp)
+c0104417:	00 
+c0104418:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010441f:	e8 e1 bf ff ff       	call   c0100405 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c0104424:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104427:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010442a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010442d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0104432:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do
+    {
+        int pde_idx = PDX(start);
+c0104435:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104438:	c1 e8 16             	shr    $0x16,%eax
+c010443b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P)
+c010443e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104441:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104448:	8b 45 08             	mov    0x8(%ebp),%eax
+c010444b:	01 d0                	add    %edx,%eax
+c010444d:	8b 00                	mov    (%eax),%eax
+c010444f:	83 e0 01             	and    $0x1,%eax
+c0104452:	85 c0                	test   %eax,%eax
+c0104454:	74 3e                	je     c0104494 <exit_range+0xf0>
+        {
+            free_page(pde2page(pgdir[pde_idx]));
+c0104456:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104459:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104460:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104463:	01 d0                	add    %edx,%eax
+c0104465:	8b 00                	mov    (%eax),%eax
+c0104467:	89 04 24             	mov    %eax,(%esp)
+c010446a:	e8 4f f3 ff ff       	call   c01037be <pde2page>
+c010446f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104476:	00 
+c0104477:	89 04 24             	mov    %eax,(%esp)
+c010447a:	e8 c7 f5 ff ff       	call   c0103a46 <free_pages>
+            pgdir[pde_idx] = 0;
+c010447f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104482:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104489:	8b 45 08             	mov    0x8(%ebp),%eax
+c010448c:	01 d0                	add    %edx,%eax
+c010448e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c0104494:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c010449b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010449f:	74 08                	je     c01044a9 <exit_range+0x105>
+c01044a1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01044a4:	3b 45 10             	cmp    0x10(%ebp),%eax
+c01044a7:	72 8c                	jb     c0104435 <exit_range+0x91>
+}
+c01044a9:	90                   	nop
+c01044aa:	c9                   	leave  
+c01044ab:	c3                   	ret    
+
+c01044ac <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share)
+{
+c01044ac:	55                   	push   %ebp
+c01044ad:	89 e5                	mov    %esp,%ebp
+c01044af:	53                   	push   %ebx
+c01044b0:	83 ec 34             	sub    $0x34,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c01044b3:	8b 45 10             	mov    0x10(%ebp),%eax
+c01044b6:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01044bb:	85 c0                	test   %eax,%eax
+c01044bd:	75 0c                	jne    c01044cb <copy_range+0x1f>
+c01044bf:	8b 45 14             	mov    0x14(%ebp),%eax
+c01044c2:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01044c7:	85 c0                	test   %eax,%eax
+c01044c9:	74 24                	je     c01044ef <copy_range+0x43>
+c01044cb:	c7 44 24 0c 08 d2 10 	movl   $0xc010d208,0xc(%esp)
+c01044d2:	c0 
+c01044d3:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01044da:	c0 
+c01044db:	c7 44 24 04 0a 02 00 	movl   $0x20a,0x4(%esp)
+c01044e2:	00 
+c01044e3:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01044ea:	e8 16 bf ff ff       	call   c0100405 <__panic>
+    assert(USER_ACCESS(start, end));
+c01044ef:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c01044f6:	76 11                	jbe    c0104509 <copy_range+0x5d>
+c01044f8:	8b 45 10             	mov    0x10(%ebp),%eax
+c01044fb:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01044fe:	73 09                	jae    c0104509 <copy_range+0x5d>
+c0104500:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c0104507:	76 24                	jbe    c010452d <copy_range+0x81>
+c0104509:	c7 44 24 0c 31 d2 10 	movl   $0xc010d231,0xc(%esp)
+c0104510:	c0 
+c0104511:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104518:	c0 
+c0104519:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
+c0104520:	00 
+c0104521:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104528:	e8 d8 be ff ff       	call   c0100405 <__panic>
+    // copy content by page unit.
+    do
+    {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c010452d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104534:	00 
+c0104535:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104538:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010453c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010453f:	89 04 24             	mov    %eax,(%esp)
+c0104542:	e8 74 fb ff ff       	call   c01040bb <get_pte>
+c0104547:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL)
+c010454a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010454e:	75 1b                	jne    c010456b <copy_range+0xbf>
+        {
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0104550:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104553:	05 00 00 40 00       	add    $0x400000,%eax
+c0104558:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010455b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010455e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0104563:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue;
+c0104566:	e9 42 01 00 00       	jmp    c01046ad <copy_range+0x201>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P)
+c010456b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010456e:	8b 00                	mov    (%eax),%eax
+c0104570:	83 e0 01             	and    $0x1,%eax
+c0104573:	85 c0                	test   %eax,%eax
+c0104575:	0f 84 2b 01 00 00    	je     c01046a6 <copy_range+0x1fa>
+        {
+            if ((nptep = get_pte(to, start, 1)) == NULL)
+c010457b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0104582:	00 
+c0104583:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104586:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010458a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010458d:	89 04 24             	mov    %eax,(%esp)
+c0104590:	e8 26 fb ff ff       	call   c01040bb <get_pte>
+c0104595:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104598:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010459c:	75 0a                	jne    c01045a8 <copy_range+0xfc>
+            {
+                return -E_NO_MEM;
+c010459e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01045a3:	e9 1c 01 00 00       	jmp    c01046c4 <copy_range+0x218>
+            }
+            uint32_t perm = (*ptep & PTE_USER);
+c01045a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01045ab:	8b 00                	mov    (%eax),%eax
+c01045ad:	83 e0 07             	and    $0x7,%eax
+c01045b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            //get page from ptep
+            struct Page *page = pte2page(*ptep);
+c01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01045b6:	8b 00                	mov    (%eax),%eax
+c01045b8:	89 04 24             	mov    %eax,(%esp)
+c01045bb:	e8 c0 f1 ff ff       	call   c0103780 <pte2page>
+c01045c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            // alloc a page for process B
+            struct Page *npage = alloc_page();
+c01045c3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01045ca:	e8 0c f4 ff ff       	call   c01039db <alloc_pages>
+c01045cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            assert(page != NULL);
+c01045d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01045d6:	75 24                	jne    c01045fc <copy_range+0x150>
+c01045d8:	c7 44 24 0c 49 d2 10 	movl   $0xc010d249,0xc(%esp)
+c01045df:	c0 
+c01045e0:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01045e7:	c0 
+c01045e8:	c7 44 24 04 22 02 00 	movl   $0x222,0x4(%esp)
+c01045ef:	00 
+c01045f0:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01045f7:	e8 09 be ff ff       	call   c0100405 <__panic>
+            assert(npage != NULL);
+c01045fc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0104600:	75 24                	jne    c0104626 <copy_range+0x17a>
+c0104602:	c7 44 24 0c 56 d2 10 	movl   $0xc010d256,0xc(%esp)
+c0104609:	c0 
+c010460a:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104611:	c0 
+c0104612:	c7 44 24 04 23 02 00 	movl   $0x223,0x4(%esp)
+c0104619:	00 
+c010461a:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104621:	e8 df bd ff ff       	call   c0100405 <__panic>
+            int ret = 0;
+c0104626:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+         * (1) find src_kvaddr: the kernel virtual address of page
+         * (2) find dst_kvaddr: the kernel virtual address of npage
+         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+         * (4) build the map of phy addr of  nage with the linear addr start
+         */
+            memcpy(page2kva(npage), page2kva(page), PGSIZE);
+c010462d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104630:	89 04 24             	mov    %eax,(%esp)
+c0104633:	e8 f4 f0 ff ff       	call   c010372c <page2kva>
+c0104638:	89 c3                	mov    %eax,%ebx
+c010463a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010463d:	89 04 24             	mov    %eax,(%esp)
+c0104640:	e8 e7 f0 ff ff       	call   c010372c <page2kva>
+c0104645:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c010464c:	00 
+c010464d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0104651:	89 04 24             	mov    %eax,(%esp)
+c0104654:	e8 c5 78 00 00       	call   c010bf1e <memcpy>
+            ret = page_insert(to, npage, start, perm);
+c0104659:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010465c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104660:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104663:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0104667:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010466a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010466e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104671:	89 04 24             	mov    %eax,(%esp)
+c0104674:	e8 96 00 00 00       	call   c010470f <page_insert>
+c0104679:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            assert(ret == 0);
+c010467c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0104680:	74 24                	je     c01046a6 <copy_range+0x1fa>
+c0104682:	c7 44 24 0c 64 d2 10 	movl   $0xc010d264,0xc(%esp)
+c0104689:	c0 
+c010468a:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104691:	c0 
+c0104692:	c7 44 24 04 35 02 00 	movl   $0x235,0x4(%esp)
+c0104699:	00 
+c010469a:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01046a1:	e8 5f bd ff ff       	call   c0100405 <__panic>
+        }
+        start += PGSIZE;
+c01046a6:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c01046ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01046b1:	74 0c                	je     c01046bf <copy_range+0x213>
+c01046b3:	8b 45 10             	mov    0x10(%ebp),%eax
+c01046b6:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01046b9:	0f 82 6e fe ff ff    	jb     c010452d <copy_range+0x81>
+    return 0;
+c01046bf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01046c4:	83 c4 34             	add    $0x34,%esp
+c01046c7:	5b                   	pop    %ebx
+c01046c8:	5d                   	pop    %ebp
+c01046c9:	c3                   	ret    
+
+c01046ca <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void page_remove(pde_t *pgdir, uintptr_t la)
+{
+c01046ca:	55                   	push   %ebp
+c01046cb:	89 e5                	mov    %esp,%ebp
+c01046cd:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c01046d0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01046d7:	00 
+c01046d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01046db:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01046df:	8b 45 08             	mov    0x8(%ebp),%eax
+c01046e2:	89 04 24             	mov    %eax,(%esp)
+c01046e5:	e8 d1 f9 ff ff       	call   c01040bb <get_pte>
+c01046ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL)
+c01046ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01046f1:	74 19                	je     c010470c <page_remove+0x42>
+    {
+        page_remove_pte(pgdir, la, ptep);
+c01046f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01046f6:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01046fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01046fd:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104701:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104704:	89 04 24             	mov    %eax,(%esp)
+c0104707:	e8 41 fb ff ff       	call   c010424d <page_remove_pte>
+    }
+}
+c010470c:	90                   	nop
+c010470d:	c9                   	leave  
+c010470e:	c3                   	ret    
+
+c010470f <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate
+int page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm)
+{
+c010470f:	55                   	push   %ebp
+c0104710:	89 e5                	mov    %esp,%ebp
+c0104712:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0104715:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c010471c:	00 
+c010471d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104720:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104724:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104727:	89 04 24             	mov    %eax,(%esp)
+c010472a:	e8 8c f9 ff ff       	call   c01040bb <get_pte>
+c010472f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL)
+c0104732:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104736:	75 0a                	jne    c0104742 <page_insert+0x33>
+    {
+        return -E_NO_MEM;
+c0104738:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c010473d:	e9 84 00 00 00       	jmp    c01047c6 <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0104742:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104745:	89 04 24             	mov    %eax,(%esp)
+c0104748:	e8 a1 f0 ff ff       	call   c01037ee <page_ref_inc>
+    if (*ptep & PTE_P)
+c010474d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104750:	8b 00                	mov    (%eax),%eax
+c0104752:	83 e0 01             	and    $0x1,%eax
+c0104755:	85 c0                	test   %eax,%eax
+c0104757:	74 3e                	je     c0104797 <page_insert+0x88>
+    {
+        struct Page *p = pte2page(*ptep);
+c0104759:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010475c:	8b 00                	mov    (%eax),%eax
+c010475e:	89 04 24             	mov    %eax,(%esp)
+c0104761:	e8 1a f0 ff ff       	call   c0103780 <pte2page>
+c0104766:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page)
+c0104769:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010476c:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010476f:	75 0d                	jne    c010477e <page_insert+0x6f>
+        {
+            page_ref_dec(page);
+c0104771:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104774:	89 04 24             	mov    %eax,(%esp)
+c0104777:	e8 89 f0 ff ff       	call   c0103805 <page_ref_dec>
+c010477c:	eb 19                	jmp    c0104797 <page_insert+0x88>
+        }
+        else
+        {
+            page_remove_pte(pgdir, la, ptep);
+c010477e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104781:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0104785:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104788:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010478c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010478f:	89 04 24             	mov    %eax,(%esp)
+c0104792:	e8 b6 fa ff ff       	call   c010424d <page_remove_pte>
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0104797:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010479a:	89 04 24             	mov    %eax,(%esp)
+c010479d:	e8 2f ef ff ff       	call   c01036d1 <page2pa>
+c01047a2:	0b 45 14             	or     0x14(%ebp),%eax
+c01047a5:	83 c8 01             	or     $0x1,%eax
+c01047a8:	89 c2                	mov    %eax,%edx
+c01047aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01047ad:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c01047af:	8b 45 10             	mov    0x10(%ebp),%eax
+c01047b2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01047b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047b9:	89 04 24             	mov    %eax,(%esp)
+c01047bc:	e8 07 00 00 00       	call   c01047c8 <tlb_invalidate>
+    return 0;
+c01047c1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01047c6:	c9                   	leave  
+c01047c7:	c3                   	ret    
+
+c01047c8 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void tlb_invalidate(pde_t *pgdir, uintptr_t la)
+{
+c01047c8:	55                   	push   %ebp
+c01047c9:	89 e5                	mov    %esp,%ebp
+c01047cb:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c01047ce:	0f 20 d8             	mov    %cr3,%eax
+c01047d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr3;
+c01047d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+    if (rcr3() == PADDR(pgdir))
+c01047d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01047da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01047dd:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c01047e4:	77 23                	ja     c0104809 <tlb_invalidate+0x41>
+c01047e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01047e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01047ed:	c7 44 24 08 84 d1 10 	movl   $0xc010d184,0x8(%esp)
+c01047f4:	c0 
+c01047f5:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
+c01047fc:	00 
+c01047fd:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104804:	e8 fc bb ff ff       	call   c0100405 <__panic>
+c0104809:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010480c:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104811:	39 d0                	cmp    %edx,%eax
+c0104813:	75 0c                	jne    c0104821 <tlb_invalidate+0x59>
+    {
+        invlpg((void *)la);
+c0104815:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104818:	89 45 ec             	mov    %eax,-0x14(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c010481b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010481e:	0f 01 38             	invlpg (%eax)
+    }
+}
+c0104821:	90                   	nop
+c0104822:	c9                   	leave  
+c0104823:	c3                   	ret    
+
+c0104824 <pgdir_alloc_page>:
+// pgdir_alloc_page - call alloc_page & page_insert functions to
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm)
+{
+c0104824:	55                   	push   %ebp
+c0104825:	89 e5                	mov    %esp,%ebp
+c0104827:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_page();
+c010482a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104831:	e8 a5 f1 ff ff       	call   c01039db <alloc_pages>
+c0104836:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL)
+c0104839:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010483d:	0f 84 b0 00 00 00    	je     c01048f3 <pgdir_alloc_page+0xcf>
+    {
+        if (page_insert(pgdir, page, la, perm) != 0)
+c0104843:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104846:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010484a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010484d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0104851:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104854:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0104858:	8b 45 08             	mov    0x8(%ebp),%eax
+c010485b:	89 04 24             	mov    %eax,(%esp)
+c010485e:	e8 ac fe ff ff       	call   c010470f <page_insert>
+c0104863:	85 c0                	test   %eax,%eax
+c0104865:	74 1a                	je     c0104881 <pgdir_alloc_page+0x5d>
+        {
+            free_page(page);
+c0104867:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010486e:	00 
+c010486f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104872:	89 04 24             	mov    %eax,(%esp)
+c0104875:	e8 cc f1 ff ff       	call   c0103a46 <free_pages>
+            return NULL;
+c010487a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010487f:	eb 75                	jmp    c01048f6 <pgdir_alloc_page+0xd2>
+        }
+        if (swap_init_ok)
+c0104881:	a1 14 50 1b c0       	mov    0xc01b5014,%eax
+c0104886:	85 c0                	test   %eax,%eax
+c0104888:	74 69                	je     c01048f3 <pgdir_alloc_page+0xcf>
+        {
+            if (check_mm_struct != NULL)
+c010488a:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c010488f:	85 c0                	test   %eax,%eax
+c0104891:	74 60                	je     c01048f3 <pgdir_alloc_page+0xcf>
+            {
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c0104893:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c0104898:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010489f:	00 
+c01048a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01048a3:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01048a7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01048aa:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01048ae:	89 04 24             	mov    %eax,(%esp)
+c01048b1:	e8 f3 2c 00 00       	call   c01075a9 <swap_map_swappable>
+                page->pra_vaddr = la;
+c01048b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01048b9:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01048bc:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c01048bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01048c2:	89 04 24             	mov    %eax,(%esp)
+c01048c5:	e8 0c ef ff ff       	call   c01037d6 <page_ref>
+c01048ca:	83 f8 01             	cmp    $0x1,%eax
+c01048cd:	74 24                	je     c01048f3 <pgdir_alloc_page+0xcf>
+c01048cf:	c7 44 24 0c 6d d2 10 	movl   $0xc010d26d,0xc(%esp)
+c01048d6:	c0 
+c01048d7:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01048de:	c0 
+c01048df:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
+c01048e6:	00 
+c01048e7:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01048ee:	e8 12 bb ff ff       	call   c0100405 <__panic>
+                //panic("pgdir_alloc_page: no pages. now current is existed, should fix it in the future\n");
+            }
+        }
+    }
+
+    return page;
+c01048f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01048f6:	c9                   	leave  
+c01048f7:	c3                   	ret    
+
+c01048f8 <check_alloc_page>:
+
+static void
+check_alloc_page(void)
+{
+c01048f8:	55                   	push   %ebp
+c01048f9:	89 e5                	mov    %esp,%ebp
+c01048fb:	83 ec 18             	sub    $0x18,%esp
+    pmm_manager->check();
+c01048fe:	a1 d0 70 1b c0       	mov    0xc01b70d0,%eax
+c0104903:	8b 40 18             	mov    0x18(%eax),%eax
+c0104906:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c0104908:	c7 04 24 84 d2 10 c0 	movl   $0xc010d284,(%esp)
+c010490f:	e8 9a b9 ff ff       	call   c01002ae <cprintf>
+}
+c0104914:	90                   	nop
+c0104915:	c9                   	leave  
+c0104916:	c3                   	ret    
+
+c0104917 <check_pgdir>:
+
+static void
+check_pgdir(void)
+{
+c0104917:	55                   	push   %ebp
+c0104918:	89 e5                	mov    %esp,%ebp
+c010491a:	83 ec 38             	sub    $0x38,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c010491d:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0104922:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c0104927:	76 24                	jbe    c010494d <check_pgdir+0x36>
+c0104929:	c7 44 24 0c a3 d2 10 	movl   $0xc010d2a3,0xc(%esp)
+c0104930:	c0 
+c0104931:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104938:	c0 
+c0104939:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
+c0104940:	00 
+c0104941:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104948:	e8 b8 ba ff ff       	call   c0100405 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c010494d:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104952:	85 c0                	test   %eax,%eax
+c0104954:	74 0e                	je     c0104964 <check_pgdir+0x4d>
+c0104956:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c010495b:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104960:	85 c0                	test   %eax,%eax
+c0104962:	74 24                	je     c0104988 <check_pgdir+0x71>
+c0104964:	c7 44 24 0c c0 d2 10 	movl   $0xc010d2c0,0xc(%esp)
+c010496b:	c0 
+c010496c:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104973:	c0 
+c0104974:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
+c010497b:	00 
+c010497c:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104983:	e8 7d ba ff ff       	call   c0100405 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c0104988:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c010498d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104994:	00 
+c0104995:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010499c:	00 
+c010499d:	89 04 24             	mov    %eax,(%esp)
+c01049a0:	e8 4f f8 ff ff       	call   c01041f4 <get_page>
+c01049a5:	85 c0                	test   %eax,%eax
+c01049a7:	74 24                	je     c01049cd <check_pgdir+0xb6>
+c01049a9:	c7 44 24 0c f8 d2 10 	movl   $0xc010d2f8,0xc(%esp)
+c01049b0:	c0 
+c01049b1:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01049b8:	c0 
+c01049b9:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
+c01049c0:	00 
+c01049c1:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01049c8:	e8 38 ba ff ff       	call   c0100405 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c01049cd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01049d4:	e8 02 f0 ff ff       	call   c01039db <alloc_pages>
+c01049d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c01049dc:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c01049e1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01049e8:	00 
+c01049e9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01049f0:	00 
+c01049f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01049f4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01049f8:	89 04 24             	mov    %eax,(%esp)
+c01049fb:	e8 0f fd ff ff       	call   c010470f <page_insert>
+c0104a00:	85 c0                	test   %eax,%eax
+c0104a02:	74 24                	je     c0104a28 <check_pgdir+0x111>
+c0104a04:	c7 44 24 0c 20 d3 10 	movl   $0xc010d320,0xc(%esp)
+c0104a0b:	c0 
+c0104a0c:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104a13:	c0 
+c0104a14:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
+c0104a1b:	00 
+c0104a1c:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104a23:	e8 dd b9 ff ff       	call   c0100405 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c0104a28:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104a2d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104a34:	00 
+c0104a35:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104a3c:	00 
+c0104a3d:	89 04 24             	mov    %eax,(%esp)
+c0104a40:	e8 76 f6 ff ff       	call   c01040bb <get_pte>
+c0104a45:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104a48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a4c:	75 24                	jne    c0104a72 <check_pgdir+0x15b>
+c0104a4e:	c7 44 24 0c 4c d3 10 	movl   $0xc010d34c,0xc(%esp)
+c0104a55:	c0 
+c0104a56:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104a5d:	c0 
+c0104a5e:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
+c0104a65:	00 
+c0104a66:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104a6d:	e8 93 b9 ff ff       	call   c0100405 <__panic>
+    assert(pte2page(*ptep) == p1);
+c0104a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a75:	8b 00                	mov    (%eax),%eax
+c0104a77:	89 04 24             	mov    %eax,(%esp)
+c0104a7a:	e8 01 ed ff ff       	call   c0103780 <pte2page>
+c0104a7f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0104a82:	74 24                	je     c0104aa8 <check_pgdir+0x191>
+c0104a84:	c7 44 24 0c 79 d3 10 	movl   $0xc010d379,0xc(%esp)
+c0104a8b:	c0 
+c0104a8c:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104a93:	c0 
+c0104a94:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
+c0104a9b:	00 
+c0104a9c:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104aa3:	e8 5d b9 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p1) == 1);
+c0104aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104aab:	89 04 24             	mov    %eax,(%esp)
+c0104aae:	e8 23 ed ff ff       	call   c01037d6 <page_ref>
+c0104ab3:	83 f8 01             	cmp    $0x1,%eax
+c0104ab6:	74 24                	je     c0104adc <check_pgdir+0x1c5>
+c0104ab8:	c7 44 24 0c 8f d3 10 	movl   $0xc010d38f,0xc(%esp)
+c0104abf:	c0 
+c0104ac0:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104ac7:	c0 
+c0104ac8:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
+c0104acf:	00 
+c0104ad0:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104ad7:	e8 29 b9 ff ff       	call   c0100405 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c0104adc:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104ae1:	8b 00                	mov    (%eax),%eax
+c0104ae3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104ae8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104aee:	c1 e8 0c             	shr    $0xc,%eax
+c0104af1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104af4:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0104af9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0104afc:	72 23                	jb     c0104b21 <check_pgdir+0x20a>
+c0104afe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104b01:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104b05:	c7 44 24 08 e0 d0 10 	movl   $0xc010d0e0,0x8(%esp)
+c0104b0c:	c0 
+c0104b0d:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
+c0104b14:	00 
+c0104b15:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104b1c:	e8 e4 b8 ff ff       	call   c0100405 <__panic>
+c0104b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104b24:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0104b29:	83 c0 04             	add    $0x4,%eax
+c0104b2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c0104b2f:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104b34:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104b3b:	00 
+c0104b3c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104b43:	00 
+c0104b44:	89 04 24             	mov    %eax,(%esp)
+c0104b47:	e8 6f f5 ff ff       	call   c01040bb <get_pte>
+c0104b4c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0104b4f:	74 24                	je     c0104b75 <check_pgdir+0x25e>
+c0104b51:	c7 44 24 0c a4 d3 10 	movl   $0xc010d3a4,0xc(%esp)
+c0104b58:	c0 
+c0104b59:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104b60:	c0 
+c0104b61:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
+c0104b68:	00 
+c0104b69:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104b70:	e8 90 b8 ff ff       	call   c0100405 <__panic>
+
+    p2 = alloc_page();
+c0104b75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0104b7c:	e8 5a ee ff ff       	call   c01039db <alloc_pages>
+c0104b81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c0104b84:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104b89:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
+c0104b90:	00 
+c0104b91:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0104b98:	00 
+c0104b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0104b9c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0104ba0:	89 04 24             	mov    %eax,(%esp)
+c0104ba3:	e8 67 fb ff ff       	call   c010470f <page_insert>
+c0104ba8:	85 c0                	test   %eax,%eax
+c0104baa:	74 24                	je     c0104bd0 <check_pgdir+0x2b9>
+c0104bac:	c7 44 24 0c cc d3 10 	movl   $0xc010d3cc,0xc(%esp)
+c0104bb3:	c0 
+c0104bb4:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104bbb:	c0 
+c0104bbc:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
+c0104bc3:	00 
+c0104bc4:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104bcb:	e8 35 b8 ff ff       	call   c0100405 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0104bd0:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104bd5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104bdc:	00 
+c0104bdd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104be4:	00 
+c0104be5:	89 04 24             	mov    %eax,(%esp)
+c0104be8:	e8 ce f4 ff ff       	call   c01040bb <get_pte>
+c0104bed:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104bf0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104bf4:	75 24                	jne    c0104c1a <check_pgdir+0x303>
+c0104bf6:	c7 44 24 0c 04 d4 10 	movl   $0xc010d404,0xc(%esp)
+c0104bfd:	c0 
+c0104bfe:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104c05:	c0 
+c0104c06:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
+c0104c0d:	00 
+c0104c0e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104c15:	e8 eb b7 ff ff       	call   c0100405 <__panic>
+    assert(*ptep & PTE_U);
+c0104c1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c1d:	8b 00                	mov    (%eax),%eax
+c0104c1f:	83 e0 04             	and    $0x4,%eax
+c0104c22:	85 c0                	test   %eax,%eax
+c0104c24:	75 24                	jne    c0104c4a <check_pgdir+0x333>
+c0104c26:	c7 44 24 0c 34 d4 10 	movl   $0xc010d434,0xc(%esp)
+c0104c2d:	c0 
+c0104c2e:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104c35:	c0 
+c0104c36:	c7 44 24 04 b2 02 00 	movl   $0x2b2,0x4(%esp)
+c0104c3d:	00 
+c0104c3e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104c45:	e8 bb b7 ff ff       	call   c0100405 <__panic>
+    assert(*ptep & PTE_W);
+c0104c4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c4d:	8b 00                	mov    (%eax),%eax
+c0104c4f:	83 e0 02             	and    $0x2,%eax
+c0104c52:	85 c0                	test   %eax,%eax
+c0104c54:	75 24                	jne    c0104c7a <check_pgdir+0x363>
+c0104c56:	c7 44 24 0c 42 d4 10 	movl   $0xc010d442,0xc(%esp)
+c0104c5d:	c0 
+c0104c5e:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104c65:	c0 
+c0104c66:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
+c0104c6d:	00 
+c0104c6e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104c75:	e8 8b b7 ff ff       	call   c0100405 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c0104c7a:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104c7f:	8b 00                	mov    (%eax),%eax
+c0104c81:	83 e0 04             	and    $0x4,%eax
+c0104c84:	85 c0                	test   %eax,%eax
+c0104c86:	75 24                	jne    c0104cac <check_pgdir+0x395>
+c0104c88:	c7 44 24 0c 50 d4 10 	movl   $0xc010d450,0xc(%esp)
+c0104c8f:	c0 
+c0104c90:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104c97:	c0 
+c0104c98:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
+c0104c9f:	00 
+c0104ca0:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104ca7:	e8 59 b7 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p2) == 1);
+c0104cac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104caf:	89 04 24             	mov    %eax,(%esp)
+c0104cb2:	e8 1f eb ff ff       	call   c01037d6 <page_ref>
+c0104cb7:	83 f8 01             	cmp    $0x1,%eax
+c0104cba:	74 24                	je     c0104ce0 <check_pgdir+0x3c9>
+c0104cbc:	c7 44 24 0c 66 d4 10 	movl   $0xc010d466,0xc(%esp)
+c0104cc3:	c0 
+c0104cc4:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104ccb:	c0 
+c0104ccc:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
+c0104cd3:	00 
+c0104cd4:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104cdb:	e8 25 b7 ff ff       	call   c0100405 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c0104ce0:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104ce5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c0104cec:	00 
+c0104ced:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0104cf4:	00 
+c0104cf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0104cf8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0104cfc:	89 04 24             	mov    %eax,(%esp)
+c0104cff:	e8 0b fa ff ff       	call   c010470f <page_insert>
+c0104d04:	85 c0                	test   %eax,%eax
+c0104d06:	74 24                	je     c0104d2c <check_pgdir+0x415>
+c0104d08:	c7 44 24 0c 78 d4 10 	movl   $0xc010d478,0xc(%esp)
+c0104d0f:	c0 
+c0104d10:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104d17:	c0 
+c0104d18:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
+c0104d1f:	00 
+c0104d20:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104d27:	e8 d9 b6 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p1) == 2);
+c0104d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104d2f:	89 04 24             	mov    %eax,(%esp)
+c0104d32:	e8 9f ea ff ff       	call   c01037d6 <page_ref>
+c0104d37:	83 f8 02             	cmp    $0x2,%eax
+c0104d3a:	74 24                	je     c0104d60 <check_pgdir+0x449>
+c0104d3c:	c7 44 24 0c a4 d4 10 	movl   $0xc010d4a4,0xc(%esp)
+c0104d43:	c0 
+c0104d44:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104d4b:	c0 
+c0104d4c:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
+c0104d53:	00 
+c0104d54:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104d5b:	e8 a5 b6 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p2) == 0);
+c0104d60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104d63:	89 04 24             	mov    %eax,(%esp)
+c0104d66:	e8 6b ea ff ff       	call   c01037d6 <page_ref>
+c0104d6b:	85 c0                	test   %eax,%eax
+c0104d6d:	74 24                	je     c0104d93 <check_pgdir+0x47c>
+c0104d6f:	c7 44 24 0c b6 d4 10 	movl   $0xc010d4b6,0xc(%esp)
+c0104d76:	c0 
+c0104d77:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104d7e:	c0 
+c0104d7f:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
+c0104d86:	00 
+c0104d87:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104d8e:	e8 72 b6 ff ff       	call   c0100405 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0104d93:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104d98:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0104d9f:	00 
+c0104da0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104da7:	00 
+c0104da8:	89 04 24             	mov    %eax,(%esp)
+c0104dab:	e8 0b f3 ff ff       	call   c01040bb <get_pte>
+c0104db0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104db3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104db7:	75 24                	jne    c0104ddd <check_pgdir+0x4c6>
+c0104db9:	c7 44 24 0c 04 d4 10 	movl   $0xc010d404,0xc(%esp)
+c0104dc0:	c0 
+c0104dc1:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104dc8:	c0 
+c0104dc9:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
+c0104dd0:	00 
+c0104dd1:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104dd8:	e8 28 b6 ff ff       	call   c0100405 <__panic>
+    assert(pte2page(*ptep) == p1);
+c0104ddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104de0:	8b 00                	mov    (%eax),%eax
+c0104de2:	89 04 24             	mov    %eax,(%esp)
+c0104de5:	e8 96 e9 ff ff       	call   c0103780 <pte2page>
+c0104dea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0104ded:	74 24                	je     c0104e13 <check_pgdir+0x4fc>
+c0104def:	c7 44 24 0c 79 d3 10 	movl   $0xc010d379,0xc(%esp)
+c0104df6:	c0 
+c0104df7:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104dfe:	c0 
+c0104dff:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
+c0104e06:	00 
+c0104e07:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104e0e:	e8 f2 b5 ff ff       	call   c0100405 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c0104e13:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104e16:	8b 00                	mov    (%eax),%eax
+c0104e18:	83 e0 04             	and    $0x4,%eax
+c0104e1b:	85 c0                	test   %eax,%eax
+c0104e1d:	74 24                	je     c0104e43 <check_pgdir+0x52c>
+c0104e1f:	c7 44 24 0c c8 d4 10 	movl   $0xc010d4c8,0xc(%esp)
+c0104e26:	c0 
+c0104e27:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104e2e:	c0 
+c0104e2f:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
+c0104e36:	00 
+c0104e37:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104e3e:	e8 c2 b5 ff ff       	call   c0100405 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c0104e43:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104e48:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0104e4f:	00 
+c0104e50:	89 04 24             	mov    %eax,(%esp)
+c0104e53:	e8 72 f8 ff ff       	call   c01046ca <page_remove>
+    assert(page_ref(p1) == 1);
+c0104e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104e5b:	89 04 24             	mov    %eax,(%esp)
+c0104e5e:	e8 73 e9 ff ff       	call   c01037d6 <page_ref>
+c0104e63:	83 f8 01             	cmp    $0x1,%eax
+c0104e66:	74 24                	je     c0104e8c <check_pgdir+0x575>
+c0104e68:	c7 44 24 0c 8f d3 10 	movl   $0xc010d38f,0xc(%esp)
+c0104e6f:	c0 
+c0104e70:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104e77:	c0 
+c0104e78:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
+c0104e7f:	00 
+c0104e80:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104e87:	e8 79 b5 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p2) == 0);
+c0104e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104e8f:	89 04 24             	mov    %eax,(%esp)
+c0104e92:	e8 3f e9 ff ff       	call   c01037d6 <page_ref>
+c0104e97:	85 c0                	test   %eax,%eax
+c0104e99:	74 24                	je     c0104ebf <check_pgdir+0x5a8>
+c0104e9b:	c7 44 24 0c b6 d4 10 	movl   $0xc010d4b6,0xc(%esp)
+c0104ea2:	c0 
+c0104ea3:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104eaa:	c0 
+c0104eab:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
+c0104eb2:	00 
+c0104eb3:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104eba:	e8 46 b5 ff ff       	call   c0100405 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c0104ebf:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104ec4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0104ecb:	00 
+c0104ecc:	89 04 24             	mov    %eax,(%esp)
+c0104ecf:	e8 f6 f7 ff ff       	call   c01046ca <page_remove>
+    assert(page_ref(p1) == 0);
+c0104ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ed7:	89 04 24             	mov    %eax,(%esp)
+c0104eda:	e8 f7 e8 ff ff       	call   c01037d6 <page_ref>
+c0104edf:	85 c0                	test   %eax,%eax
+c0104ee1:	74 24                	je     c0104f07 <check_pgdir+0x5f0>
+c0104ee3:	c7 44 24 0c dd d4 10 	movl   $0xc010d4dd,0xc(%esp)
+c0104eea:	c0 
+c0104eeb:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104ef2:	c0 
+c0104ef3:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
+c0104efa:	00 
+c0104efb:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104f02:	e8 fe b4 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p2) == 0);
+c0104f07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104f0a:	89 04 24             	mov    %eax,(%esp)
+c0104f0d:	e8 c4 e8 ff ff       	call   c01037d6 <page_ref>
+c0104f12:	85 c0                	test   %eax,%eax
+c0104f14:	74 24                	je     c0104f3a <check_pgdir+0x623>
+c0104f16:	c7 44 24 0c b6 d4 10 	movl   $0xc010d4b6,0xc(%esp)
+c0104f1d:	c0 
+c0104f1e:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104f25:	c0 
+c0104f26:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
+c0104f2d:	00 
+c0104f2e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104f35:	e8 cb b4 ff ff       	call   c0100405 <__panic>
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+c0104f3a:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104f3f:	8b 00                	mov    (%eax),%eax
+c0104f41:	89 04 24             	mov    %eax,(%esp)
+c0104f44:	e8 75 e8 ff ff       	call   c01037be <pde2page>
+c0104f49:	89 04 24             	mov    %eax,(%esp)
+c0104f4c:	e8 85 e8 ff ff       	call   c01037d6 <page_ref>
+c0104f51:	83 f8 01             	cmp    $0x1,%eax
+c0104f54:	74 24                	je     c0104f7a <check_pgdir+0x663>
+c0104f56:	c7 44 24 0c f0 d4 10 	movl   $0xc010d4f0,0xc(%esp)
+c0104f5d:	c0 
+c0104f5e:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0104f65:	c0 
+c0104f66:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
+c0104f6d:	00 
+c0104f6e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104f75:	e8 8b b4 ff ff       	call   c0100405 <__panic>
+    free_page(pde2page(boot_pgdir[0]));
+c0104f7a:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104f7f:	8b 00                	mov    (%eax),%eax
+c0104f81:	89 04 24             	mov    %eax,(%esp)
+c0104f84:	e8 35 e8 ff ff       	call   c01037be <pde2page>
+c0104f89:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0104f90:	00 
+c0104f91:	89 04 24             	mov    %eax,(%esp)
+c0104f94:	e8 ad ea ff ff       	call   c0103a46 <free_pages>
+    boot_pgdir[0] = 0;
+c0104f99:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0104f9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c0104fa4:	c7 04 24 17 d5 10 c0 	movl   $0xc010d517,(%esp)
+c0104fab:	e8 fe b2 ff ff       	call   c01002ae <cprintf>
+}
+c0104fb0:	90                   	nop
+c0104fb1:	c9                   	leave  
+c0104fb2:	c3                   	ret    
+
+c0104fb3 <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void)
+{
+c0104fb3:	55                   	push   %ebp
+c0104fb4:	89 e5                	mov    %esp,%ebp
+c0104fb6:	83 ec 38             	sub    $0x38,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE)
+c0104fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0104fc0:	e9 ca 00 00 00       	jmp    c010508f <check_boot_pgdir+0xdc>
+    {
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c0104fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104fc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104fcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104fce:	c1 e8 0c             	shr    $0xc,%eax
+c0104fd1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0104fd4:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0104fd9:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c0104fdc:	72 23                	jb     c0105001 <check_boot_pgdir+0x4e>
+c0104fde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104fe1:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0104fe5:	c7 44 24 08 e0 d0 10 	movl   $0xc010d0e0,0x8(%esp)
+c0104fec:	c0 
+c0104fed:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
+c0104ff4:	00 
+c0104ff5:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0104ffc:	e8 04 b4 ff ff       	call   c0100405 <__panic>
+c0105001:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105004:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0105009:	89 c2                	mov    %eax,%edx
+c010500b:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0105010:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0105017:	00 
+c0105018:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010501c:	89 04 24             	mov    %eax,(%esp)
+c010501f:	e8 97 f0 ff ff       	call   c01040bb <get_pte>
+c0105024:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105027:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010502b:	75 24                	jne    c0105051 <check_boot_pgdir+0x9e>
+c010502d:	c7 44 24 0c 34 d5 10 	movl   $0xc010d534,0xc(%esp)
+c0105034:	c0 
+c0105035:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010503c:	c0 
+c010503d:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
+c0105044:	00 
+c0105045:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010504c:	e8 b4 b3 ff ff       	call   c0100405 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c0105051:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105054:	8b 00                	mov    (%eax),%eax
+c0105056:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010505b:	89 c2                	mov    %eax,%edx
+c010505d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105060:	39 c2                	cmp    %eax,%edx
+c0105062:	74 24                	je     c0105088 <check_boot_pgdir+0xd5>
+c0105064:	c7 44 24 0c 71 d5 10 	movl   $0xc010d571,0xc(%esp)
+c010506b:	c0 
+c010506c:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0105073:	c0 
+c0105074:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
+c010507b:	00 
+c010507c:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0105083:	e8 7d b3 ff ff       	call   c0100405 <__panic>
+    for (i = 0; i < npage; i += PGSIZE)
+c0105088:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c010508f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105092:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0105097:	39 c2                	cmp    %eax,%edx
+c0105099:	0f 82 26 ff ff ff    	jb     c0104fc5 <check_boot_pgdir+0x12>
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c010509f:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c01050a4:	05 ac 0f 00 00       	add    $0xfac,%eax
+c01050a9:	8b 00                	mov    (%eax),%eax
+c01050ab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01050b0:	89 c2                	mov    %eax,%edx
+c01050b2:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c01050b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01050ba:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c01050c1:	77 23                	ja     c01050e6 <check_boot_pgdir+0x133>
+c01050c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01050c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01050ca:	c7 44 24 08 84 d1 10 	movl   $0xc010d184,0x8(%esp)
+c01050d1:	c0 
+c01050d2:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
+c01050d9:	00 
+c01050da:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01050e1:	e8 1f b3 ff ff       	call   c0100405 <__panic>
+c01050e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01050e9:	05 00 00 00 40       	add    $0x40000000,%eax
+c01050ee:	39 d0                	cmp    %edx,%eax
+c01050f0:	74 24                	je     c0105116 <check_boot_pgdir+0x163>
+c01050f2:	c7 44 24 0c 88 d5 10 	movl   $0xc010d588,0xc(%esp)
+c01050f9:	c0 
+c01050fa:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0105101:	c0 
+c0105102:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
+c0105109:	00 
+c010510a:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0105111:	e8 ef b2 ff ff       	call   c0100405 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c0105116:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c010511b:	8b 00                	mov    (%eax),%eax
+c010511d:	85 c0                	test   %eax,%eax
+c010511f:	74 24                	je     c0105145 <check_boot_pgdir+0x192>
+c0105121:	c7 44 24 0c bc d5 10 	movl   $0xc010d5bc,0xc(%esp)
+c0105128:	c0 
+c0105129:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0105130:	c0 
+c0105131:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
+c0105138:	00 
+c0105139:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c0105140:	e8 c0 b2 ff ff       	call   c0100405 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c0105145:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010514c:	e8 8a e8 ff ff       	call   c01039db <alloc_pages>
+c0105151:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c0105154:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0105159:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c0105160:	00 
+c0105161:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
+c0105168:	00 
+c0105169:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010516c:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0105170:	89 04 24             	mov    %eax,(%esp)
+c0105173:	e8 97 f5 ff ff       	call   c010470f <page_insert>
+c0105178:	85 c0                	test   %eax,%eax
+c010517a:	74 24                	je     c01051a0 <check_boot_pgdir+0x1ed>
+c010517c:	c7 44 24 0c d0 d5 10 	movl   $0xc010d5d0,0xc(%esp)
+c0105183:	c0 
+c0105184:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010518b:	c0 
+c010518c:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
+c0105193:	00 
+c0105194:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010519b:	e8 65 b2 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p) == 1);
+c01051a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01051a3:	89 04 24             	mov    %eax,(%esp)
+c01051a6:	e8 2b e6 ff ff       	call   c01037d6 <page_ref>
+c01051ab:	83 f8 01             	cmp    $0x1,%eax
+c01051ae:	74 24                	je     c01051d4 <check_boot_pgdir+0x221>
+c01051b0:	c7 44 24 0c fe d5 10 	movl   $0xc010d5fe,0xc(%esp)
+c01051b7:	c0 
+c01051b8:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01051bf:	c0 
+c01051c0:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
+c01051c7:	00 
+c01051c8:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01051cf:	e8 31 b2 ff ff       	call   c0100405 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c01051d4:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c01051d9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
+c01051e0:	00 
+c01051e1:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
+c01051e8:	00 
+c01051e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01051ec:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01051f0:	89 04 24             	mov    %eax,(%esp)
+c01051f3:	e8 17 f5 ff ff       	call   c010470f <page_insert>
+c01051f8:	85 c0                	test   %eax,%eax
+c01051fa:	74 24                	je     c0105220 <check_boot_pgdir+0x26d>
+c01051fc:	c7 44 24 0c 10 d6 10 	movl   $0xc010d610,0xc(%esp)
+c0105203:	c0 
+c0105204:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010520b:	c0 
+c010520c:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
+c0105213:	00 
+c0105214:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010521b:	e8 e5 b1 ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p) == 2);
+c0105220:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105223:	89 04 24             	mov    %eax,(%esp)
+c0105226:	e8 ab e5 ff ff       	call   c01037d6 <page_ref>
+c010522b:	83 f8 02             	cmp    $0x2,%eax
+c010522e:	74 24                	je     c0105254 <check_boot_pgdir+0x2a1>
+c0105230:	c7 44 24 0c 47 d6 10 	movl   $0xc010d647,0xc(%esp)
+c0105237:	c0 
+c0105238:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c010523f:	c0 
+c0105240:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
+c0105247:	00 
+c0105248:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c010524f:	e8 b1 b1 ff ff       	call   c0100405 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c0105254:	c7 45 e8 58 d6 10 c0 	movl   $0xc010d658,-0x18(%ebp)
+    strcpy((void *)0x100, str);
+c010525b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010525e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105262:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c0105269:	e8 03 69 00 00       	call   c010bb71 <strcpy>
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c010526e:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
+c0105275:	00 
+c0105276:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c010527d:	e8 66 69 00 00       	call   c010bbe8 <strcmp>
+c0105282:	85 c0                	test   %eax,%eax
+c0105284:	74 24                	je     c01052aa <check_boot_pgdir+0x2f7>
+c0105286:	c7 44 24 0c 70 d6 10 	movl   $0xc010d670,0xc(%esp)
+c010528d:	c0 
+c010528e:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c0105295:	c0 
+c0105296:	c7 44 24 04 e5 02 00 	movl   $0x2e5,0x4(%esp)
+c010529d:	00 
+c010529e:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01052a5:	e8 5b b1 ff ff       	call   c0100405 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c01052aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01052ad:	89 04 24             	mov    %eax,(%esp)
+c01052b0:	e8 77 e4 ff ff       	call   c010372c <page2kva>
+c01052b5:	05 00 01 00 00       	add    $0x100,%eax
+c01052ba:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c01052bd:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
+c01052c4:	e8 52 68 00 00       	call   c010bb1b <strlen>
+c01052c9:	85 c0                	test   %eax,%eax
+c01052cb:	74 24                	je     c01052f1 <check_boot_pgdir+0x33e>
+c01052cd:	c7 44 24 0c a8 d6 10 	movl   $0xc010d6a8,0xc(%esp)
+c01052d4:	c0 
+c01052d5:	c7 44 24 08 cd d1 10 	movl   $0xc010d1cd,0x8(%esp)
+c01052dc:	c0 
+c01052dd:	c7 44 24 04 e8 02 00 	movl   $0x2e8,0x4(%esp)
+c01052e4:	00 
+c01052e5:	c7 04 24 a8 d1 10 c0 	movl   $0xc010d1a8,(%esp)
+c01052ec:	e8 14 b1 ff ff       	call   c0100405 <__panic>
+
+    free_page(p);
+c01052f1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01052f8:	00 
+c01052f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01052fc:	89 04 24             	mov    %eax,(%esp)
+c01052ff:	e8 42 e7 ff ff       	call   c0103a46 <free_pages>
+    free_page(pde2page(boot_pgdir[0]));
+c0105304:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0105309:	8b 00                	mov    (%eax),%eax
+c010530b:	89 04 24             	mov    %eax,(%esp)
+c010530e:	e8 ab e4 ff ff       	call   c01037be <pde2page>
+c0105313:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010531a:	00 
+c010531b:	89 04 24             	mov    %eax,(%esp)
+c010531e:	e8 23 e7 ff ff       	call   c0103a46 <free_pages>
+    boot_pgdir[0] = 0;
+c0105323:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0105328:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c010532e:	c7 04 24 cc d6 10 c0 	movl   $0xc010d6cc,(%esp)
+c0105335:	e8 74 af ff ff       	call   c01002ae <cprintf>
+}
+c010533a:	90                   	nop
+c010533b:	c9                   	leave  
+c010533c:	c3                   	ret    
+
+c010533d <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm)
+{
+c010533d:	55                   	push   %ebp
+c010533e:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0105340:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105343:	83 e0 04             	and    $0x4,%eax
+c0105346:	85 c0                	test   %eax,%eax
+c0105348:	74 04                	je     c010534e <perm2str+0x11>
+c010534a:	b0 75                	mov    $0x75,%al
+c010534c:	eb 02                	jmp    c0105350 <perm2str+0x13>
+c010534e:	b0 2d                	mov    $0x2d,%al
+c0105350:	a2 08 50 1b c0       	mov    %al,0xc01b5008
+    str[1] = 'r';
+c0105355:	c6 05 09 50 1b c0 72 	movb   $0x72,0xc01b5009
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c010535c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010535f:	83 e0 02             	and    $0x2,%eax
+c0105362:	85 c0                	test   %eax,%eax
+c0105364:	74 04                	je     c010536a <perm2str+0x2d>
+c0105366:	b0 77                	mov    $0x77,%al
+c0105368:	eb 02                	jmp    c010536c <perm2str+0x2f>
+c010536a:	b0 2d                	mov    $0x2d,%al
+c010536c:	a2 0a 50 1b c0       	mov    %al,0xc01b500a
+    str[3] = '\0';
+c0105371:	c6 05 0b 50 1b c0 00 	movb   $0x0,0xc01b500b
+    return str;
+c0105378:	b8 08 50 1b c0       	mov    $0xc01b5008,%eax
+}
+c010537d:	5d                   	pop    %ebp
+c010537e:	c3                   	ret    
+
+c010537f <get_pgtable_items>:
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store)
+{
+c010537f:	55                   	push   %ebp
+c0105380:	89 e5                	mov    %esp,%ebp
+c0105382:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right)
+c0105385:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105388:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010538b:	72 0d                	jb     c010539a <get_pgtable_items+0x1b>
+    {
+        return 0;
+c010538d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105392:	e9 98 00 00 00       	jmp    c010542f <get_pgtable_items+0xb0>
+    }
+    while (start < right && !(table[start] & PTE_P))
+    {
+        start++;
+c0105397:	ff 45 10             	incl   0x10(%ebp)
+    while (start < right && !(table[start] & PTE_P))
+c010539a:	8b 45 10             	mov    0x10(%ebp),%eax
+c010539d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01053a0:	73 18                	jae    c01053ba <get_pgtable_items+0x3b>
+c01053a2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01053a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01053ac:	8b 45 14             	mov    0x14(%ebp),%eax
+c01053af:	01 d0                	add    %edx,%eax
+c01053b1:	8b 00                	mov    (%eax),%eax
+c01053b3:	83 e0 01             	and    $0x1,%eax
+c01053b6:	85 c0                	test   %eax,%eax
+c01053b8:	74 dd                	je     c0105397 <get_pgtable_items+0x18>
+    }
+    if (start < right)
+c01053ba:	8b 45 10             	mov    0x10(%ebp),%eax
+c01053bd:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01053c0:	73 68                	jae    c010542a <get_pgtable_items+0xab>
+    {
+        if (left_store != NULL)
+c01053c2:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c01053c6:	74 08                	je     c01053d0 <get_pgtable_items+0x51>
+        {
+            *left_store = start;
+c01053c8:	8b 45 18             	mov    0x18(%ebp),%eax
+c01053cb:	8b 55 10             	mov    0x10(%ebp),%edx
+c01053ce:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start++] & PTE_USER);
+c01053d0:	8b 45 10             	mov    0x10(%ebp),%eax
+c01053d3:	8d 50 01             	lea    0x1(%eax),%edx
+c01053d6:	89 55 10             	mov    %edx,0x10(%ebp)
+c01053d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01053e0:	8b 45 14             	mov    0x14(%ebp),%eax
+c01053e3:	01 d0                	add    %edx,%eax
+c01053e5:	8b 00                	mov    (%eax),%eax
+c01053e7:	83 e0 07             	and    $0x7,%eax
+c01053ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm)
+c01053ed:	eb 03                	jmp    c01053f2 <get_pgtable_items+0x73>
+        {
+            start++;
+c01053ef:	ff 45 10             	incl   0x10(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm)
+c01053f2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01053f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01053f8:	73 1d                	jae    c0105417 <get_pgtable_items+0x98>
+c01053fa:	8b 45 10             	mov    0x10(%ebp),%eax
+c01053fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105404:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105407:	01 d0                	add    %edx,%eax
+c0105409:	8b 00                	mov    (%eax),%eax
+c010540b:	83 e0 07             	and    $0x7,%eax
+c010540e:	89 c2                	mov    %eax,%edx
+c0105410:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105413:	39 c2                	cmp    %eax,%edx
+c0105415:	74 d8                	je     c01053ef <get_pgtable_items+0x70>
+        }
+        if (right_store != NULL)
+c0105417:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010541b:	74 08                	je     c0105425 <get_pgtable_items+0xa6>
+        {
+            *right_store = start;
+c010541d:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0105420:	8b 55 10             	mov    0x10(%ebp),%edx
+c0105423:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c0105425:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105428:	eb 05                	jmp    c010542f <get_pgtable_items+0xb0>
+    }
+    return 0;
+c010542a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010542f:	c9                   	leave  
+c0105430:	c3                   	ret    
+
+c0105431 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void print_pgdir(void)
+{
+c0105431:	55                   	push   %ebp
+c0105432:	89 e5                	mov    %esp,%ebp
+c0105434:	57                   	push   %edi
+c0105435:	56                   	push   %esi
+c0105436:	53                   	push   %ebx
+c0105437:	83 ec 4c             	sub    $0x4c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c010543a:	c7 04 24 ec d6 10 c0 	movl   $0xc010d6ec,(%esp)
+c0105441:	e8 68 ae ff ff       	call   c01002ae <cprintf>
+    size_t left, right = 0, perm;
+c0105446:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0)
+c010544d:	e9 fa 00 00 00       	jmp    c010554c <print_pgdir+0x11b>
+    {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0105452:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105455:	89 04 24             	mov    %eax,(%esp)
+c0105458:	e8 e0 fe ff ff       	call   c010533d <perm2str>
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c010545d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c0105460:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105463:	29 d1                	sub    %edx,%ecx
+c0105465:	89 ca                	mov    %ecx,%edx
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0105467:	89 d6                	mov    %edx,%esi
+c0105469:	c1 e6 16             	shl    $0x16,%esi
+c010546c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010546f:	89 d3                	mov    %edx,%ebx
+c0105471:	c1 e3 16             	shl    $0x16,%ebx
+c0105474:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105477:	89 d1                	mov    %edx,%ecx
+c0105479:	c1 e1 16             	shl    $0x16,%ecx
+c010547c:	8b 7d dc             	mov    -0x24(%ebp),%edi
+c010547f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105482:	29 d7                	sub    %edx,%edi
+c0105484:	89 fa                	mov    %edi,%edx
+c0105486:	89 44 24 14          	mov    %eax,0x14(%esp)
+c010548a:	89 74 24 10          	mov    %esi,0x10(%esp)
+c010548e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c0105492:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0105496:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010549a:	c7 04 24 1d d7 10 c0 	movl   $0xc010d71d,(%esp)
+c01054a1:	e8 08 ae ff ff       	call   c01002ae <cprintf>
+        size_t l, r = left * NPTEENTRY;
+c01054a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01054a9:	c1 e0 0a             	shl    $0xa,%eax
+c01054ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0)
+c01054af:	eb 54                	jmp    c0105505 <print_pgdir+0xd4>
+        {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01054b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01054b4:	89 04 24             	mov    %eax,(%esp)
+c01054b7:	e8 81 fe ff ff       	call   c010533d <perm2str>
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c01054bc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+c01054bf:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01054c2:	29 d1                	sub    %edx,%ecx
+c01054c4:	89 ca                	mov    %ecx,%edx
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01054c6:	89 d6                	mov    %edx,%esi
+c01054c8:	c1 e6 0c             	shl    $0xc,%esi
+c01054cb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01054ce:	89 d3                	mov    %edx,%ebx
+c01054d0:	c1 e3 0c             	shl    $0xc,%ebx
+c01054d3:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01054d6:	89 d1                	mov    %edx,%ecx
+c01054d8:	c1 e1 0c             	shl    $0xc,%ecx
+c01054db:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+c01054de:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01054e1:	29 d7                	sub    %edx,%edi
+c01054e3:	89 fa                	mov    %edi,%edx
+c01054e5:	89 44 24 14          	mov    %eax,0x14(%esp)
+c01054e9:	89 74 24 10          	mov    %esi,0x10(%esp)
+c01054ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01054f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01054f5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01054f9:	c7 04 24 3c d7 10 c0 	movl   $0xc010d73c,(%esp)
+c0105500:	e8 a9 ad ff ff       	call   c01002ae <cprintf>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0)
+c0105505:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
+c010550a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010550d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105510:	89 d3                	mov    %edx,%ebx
+c0105512:	c1 e3 0a             	shl    $0xa,%ebx
+c0105515:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105518:	89 d1                	mov    %edx,%ecx
+c010551a:	c1 e1 0a             	shl    $0xa,%ecx
+c010551d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
+c0105520:	89 54 24 14          	mov    %edx,0x14(%esp)
+c0105524:	8d 55 d8             	lea    -0x28(%ebp),%edx
+c0105527:	89 54 24 10          	mov    %edx,0x10(%esp)
+c010552b:	89 74 24 0c          	mov    %esi,0xc(%esp)
+c010552f:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105533:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0105537:	89 0c 24             	mov    %ecx,(%esp)
+c010553a:	e8 40 fe ff ff       	call   c010537f <get_pgtable_items>
+c010553f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105542:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105546:	0f 85 65 ff ff ff    	jne    c01054b1 <print_pgdir+0x80>
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0)
+c010554c:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
+c0105551:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105554:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c0105557:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010555b:	8d 55 e0             	lea    -0x20(%ebp),%edx
+c010555e:	89 54 24 10          	mov    %edx,0x10(%esp)
+c0105562:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0105566:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010556a:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
+c0105571:	00 
+c0105572:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0105579:	e8 01 fe ff ff       	call   c010537f <get_pgtable_items>
+c010557e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105581:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105585:	0f 85 c7 fe ff ff    	jne    c0105452 <print_pgdir+0x21>
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c010558b:	c7 04 24 60 d7 10 c0 	movl   $0xc010d760,(%esp)
+c0105592:	e8 17 ad ff ff       	call   c01002ae <cprintf>
+}
+c0105597:	90                   	nop
+c0105598:	83 c4 4c             	add    $0x4c,%esp
+c010559b:	5b                   	pop    %ebx
+c010559c:	5e                   	pop    %esi
+c010559d:	5f                   	pop    %edi
+c010559e:	5d                   	pop    %ebp
+c010559f:	c3                   	ret    
+
+c01055a0 <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{
+c01055a0:	55                   	push   %ebp
+c01055a1:	89 e5                	mov    %esp,%ebp
+c01055a3:	83 ec 10             	sub    $0x10,%esp
+c01055a6:	c7 45 fc dc 70 1b c0 	movl   $0xc01b70dc,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01055ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01055b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01055b3:	89 50 04             	mov    %edx,0x4(%eax)
+c01055b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01055b9:	8b 50 04             	mov    0x4(%eax),%edx
+c01055bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01055bf:	89 10                	mov    %edx,(%eax)
+    list_init(&pra_list_head);
+    mm->sm_priv = &pra_list_head;
+c01055c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055c4:	c7 40 14 dc 70 1b c0 	movl   $0xc01b70dc,0x14(%eax)
+    //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+    return 0;
+c01055cb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055d0:	c9                   	leave  
+c01055d1:	c3                   	ret    
+
+c01055d2 <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c01055d2:	55                   	push   %ebp
+c01055d3:	89 e5                	mov    %esp,%ebp
+c01055d5:	83 ec 48             	sub    $0x48,%esp
+    list_entry_t *head = (list_entry_t *)mm->sm_priv;
+c01055d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055db:	8b 40 14             	mov    0x14(%eax),%eax
+c01055de:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry = &(page->pra_page_link);
+c01055e1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01055e4:	83 c0 14             	add    $0x14,%eax
+c01055e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    assert(entry != NULL && head != NULL);
+c01055ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01055ee:	74 06                	je     c01055f6 <_fifo_map_swappable+0x24>
+c01055f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01055f4:	75 24                	jne    c010561a <_fifo_map_swappable+0x48>
+c01055f6:	c7 44 24 0c 94 d7 10 	movl   $0xc010d794,0xc(%esp)
+c01055fd:	c0 
+c01055fe:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105605:	c0 
+c0105606:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
+c010560d:	00 
+c010560e:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105615:	e8 eb ad ff ff       	call   c0100405 <__panic>
+c010561a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010561d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105620:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105623:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105626:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105629:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010562c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010562f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0105632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105635:	8b 40 04             	mov    0x4(%eax),%eax
+c0105638:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010563b:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010563e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105641:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c0105644:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0105647:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010564a:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010564d:	89 10                	mov    %edx,(%eax)
+c010564f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105652:	8b 10                	mov    (%eax),%edx
+c0105654:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105657:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010565a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010565d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105660:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105663:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105666:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0105669:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: YOUR CODE*/
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
+    return 0;
+c010566b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105670:	c9                   	leave  
+c0105671:	c3                   	ret    
+
+c0105672 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then assign the value of *ptr_page to the addr of this page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page **ptr_page, int in_tick)
+{
+c0105672:	55                   	push   %ebp
+c0105673:	89 e5                	mov    %esp,%ebp
+c0105675:	83 ec 38             	sub    $0x38,%esp
+    list_entry_t *head = (list_entry_t *)mm->sm_priv;
+c0105678:	8b 45 08             	mov    0x8(%ebp),%eax
+c010567b:	8b 40 14             	mov    0x14(%eax),%eax
+c010567e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(head != NULL);
+c0105681:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105685:	75 24                	jne    c01056ab <_fifo_swap_out_victim+0x39>
+c0105687:	c7 44 24 0c db d7 10 	movl   $0xc010d7db,0xc(%esp)
+c010568e:	c0 
+c010568f:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105696:	c0 
+c0105697:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
+c010569e:	00 
+c010569f:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01056a6:	e8 5a ad ff ff       	call   c0100405 <__panic>
+    assert(in_tick == 0);
+c01056ab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01056af:	74 24                	je     c01056d5 <_fifo_swap_out_victim+0x63>
+c01056b1:	c7 44 24 0c e8 d7 10 	movl   $0xc010d7e8,0xc(%esp)
+c01056b8:	c0 
+c01056b9:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c01056c0:	c0 
+c01056c1:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
+c01056c8:	00 
+c01056c9:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01056d0:	e8 30 ad ff ff       	call   c0100405 <__panic>
+    /* Select the victim */
+    /*LAB3 EXERCISE 2: YOUR CODE*/
+    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+    //(2)  assign the value of *ptr_page to the addr of this page
+    list_entry_t *le = head->prev;
+c01056d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056d8:	8b 00                	mov    (%eax),%eax
+c01056da:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    struct Page *p = le2page(le, pra_page_link);
+c01056dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01056e0:	83 e8 14             	sub    $0x14,%eax
+c01056e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01056e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01056e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c01056ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01056ef:	8b 40 04             	mov    0x4(%eax),%eax
+c01056f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01056f5:	8b 12                	mov    (%edx),%edx
+c01056f7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01056fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01056fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105700:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105703:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0105706:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105709:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010570c:	89 10                	mov    %edx,(%eax)
+    list_del(le);
+    *ptr_page = p;
+c010570e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105711:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0105714:	89 10                	mov    %edx,(%eax)
+    return 0;
+c0105716:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010571b:	c9                   	leave  
+c010571c:	c3                   	ret    
+
+c010571d <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void)
+{
+c010571d:	55                   	push   %ebp
+c010571e:	89 e5                	mov    %esp,%ebp
+c0105720:	83 ec 18             	sub    $0x18,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0105723:	c7 04 24 f8 d7 10 c0 	movl   $0xc010d7f8,(%esp)
+c010572a:	e8 7f ab ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c010572f:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0105734:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num == 4);
+c0105737:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010573c:	83 f8 04             	cmp    $0x4,%eax
+c010573f:	74 24                	je     c0105765 <_fifo_check_swap+0x48>
+c0105741:	c7 44 24 0c 1e d8 10 	movl   $0xc010d81e,0xc(%esp)
+c0105748:	c0 
+c0105749:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105750:	c0 
+c0105751:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
+c0105758:	00 
+c0105759:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105760:	e8 a0 ac ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105765:	c7 04 24 30 d8 10 c0 	movl   $0xc010d830,(%esp)
+c010576c:	e8 3d ab ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c0105771:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105776:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num == 4);
+c0105779:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010577e:	83 f8 04             	cmp    $0x4,%eax
+c0105781:	74 24                	je     c01057a7 <_fifo_check_swap+0x8a>
+c0105783:	c7 44 24 0c 1e d8 10 	movl   $0xc010d81e,0xc(%esp)
+c010578a:	c0 
+c010578b:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105792:	c0 
+c0105793:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
+c010579a:	00 
+c010579b:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01057a2:	e8 5e ac ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c01057a7:	c7 04 24 58 d8 10 c0 	movl   $0xc010d858,(%esp)
+c01057ae:	e8 fb aa ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c01057b3:	b8 00 40 00 00       	mov    $0x4000,%eax
+c01057b8:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num == 4);
+c01057bb:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01057c0:	83 f8 04             	cmp    $0x4,%eax
+c01057c3:	74 24                	je     c01057e9 <_fifo_check_swap+0xcc>
+c01057c5:	c7 44 24 0c 1e d8 10 	movl   $0xc010d81e,0xc(%esp)
+c01057cc:	c0 
+c01057cd:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c01057d4:	c0 
+c01057d5:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
+c01057dc:	00 
+c01057dd:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01057e4:	e8 1c ac ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c01057e9:	c7 04 24 80 d8 10 c0 	movl   $0xc010d880,(%esp)
+c01057f0:	e8 b9 aa ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c01057f5:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01057fa:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num == 4);
+c01057fd:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0105802:	83 f8 04             	cmp    $0x4,%eax
+c0105805:	74 24                	je     c010582b <_fifo_check_swap+0x10e>
+c0105807:	c7 44 24 0c 1e d8 10 	movl   $0xc010d81e,0xc(%esp)
+c010580e:	c0 
+c010580f:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105816:	c0 
+c0105817:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
+c010581e:	00 
+c010581f:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105826:	e8 da ab ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c010582b:	c7 04 24 a8 d8 10 c0 	movl   $0xc010d8a8,(%esp)
+c0105832:	e8 77 aa ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c0105837:	b8 00 50 00 00       	mov    $0x5000,%eax
+c010583c:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num == 5);
+c010583f:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0105844:	83 f8 05             	cmp    $0x5,%eax
+c0105847:	74 24                	je     c010586d <_fifo_check_swap+0x150>
+c0105849:	c7 44 24 0c ce d8 10 	movl   $0xc010d8ce,0xc(%esp)
+c0105850:	c0 
+c0105851:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105858:	c0 
+c0105859:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
+c0105860:	00 
+c0105861:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105868:	e8 98 ab ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c010586d:	c7 04 24 80 d8 10 c0 	movl   $0xc010d880,(%esp)
+c0105874:	e8 35 aa ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c0105879:	b8 00 20 00 00       	mov    $0x2000,%eax
+c010587e:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num == 5);
+c0105881:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0105886:	83 f8 05             	cmp    $0x5,%eax
+c0105889:	74 24                	je     c01058af <_fifo_check_swap+0x192>
+c010588b:	c7 44 24 0c ce d8 10 	movl   $0xc010d8ce,0xc(%esp)
+c0105892:	c0 
+c0105893:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c010589a:	c0 
+c010589b:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
+c01058a2:	00 
+c01058a3:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01058aa:	e8 56 ab ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c01058af:	c7 04 24 30 d8 10 c0 	movl   $0xc010d830,(%esp)
+c01058b6:	e8 f3 a9 ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x1000 = 0x0a;
+c01058bb:	b8 00 10 00 00       	mov    $0x1000,%eax
+c01058c0:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num == 6);
+c01058c3:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01058c8:	83 f8 06             	cmp    $0x6,%eax
+c01058cb:	74 24                	je     c01058f1 <_fifo_check_swap+0x1d4>
+c01058cd:	c7 44 24 0c df d8 10 	movl   $0xc010d8df,0xc(%esp)
+c01058d4:	c0 
+c01058d5:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c01058dc:	c0 
+c01058dd:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01058e4:	00 
+c01058e5:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01058ec:	e8 14 ab ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c01058f1:	c7 04 24 80 d8 10 c0 	movl   $0xc010d880,(%esp)
+c01058f8:	e8 b1 a9 ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x2000 = 0x0b;
+c01058fd:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0105902:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num == 7);
+c0105905:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010590a:	83 f8 07             	cmp    $0x7,%eax
+c010590d:	74 24                	je     c0105933 <_fifo_check_swap+0x216>
+c010590f:	c7 44 24 0c f0 d8 10 	movl   $0xc010d8f0,0xc(%esp)
+c0105916:	c0 
+c0105917:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c010591e:	c0 
+c010591f:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
+c0105926:	00 
+c0105927:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c010592e:	e8 d2 aa ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0105933:	c7 04 24 f8 d7 10 c0 	movl   $0xc010d7f8,(%esp)
+c010593a:	e8 6f a9 ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x3000 = 0x0c;
+c010593f:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0105944:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num == 8);
+c0105947:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010594c:	83 f8 08             	cmp    $0x8,%eax
+c010594f:	74 24                	je     c0105975 <_fifo_check_swap+0x258>
+c0105951:	c7 44 24 0c 01 d9 10 	movl   $0xc010d901,0xc(%esp)
+c0105958:	c0 
+c0105959:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105960:	c0 
+c0105961:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
+c0105968:	00 
+c0105969:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105970:	e8 90 aa ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0105975:	c7 04 24 58 d8 10 c0 	movl   $0xc010d858,(%esp)
+c010597c:	e8 2d a9 ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x4000 = 0x0d;
+c0105981:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0105986:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num == 9);
+c0105989:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010598e:	83 f8 09             	cmp    $0x9,%eax
+c0105991:	74 24                	je     c01059b7 <_fifo_check_swap+0x29a>
+c0105993:	c7 44 24 0c 12 d9 10 	movl   $0xc010d912,0xc(%esp)
+c010599a:	c0 
+c010599b:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c01059a2:	c0 
+c01059a3:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
+c01059aa:	00 
+c01059ab:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01059b2:	e8 4e aa ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c01059b7:	c7 04 24 a8 d8 10 c0 	movl   $0xc010d8a8,(%esp)
+c01059be:	e8 eb a8 ff ff       	call   c01002ae <cprintf>
+    *(unsigned char *)0x5000 = 0x0e;
+c01059c3:	b8 00 50 00 00       	mov    $0x5000,%eax
+c01059c8:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num == 10);
+c01059cb:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01059d0:	83 f8 0a             	cmp    $0xa,%eax
+c01059d3:	74 24                	je     c01059f9 <_fifo_check_swap+0x2dc>
+c01059d5:	c7 44 24 0c 23 d9 10 	movl   $0xc010d923,0xc(%esp)
+c01059dc:	c0 
+c01059dd:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c01059e4:	c0 
+c01059e5:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
+c01059ec:	00 
+c01059ed:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c01059f4:	e8 0c aa ff ff       	call   c0100405 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c01059f9:	c7 04 24 30 d8 10 c0 	movl   $0xc010d830,(%esp)
+c0105a00:	e8 a9 a8 ff ff       	call   c01002ae <cprintf>
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0105a05:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105a0a:	0f b6 00             	movzbl (%eax),%eax
+c0105a0d:	3c 0a                	cmp    $0xa,%al
+c0105a0f:	74 24                	je     c0105a35 <_fifo_check_swap+0x318>
+c0105a11:	c7 44 24 0c 38 d9 10 	movl   $0xc010d938,0xc(%esp)
+c0105a18:	c0 
+c0105a19:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105a20:	c0 
+c0105a21:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c0105a28:	00 
+c0105a29:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105a30:	e8 d0 a9 ff ff       	call   c0100405 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0105a35:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105a3a:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num == 11);
+c0105a3d:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0105a42:	83 f8 0b             	cmp    $0xb,%eax
+c0105a45:	74 24                	je     c0105a6b <_fifo_check_swap+0x34e>
+c0105a47:	c7 44 24 0c 59 d9 10 	movl   $0xc010d959,0xc(%esp)
+c0105a4e:	c0 
+c0105a4f:	c7 44 24 08 b2 d7 10 	movl   $0xc010d7b2,0x8(%esp)
+c0105a56:	c0 
+c0105a57:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
+c0105a5e:	00 
+c0105a5f:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
+c0105a66:	e8 9a a9 ff ff       	call   c0100405 <__panic>
+    return 0;
+c0105a6b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105a70:	c9                   	leave  
+c0105a71:	c3                   	ret    
+
+c0105a72 <_fifo_init>:
+
+static int
+_fifo_init(void)
+{
+c0105a72:	55                   	push   %ebp
+c0105a73:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0105a75:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105a7a:	5d                   	pop    %ebp
+c0105a7b:	c3                   	ret    
+
+c0105a7c <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0105a7c:	55                   	push   %ebp
+c0105a7d:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0105a7f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105a84:	5d                   	pop    %ebp
+c0105a85:	c3                   	ret    
+
+c0105a86 <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{
+c0105a86:	55                   	push   %ebp
+c0105a87:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0105a89:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105a8e:	5d                   	pop    %ebp
+c0105a8f:	c3                   	ret    
+
+c0105a90 <lock_init>:
+#define local_intr_restore(x)   __intr_restore(x);
+
+typedef volatile bool lock_t;
+
+static inline void
+lock_init(lock_t *lock) {
+c0105a90:	55                   	push   %ebp
+c0105a91:	89 e5                	mov    %esp,%ebp
+    *lock = 0;
+c0105a93:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105a96:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+}
+c0105a9c:	90                   	nop
+c0105a9d:	5d                   	pop    %ebp
+c0105a9e:	c3                   	ret    
+
+c0105a9f <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c0105a9f:	55                   	push   %ebp
+c0105aa0:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c0105aa2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105aa5:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0105aa8:	5d                   	pop    %ebp
+c0105aa9:	c3                   	ret    
+
+c0105aaa <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c0105aaa:	55                   	push   %ebp
+c0105aab:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c0105aad:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ab0:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105ab3:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c0105ab6:	90                   	nop
+c0105ab7:	5d                   	pop    %ebp
+c0105ab8:	c3                   	ret    
+
+c0105ab9 <pa2page>:
+pa2page(uintptr_t pa) {
+c0105ab9:	55                   	push   %ebp
+c0105aba:	89 e5                	mov    %esp,%ebp
+c0105abc:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0105abf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ac2:	c1 e8 0c             	shr    $0xc,%eax
+c0105ac5:	89 c2                	mov    %eax,%edx
+c0105ac7:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0105acc:	39 c2                	cmp    %eax,%edx
+c0105ace:	72 1c                	jb     c0105aec <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0105ad0:	c7 44 24 08 80 d9 10 	movl   $0xc010d980,0x8(%esp)
+c0105ad7:	c0 
+c0105ad8:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0105adf:	00 
+c0105ae0:	c7 04 24 9f d9 10 c0 	movl   $0xc010d99f,(%esp)
+c0105ae7:	e8 19 a9 ff ff       	call   c0100405 <__panic>
+    return &pages[PPN(pa)];
+c0105aec:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c0105af1:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105af4:	c1 ea 0c             	shr    $0xc,%edx
+c0105af7:	c1 e2 05             	shl    $0x5,%edx
+c0105afa:	01 d0                	add    %edx,%eax
+}
+c0105afc:	c9                   	leave  
+c0105afd:	c3                   	ret    
+
+c0105afe <pde2page>:
+pde2page(pde_t pde) {
+c0105afe:	55                   	push   %ebp
+c0105aff:	89 e5                	mov    %esp,%ebp
+c0105b01:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c0105b04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105b07:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105b0c:	89 04 24             	mov    %eax,(%esp)
+c0105b0f:	e8 a5 ff ff ff       	call   c0105ab9 <pa2page>
+}
+c0105b14:	c9                   	leave  
+c0105b15:	c3                   	ret    
+
+c0105b16 <mm_create>:
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void)
+{
+c0105b16:	55                   	push   %ebp
+c0105b17:	89 e5                	mov    %esp,%ebp
+c0105b19:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c0105b1c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c0105b23:	e8 cd 17 00 00       	call   c01072f5 <kmalloc>
+c0105b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL)
+c0105b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105b2f:	74 79                	je     c0105baa <mm_create+0x94>
+    {
+        list_init(&(mm->mmap_list));
+c0105b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b34:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    elm->prev = elm->next = elm;
+c0105b37:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0105b3d:	89 50 04             	mov    %edx,0x4(%eax)
+c0105b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b43:	8b 50 04             	mov    0x4(%eax),%edx
+c0105b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b49:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c0105b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b4e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c0105b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b58:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c0105b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b62:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok)
+c0105b69:	a1 14 50 1b c0       	mov    0xc01b5014,%eax
+c0105b6e:	85 c0                	test   %eax,%eax
+c0105b70:	74 0d                	je     c0105b7f <mm_create+0x69>
+            swap_init_mm(mm);
+c0105b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b75:	89 04 24             	mov    %eax,(%esp)
+c0105b78:	e8 fc 19 00 00       	call   c0107579 <swap_init_mm>
+c0105b7d:	eb 0a                	jmp    c0105b89 <mm_create+0x73>
+        else
+            mm->sm_priv = NULL;
+c0105b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b82:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+        set_mm_count(mm, 0);
+c0105b89:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0105b90:	00 
+c0105b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b94:	89 04 24             	mov    %eax,(%esp)
+c0105b97:	e8 0e ff ff ff       	call   c0105aaa <set_mm_count>
+        lock_init(&(mm->mm_lock));
+c0105b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b9f:	83 c0 1c             	add    $0x1c,%eax
+c0105ba2:	89 04 24             	mov    %eax,(%esp)
+c0105ba5:	e8 e6 fe ff ff       	call   c0105a90 <lock_init>
+    }
+    return mm;
+c0105baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105bad:	c9                   	leave  
+c0105bae:	c3                   	ret    
+
+c0105baf <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags)
+{
+c0105baf:	55                   	push   %ebp
+c0105bb0:	89 e5                	mov    %esp,%ebp
+c0105bb2:	83 ec 28             	sub    $0x28,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c0105bb5:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
+c0105bbc:	e8 34 17 00 00       	call   c01072f5 <kmalloc>
+c0105bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL)
+c0105bc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105bc8:	74 1b                	je     c0105be5 <vma_create+0x36>
+    {
+        vma->vm_start = vm_start;
+c0105bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bcd:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105bd0:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c0105bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bd6:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105bd9:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c0105bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bdf:	8b 55 10             	mov    0x10(%ebp),%edx
+c0105be2:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c0105be5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105be8:	c9                   	leave  
+c0105be9:	c3                   	ret    
+
+c0105bea <find_vma>:
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr)
+{
+c0105bea:	55                   	push   %ebp
+c0105beb:	89 e5                	mov    %esp,%ebp
+c0105bed:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c0105bf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL)
+c0105bf7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105bfb:	0f 84 95 00 00 00    	je     c0105c96 <find_vma+0xac>
+    {
+        vma = mm->mmap_cache;
+c0105c01:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c04:	8b 40 08             	mov    0x8(%eax),%eax
+c0105c07:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr))
+c0105c0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0105c0e:	74 16                	je     c0105c26 <find_vma+0x3c>
+c0105c10:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105c13:	8b 40 04             	mov    0x4(%eax),%eax
+c0105c16:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0105c19:	72 0b                	jb     c0105c26 <find_vma+0x3c>
+c0105c1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105c1e:	8b 40 08             	mov    0x8(%eax),%eax
+c0105c21:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0105c24:	72 61                	jb     c0105c87 <find_vma+0x9d>
+        {
+            bool found = 0;
+c0105c26:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+            list_entry_t *list = &(mm->mmap_list), *le = list;
+c0105c2d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c30:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105c33:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            while ((le = list_next(le)) != list)
+c0105c39:	eb 28                	jmp    c0105c63 <find_vma+0x79>
+            {
+                vma = le2vma(le, list_link);
+c0105c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c3e:	83 e8 10             	sub    $0x10,%eax
+c0105c41:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                if (vma->vm_start <= addr && addr < vma->vm_end)
+c0105c44:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105c47:	8b 40 04             	mov    0x4(%eax),%eax
+c0105c4a:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0105c4d:	72 14                	jb     c0105c63 <find_vma+0x79>
+c0105c4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105c52:	8b 40 08             	mov    0x8(%eax),%eax
+c0105c55:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0105c58:	73 09                	jae    c0105c63 <find_vma+0x79>
+                {
+                    found = 1;
+c0105c5a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                    break;
+c0105c61:	eb 17                	jmp    c0105c7a <find_vma+0x90>
+c0105c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c66:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    return listelm->next;
+c0105c69:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105c6c:	8b 40 04             	mov    0x4(%eax),%eax
+            while ((le = list_next(le)) != list)
+c0105c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105c78:	75 c1                	jne    c0105c3b <find_vma+0x51>
+                }
+            }
+            if (!found)
+c0105c7a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c0105c7e:	75 07                	jne    c0105c87 <find_vma+0x9d>
+            {
+                vma = NULL;
+c0105c80:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+            }
+        }
+        if (vma != NULL)
+c0105c87:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0105c8b:	74 09                	je     c0105c96 <find_vma+0xac>
+        {
+            mm->mmap_cache = vma;
+c0105c8d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c90:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0105c93:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c0105c96:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0105c99:	c9                   	leave  
+c0105c9a:	c3                   	ret    
+
+c0105c9b <check_vma_overlap>:
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next)
+{
+c0105c9b:	55                   	push   %ebp
+c0105c9c:	89 e5                	mov    %esp,%ebp
+c0105c9e:	83 ec 18             	sub    $0x18,%esp
+    assert(prev->vm_start < prev->vm_end);
+c0105ca1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105ca4:	8b 50 04             	mov    0x4(%eax),%edx
+c0105ca7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105caa:	8b 40 08             	mov    0x8(%eax),%eax
+c0105cad:	39 c2                	cmp    %eax,%edx
+c0105caf:	72 24                	jb     c0105cd5 <check_vma_overlap+0x3a>
+c0105cb1:	c7 44 24 0c ad d9 10 	movl   $0xc010d9ad,0xc(%esp)
+c0105cb8:	c0 
+c0105cb9:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105cc0:	c0 
+c0105cc1:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
+c0105cc8:	00 
+c0105cc9:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105cd0:	e8 30 a7 ff ff       	call   c0100405 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c0105cd5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105cd8:	8b 50 08             	mov    0x8(%eax),%edx
+c0105cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105cde:	8b 40 04             	mov    0x4(%eax),%eax
+c0105ce1:	39 c2                	cmp    %eax,%edx
+c0105ce3:	76 24                	jbe    c0105d09 <check_vma_overlap+0x6e>
+c0105ce5:	c7 44 24 0c f0 d9 10 	movl   $0xc010d9f0,0xc(%esp)
+c0105cec:	c0 
+c0105ced:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105cf4:	c0 
+c0105cf5:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
+c0105cfc:	00 
+c0105cfd:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105d04:	e8 fc a6 ff ff       	call   c0100405 <__panic>
+    assert(next->vm_start < next->vm_end);
+c0105d09:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d0c:	8b 50 04             	mov    0x4(%eax),%edx
+c0105d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d12:	8b 40 08             	mov    0x8(%eax),%eax
+c0105d15:	39 c2                	cmp    %eax,%edx
+c0105d17:	72 24                	jb     c0105d3d <check_vma_overlap+0xa2>
+c0105d19:	c7 44 24 0c 0f da 10 	movl   $0xc010da0f,0xc(%esp)
+c0105d20:	c0 
+c0105d21:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105d28:	c0 
+c0105d29:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
+c0105d30:	00 
+c0105d31:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105d38:	e8 c8 a6 ff ff       	call   c0100405 <__panic>
+}
+c0105d3d:	90                   	nop
+c0105d3e:	c9                   	leave  
+c0105d3f:	c3                   	ret    
+
+c0105d40 <insert_vma_struct>:
+
+// insert_vma_struct -insert vma in mm's list link
+void insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma)
+{
+c0105d40:	55                   	push   %ebp
+c0105d41:	89 e5                	mov    %esp,%ebp
+c0105d43:	83 ec 48             	sub    $0x48,%esp
+    assert(vma->vm_start < vma->vm_end);
+c0105d46:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d49:	8b 50 04             	mov    0x4(%eax),%edx
+c0105d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d4f:	8b 40 08             	mov    0x8(%eax),%eax
+c0105d52:	39 c2                	cmp    %eax,%edx
+c0105d54:	72 24                	jb     c0105d7a <insert_vma_struct+0x3a>
+c0105d56:	c7 44 24 0c 2d da 10 	movl   $0xc010da2d,0xc(%esp)
+c0105d5d:	c0 
+c0105d5e:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105d65:	c0 
+c0105d66:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
+c0105d6d:	00 
+c0105d6e:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105d75:	e8 8b a6 ff ff       	call   c0100405 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c0105d7a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105d7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c0105d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105d83:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    list_entry_t *le = list;
+c0105d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105d89:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while ((le = list_next(le)) != list)
+c0105d8c:	eb 1f                	jmp    c0105dad <insert_vma_struct+0x6d>
+    {
+        struct vma_struct *mmap_prev = le2vma(le, list_link);
+c0105d8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105d91:	83 e8 10             	sub    $0x10,%eax
+c0105d94:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (mmap_prev->vm_start > vma->vm_start)
+c0105d97:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105d9a:	8b 50 04             	mov    0x4(%eax),%edx
+c0105d9d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105da0:	8b 40 04             	mov    0x4(%eax),%eax
+c0105da3:	39 c2                	cmp    %eax,%edx
+c0105da5:	77 1f                	ja     c0105dc6 <insert_vma_struct+0x86>
+        {
+            break;
+        }
+        le_prev = le;
+c0105da7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105db0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105db3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105db6:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != list)
+c0105db9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105dbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105dbf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105dc2:	75 ca                	jne    c0105d8e <insert_vma_struct+0x4e>
+c0105dc4:	eb 01                	jmp    c0105dc7 <insert_vma_struct+0x87>
+            break;
+c0105dc6:	90                   	nop
+c0105dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105dca:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105dcd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105dd0:	8b 40 04             	mov    0x4(%eax),%eax
+    }
+
+    le_next = list_next(le_prev);
+c0105dd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+
+    /* check overlap */
+    if (le_prev != list)
+c0105dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105dd9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105ddc:	74 15                	je     c0105df3 <insert_vma_struct+0xb3>
+    {
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c0105dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105de1:	8d 50 f0             	lea    -0x10(%eax),%edx
+c0105de4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105de7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105deb:	89 14 24             	mov    %edx,(%esp)
+c0105dee:	e8 a8 fe ff ff       	call   c0105c9b <check_vma_overlap>
+    }
+    if (le_next != list)
+c0105df3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105df6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105df9:	74 15                	je     c0105e10 <insert_vma_struct+0xd0>
+    {
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c0105dfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105dfe:	83 e8 10             	sub    $0x10,%eax
+c0105e01:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105e05:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105e08:	89 04 24             	mov    %eax,(%esp)
+c0105e0b:	e8 8b fe ff ff       	call   c0105c9b <check_vma_overlap>
+    }
+
+    vma->vm_mm = mm;
+c0105e10:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105e13:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105e16:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c0105e18:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105e1b:	8d 50 10             	lea    0x10(%eax),%edx
+c0105e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105e21:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0105e24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    __list_add(elm, listelm, listelm->next);
+c0105e27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105e2a:	8b 40 04             	mov    0x4(%eax),%eax
+c0105e2d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105e30:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0105e33:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0105e36:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0105e39:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    prev->next = next->prev = elm;
+c0105e3c:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105e3f:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0105e42:	89 10                	mov    %edx,(%eax)
+c0105e44:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105e47:	8b 10                	mov    (%eax),%edx
+c0105e49:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0105e4c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0105e4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105e52:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0105e55:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105e58:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105e5b:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0105e5e:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count++;
+c0105e60:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e63:	8b 40 10             	mov    0x10(%eax),%eax
+c0105e66:	8d 50 01             	lea    0x1(%eax),%edx
+c0105e69:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e6c:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c0105e6f:	90                   	nop
+c0105e70:	c9                   	leave  
+c0105e71:	c3                   	ret    
+
+c0105e72 <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void mm_destroy(struct mm_struct *mm)
+{
+c0105e72:	55                   	push   %ebp
+c0105e73:	89 e5                	mov    %esp,%ebp
+c0105e75:	83 ec 38             	sub    $0x38,%esp
+    assert(mm_count(mm) == 0);
+c0105e78:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105e7b:	89 04 24             	mov    %eax,(%esp)
+c0105e7e:	e8 1c fc ff ff       	call   c0105a9f <mm_count>
+c0105e83:	85 c0                	test   %eax,%eax
+c0105e85:	74 24                	je     c0105eab <mm_destroy+0x39>
+c0105e87:	c7 44 24 0c 49 da 10 	movl   $0xc010da49,0xc(%esp)
+c0105e8e:	c0 
+c0105e8f:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105e96:	c0 
+c0105e97:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
+c0105e9e:	00 
+c0105e9f:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105ea6:	e8 5a a5 ff ff       	call   c0100405 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c0105eab:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105eae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list)
+c0105eb1:	eb 36                	jmp    c0105ee9 <mm_destroy+0x77>
+c0105eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105eb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c0105eb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105ebc:	8b 40 04             	mov    0x4(%eax),%eax
+c0105ebf:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0105ec2:	8b 12                	mov    (%edx),%edx
+c0105ec4:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0105ec7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    prev->next = next;
+c0105eca:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105ecd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105ed0:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0105ed3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105ed6:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0105ed9:	89 10                	mov    %edx,(%eax)
+    {
+        list_del(le);
+        kfree(le2vma(le, list_link)); //kfree vma
+c0105edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ede:	83 e8 10             	sub    $0x10,%eax
+c0105ee1:	89 04 24             	mov    %eax,(%esp)
+c0105ee4:	e8 27 14 00 00       	call   c0107310 <kfree>
+c0105ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105eec:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return listelm->next;
+c0105eef:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105ef2:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(list)) != list)
+c0105ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105ef8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105efb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0105efe:	75 b3                	jne    c0105eb3 <mm_destroy+0x41>
+    }
+    kfree(mm); //kfree mm
+c0105f00:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105f03:	89 04 24             	mov    %eax,(%esp)
+c0105f06:	e8 05 14 00 00       	call   c0107310 <kfree>
+    mm = NULL;
+c0105f0b:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0105f12:	90                   	nop
+c0105f13:	c9                   	leave  
+c0105f14:	c3                   	ret    
+
+c0105f15 <mm_map>:
+
+int mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+           struct vma_struct **vma_store)
+{
+c0105f15:	55                   	push   %ebp
+c0105f16:	89 e5                	mov    %esp,%ebp
+c0105f18:	83 ec 38             	sub    $0x38,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c0105f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105f1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105f24:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105f29:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105f2c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c0105f33:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105f36:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105f39:	01 c2                	add    %eax,%edx
+c0105f3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105f3e:	01 d0                	add    %edx,%eax
+c0105f40:	48                   	dec    %eax
+c0105f41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105f44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105f47:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105f4c:	f7 75 e8             	divl   -0x18(%ebp)
+c0105f4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105f52:	29 d0                	sub    %edx,%eax
+c0105f54:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end))
+c0105f57:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c0105f5e:	76 11                	jbe    c0105f71 <mm_map+0x5c>
+c0105f60:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105f63:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105f66:	73 09                	jae    c0105f71 <mm_map+0x5c>
+c0105f68:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c0105f6f:	76 0a                	jbe    c0105f7b <mm_map+0x66>
+    {
+        return -E_INVAL;
+c0105f71:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0105f76:	e9 b0 00 00 00       	jmp    c010602b <mm_map+0x116>
+    }
+
+    assert(mm != NULL);
+c0105f7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105f7f:	75 24                	jne    c0105fa5 <mm_map+0x90>
+c0105f81:	c7 44 24 0c 5b da 10 	movl   $0xc010da5b,0xc(%esp)
+c0105f88:	c0 
+c0105f89:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0105f90:	c0 
+c0105f91:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
+c0105f98:	00 
+c0105f99:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0105fa0:	e8 60 a4 ff ff       	call   c0100405 <__panic>
+
+    int ret = -E_INVAL;
+c0105fa5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start)
+c0105fac:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105faf:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105fb3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105fb6:	89 04 24             	mov    %eax,(%esp)
+c0105fb9:	e8 2c fc ff ff       	call   c0105bea <find_vma>
+c0105fbe:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105fc1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105fc5:	74 0b                	je     c0105fd2 <mm_map+0xbd>
+c0105fc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105fca:	8b 40 04             	mov    0x4(%eax),%eax
+c0105fcd:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c0105fd0:	77 52                	ja     c0106024 <mm_map+0x10f>
+    {
+        goto out;
+    }
+    ret = -E_NO_MEM;
+c0105fd2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL)
+c0105fd9:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105fdc:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0105fe0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105fe3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0105fe7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105fea:	89 04 24             	mov    %eax,(%esp)
+c0105fed:	e8 bd fb ff ff       	call   c0105baf <vma_create>
+c0105ff2:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105ff5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105ff9:	74 2c                	je     c0106027 <mm_map+0x112>
+    {
+        goto out;
+    }
+    insert_vma_struct(mm, vma);
+c0105ffb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105ffe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106002:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106005:	89 04 24             	mov    %eax,(%esp)
+c0106008:	e8 33 fd ff ff       	call   c0105d40 <insert_vma_struct>
+    if (vma_store != NULL)
+c010600d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0106011:	74 08                	je     c010601b <mm_map+0x106>
+    {
+        *vma_store = vma;
+c0106013:	8b 45 18             	mov    0x18(%ebp),%eax
+c0106016:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106019:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c010601b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106022:	eb 04                	jmp    c0106028 <mm_map+0x113>
+        goto out;
+c0106024:	90                   	nop
+c0106025:	eb 01                	jmp    c0106028 <mm_map+0x113>
+        goto out;
+c0106027:	90                   	nop
+
+out:
+    return ret;
+c0106028:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010602b:	c9                   	leave  
+c010602c:	c3                   	ret    
+
+c010602d <dup_mmap>:
+
+int dup_mmap(struct mm_struct *to, struct mm_struct *from)
+{
+c010602d:	55                   	push   %ebp
+c010602e:	89 e5                	mov    %esp,%ebp
+c0106030:	56                   	push   %esi
+c0106031:	53                   	push   %ebx
+c0106032:	83 ec 40             	sub    $0x40,%esp
+    assert(to != NULL && from != NULL);
+c0106035:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106039:	74 06                	je     c0106041 <dup_mmap+0x14>
+c010603b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010603f:	75 24                	jne    c0106065 <dup_mmap+0x38>
+c0106041:	c7 44 24 0c 66 da 10 	movl   $0xc010da66,0xc(%esp)
+c0106048:	c0 
+c0106049:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106050:	c0 
+c0106051:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
+c0106058:	00 
+c0106059:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106060:	e8 a0 a3 ff ff       	call   c0100405 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c0106065:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106068:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010606b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010606e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list)
+c0106071:	e9 92 00 00 00       	jmp    c0106108 <dup_mmap+0xdb>
+    {
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c0106076:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106079:	83 e8 10             	sub    $0x10,%eax
+c010607c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c010607f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106082:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0106085:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106088:	8b 50 08             	mov    0x8(%eax),%edx
+c010608b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010608e:	8b 40 04             	mov    0x4(%eax),%eax
+c0106091:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106095:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106099:	89 04 24             	mov    %eax,(%esp)
+c010609c:	e8 0e fb ff ff       	call   c0105baf <vma_create>
+c01060a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL)
+c01060a4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01060a8:	75 07                	jne    c01060b1 <dup_mmap+0x84>
+        {
+            return -E_NO_MEM;
+c01060aa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01060af:	eb 76                	jmp    c0106127 <dup_mmap+0xfa>
+        }
+
+        insert_vma_struct(to, nvma);
+c01060b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01060b4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01060b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01060bb:	89 04 24             	mov    %eax,(%esp)
+c01060be:	e8 7d fc ff ff       	call   c0105d40 <insert_vma_struct>
+
+        bool share = 0;
+c01060c3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0)
+c01060ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01060cd:	8b 58 08             	mov    0x8(%eax),%ebx
+c01060d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01060d3:	8b 48 04             	mov    0x4(%eax),%ecx
+c01060d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01060d9:	8b 50 0c             	mov    0xc(%eax),%edx
+c01060dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01060df:	8b 40 0c             	mov    0xc(%eax),%eax
+c01060e2:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+c01060e5:	89 74 24 10          	mov    %esi,0x10(%esp)
+c01060e9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c01060ed:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c01060f1:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01060f5:	89 04 24             	mov    %eax,(%esp)
+c01060f8:	e8 af e3 ff ff       	call   c01044ac <copy_range>
+c01060fd:	85 c0                	test   %eax,%eax
+c01060ff:	74 07                	je     c0106108 <dup_mmap+0xdb>
+        {
+            return -E_NO_MEM;
+c0106101:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0106106:	eb 1f                	jmp    c0106127 <dup_mmap+0xfa>
+c0106108:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010610b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return listelm->prev;
+c010610e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106111:	8b 00                	mov    (%eax),%eax
+    while ((le = list_prev(le)) != list)
+c0106113:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106116:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106119:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010611c:	0f 85 54 ff ff ff    	jne    c0106076 <dup_mmap+0x49>
+        }
+    }
+    return 0;
+c0106122:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106127:	83 c4 40             	add    $0x40,%esp
+c010612a:	5b                   	pop    %ebx
+c010612b:	5e                   	pop    %esi
+c010612c:	5d                   	pop    %ebp
+c010612d:	c3                   	ret    
+
+c010612e <exit_mmap>:
+
+void exit_mmap(struct mm_struct *mm)
+{
+c010612e:	55                   	push   %ebp
+c010612f:	89 e5                	mov    %esp,%ebp
+c0106131:	83 ec 38             	sub    $0x38,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c0106134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106138:	74 0f                	je     c0106149 <exit_mmap+0x1b>
+c010613a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010613d:	89 04 24             	mov    %eax,(%esp)
+c0106140:	e8 5a f9 ff ff       	call   c0105a9f <mm_count>
+c0106145:	85 c0                	test   %eax,%eax
+c0106147:	74 24                	je     c010616d <exit_mmap+0x3f>
+c0106149:	c7 44 24 0c 84 da 10 	movl   $0xc010da84,0xc(%esp)
+c0106150:	c0 
+c0106151:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106158:	c0 
+c0106159:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
+c0106160:	00 
+c0106161:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106168:	e8 98 a2 ff ff       	call   c0100405 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c010616d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106170:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106173:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c0106176:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106179:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010617c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010617f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list)
+c0106182:	eb 28                	jmp    c01061ac <exit_mmap+0x7e>
+    {
+        struct vma_struct *vma = le2vma(le, list_link);
+c0106184:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106187:	83 e8 10             	sub    $0x10,%eax
+c010618a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c010618d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106190:	8b 50 08             	mov    0x8(%eax),%edx
+c0106193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106196:	8b 40 04             	mov    0x4(%eax),%eax
+c0106199:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010619d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01061a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01061a4:	89 04 24             	mov    %eax,(%esp)
+c01061a7:	e8 03 e1 ff ff       	call   c01042af <unmap_range>
+c01061ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01061af:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return listelm->next;
+c01061b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01061b5:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != list)
+c01061b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01061bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01061be:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01061c1:	75 c1                	jne    c0106184 <exit_mmap+0x56>
+    }
+    while ((le = list_next(le)) != list)
+c01061c3:	eb 28                	jmp    c01061ed <exit_mmap+0xbf>
+    {
+        struct vma_struct *vma = le2vma(le, list_link);
+c01061c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01061c8:	83 e8 10             	sub    $0x10,%eax
+c01061cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c01061ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061d1:	8b 50 08             	mov    0x8(%eax),%edx
+c01061d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061d7:	8b 40 04             	mov    0x4(%eax),%eax
+c01061da:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01061de:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01061e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01061e5:	89 04 24             	mov    %eax,(%esp)
+c01061e8:	e8 b7 e1 ff ff       	call   c01043a4 <exit_range>
+c01061ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01061f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01061f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01061f6:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != list)
+c01061f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01061fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01061ff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0106202:	75 c1                	jne    c01061c5 <exit_mmap+0x97>
+    }
+}
+c0106204:	90                   	nop
+c0106205:	c9                   	leave  
+c0106206:	c3                   	ret    
+
+c0106207 <copy_from_user>:
+
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable)
+{
+c0106207:	55                   	push   %ebp
+c0106208:	89 e5                	mov    %esp,%ebp
+c010620a:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable))
+c010620d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106210:	8b 55 18             	mov    0x18(%ebp),%edx
+c0106213:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c0106217:	8b 55 14             	mov    0x14(%ebp),%edx
+c010621a:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010621e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106222:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106225:	89 04 24             	mov    %eax,(%esp)
+c0106228:	e8 a2 09 00 00       	call   c0106bcf <user_mem_check>
+c010622d:	85 c0                	test   %eax,%eax
+c010622f:	75 07                	jne    c0106238 <copy_from_user+0x31>
+    {
+        return 0;
+c0106231:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106236:	eb 1e                	jmp    c0106256 <copy_from_user+0x4f>
+    }
+    memcpy(dst, src, len);
+c0106238:	8b 45 14             	mov    0x14(%ebp),%eax
+c010623b:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010623f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106242:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106246:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106249:	89 04 24             	mov    %eax,(%esp)
+c010624c:	e8 cd 5c 00 00       	call   c010bf1e <memcpy>
+    return 1;
+c0106251:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0106256:	c9                   	leave  
+c0106257:	c3                   	ret    
+
+c0106258 <copy_to_user>:
+
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len)
+{
+c0106258:	55                   	push   %ebp
+c0106259:	89 e5                	mov    %esp,%ebp
+c010625b:	83 ec 18             	sub    $0x18,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1))
+c010625e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106261:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0106268:	00 
+c0106269:	8b 55 14             	mov    0x14(%ebp),%edx
+c010626c:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106270:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106274:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106277:	89 04 24             	mov    %eax,(%esp)
+c010627a:	e8 50 09 00 00       	call   c0106bcf <user_mem_check>
+c010627f:	85 c0                	test   %eax,%eax
+c0106281:	75 07                	jne    c010628a <copy_to_user+0x32>
+    {
+        return 0;
+c0106283:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106288:	eb 1e                	jmp    c01062a8 <copy_to_user+0x50>
+    }
+    memcpy(dst, src, len);
+c010628a:	8b 45 14             	mov    0x14(%ebp),%eax
+c010628d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106291:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106294:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106298:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010629b:	89 04 24             	mov    %eax,(%esp)
+c010629e:	e8 7b 5c 00 00       	call   c010bf1e <memcpy>
+    return 1;
+c01062a3:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01062a8:	c9                   	leave  
+c01062a9:	c3                   	ret    
+
+c01062aa <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void vmm_init(void)
+{
+c01062aa:	55                   	push   %ebp
+c01062ab:	89 e5                	mov    %esp,%ebp
+c01062ad:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c01062b0:	e8 03 00 00 00       	call   c01062b8 <check_vmm>
+}
+c01062b5:	90                   	nop
+c01062b6:	c9                   	leave  
+c01062b7:	c3                   	ret    
+
+c01062b8 <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void)
+{
+c01062b8:	55                   	push   %ebp
+c01062b9:	89 e5                	mov    %esp,%ebp
+c01062bb:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01062be:	e8 b6 d7 ff ff       	call   c0103a79 <nr_free_pages>
+c01062c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    check_vma_struct();
+c01062c6:	e8 14 00 00 00       	call   c01062df <check_vma_struct>
+    check_pgfault();
+c01062cb:	e8 a1 04 00 00       	call   c0106771 <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c01062d0:	c7 04 24 a4 da 10 c0 	movl   $0xc010daa4,(%esp)
+c01062d7:	e8 d2 9f ff ff       	call   c01002ae <cprintf>
+}
+c01062dc:	90                   	nop
+c01062dd:	c9                   	leave  
+c01062de:	c3                   	ret    
+
+c01062df <check_vma_struct>:
+
+static void
+check_vma_struct(void)
+{
+c01062df:	55                   	push   %ebp
+c01062e0:	89 e5                	mov    %esp,%ebp
+c01062e2:	83 ec 68             	sub    $0x68,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c01062e5:	e8 8f d7 ff ff       	call   c0103a79 <nr_free_pages>
+c01062ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c01062ed:	e8 24 f8 ff ff       	call   c0105b16 <mm_create>
+c01062f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c01062f5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01062f9:	75 24                	jne    c010631f <check_vma_struct+0x40>
+c01062fb:	c7 44 24 0c 5b da 10 	movl   $0xc010da5b,0xc(%esp)
+c0106302:	c0 
+c0106303:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c010630a:	c0 
+c010630b:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
+c0106312:	00 
+c0106313:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c010631a:	e8 e6 a0 ff ff       	call   c0100405 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c010631f:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c0106326:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106329:	89 d0                	mov    %edx,%eax
+c010632b:	c1 e0 02             	shl    $0x2,%eax
+c010632e:	01 d0                	add    %edx,%eax
+c0106330:	01 c0                	add    %eax,%eax
+c0106332:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i--)
+c0106335:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106338:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010633b:	eb 6f                	jmp    c01063ac <check_vma_struct+0xcd>
+    {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c010633d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106340:	89 d0                	mov    %edx,%eax
+c0106342:	c1 e0 02             	shl    $0x2,%eax
+c0106345:	01 d0                	add    %edx,%eax
+c0106347:	83 c0 02             	add    $0x2,%eax
+c010634a:	89 c1                	mov    %eax,%ecx
+c010634c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010634f:	89 d0                	mov    %edx,%eax
+c0106351:	c1 e0 02             	shl    $0x2,%eax
+c0106354:	01 d0                	add    %edx,%eax
+c0106356:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010635d:	00 
+c010635e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c0106362:	89 04 24             	mov    %eax,(%esp)
+c0106365:	e8 45 f8 ff ff       	call   c0105baf <vma_create>
+c010636a:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        assert(vma != NULL);
+c010636d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0106371:	75 24                	jne    c0106397 <check_vma_struct+0xb8>
+c0106373:	c7 44 24 0c bc da 10 	movl   $0xc010dabc,0xc(%esp)
+c010637a:	c0 
+c010637b:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106382:	c0 
+c0106383:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
+c010638a:	00 
+c010638b:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106392:	e8 6e a0 ff ff       	call   c0100405 <__panic>
+        insert_vma_struct(mm, vma);
+c0106397:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010639a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010639e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01063a1:	89 04 24             	mov    %eax,(%esp)
+c01063a4:	e8 97 f9 ff ff       	call   c0105d40 <insert_vma_struct>
+    for (i = step1; i >= 1; i--)
+c01063a9:	ff 4d f4             	decl   -0xc(%ebp)
+c01063ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01063b0:	7f 8b                	jg     c010633d <check_vma_struct+0x5e>
+    }
+
+    for (i = step1 + 1; i <= step2; i++)
+c01063b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01063b5:	40                   	inc    %eax
+c01063b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01063b9:	eb 6f                	jmp    c010642a <check_vma_struct+0x14b>
+    {
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c01063bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01063be:	89 d0                	mov    %edx,%eax
+c01063c0:	c1 e0 02             	shl    $0x2,%eax
+c01063c3:	01 d0                	add    %edx,%eax
+c01063c5:	83 c0 02             	add    $0x2,%eax
+c01063c8:	89 c1                	mov    %eax,%ecx
+c01063ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01063cd:	89 d0                	mov    %edx,%eax
+c01063cf:	c1 e0 02             	shl    $0x2,%eax
+c01063d2:	01 d0                	add    %edx,%eax
+c01063d4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01063db:	00 
+c01063dc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c01063e0:	89 04 24             	mov    %eax,(%esp)
+c01063e3:	e8 c7 f7 ff ff       	call   c0105baf <vma_create>
+c01063e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma != NULL);
+c01063eb:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c01063ef:	75 24                	jne    c0106415 <check_vma_struct+0x136>
+c01063f1:	c7 44 24 0c bc da 10 	movl   $0xc010dabc,0xc(%esp)
+c01063f8:	c0 
+c01063f9:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106400:	c0 
+c0106401:	c7 44 24 04 38 01 00 	movl   $0x138,0x4(%esp)
+c0106408:	00 
+c0106409:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106410:	e8 f0 9f ff ff       	call   c0100405 <__panic>
+        insert_vma_struct(mm, vma);
+c0106415:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0106418:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010641c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010641f:	89 04 24             	mov    %eax,(%esp)
+c0106422:	e8 19 f9 ff ff       	call   c0105d40 <insert_vma_struct>
+    for (i = step1 + 1; i <= step2; i++)
+c0106427:	ff 45 f4             	incl   -0xc(%ebp)
+c010642a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010642d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0106430:	7e 89                	jle    c01063bb <check_vma_struct+0xdc>
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c0106432:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106435:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0106438:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010643b:	8b 40 04             	mov    0x4(%eax),%eax
+c010643e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i++)
+c0106441:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c0106448:	e9 96 00 00 00       	jmp    c01064e3 <check_vma_struct+0x204>
+    {
+        assert(le != &(mm->mmap_list));
+c010644d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106450:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0106453:	75 24                	jne    c0106479 <check_vma_struct+0x19a>
+c0106455:	c7 44 24 0c c8 da 10 	movl   $0xc010dac8,0xc(%esp)
+c010645c:	c0 
+c010645d:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106464:	c0 
+c0106465:	c7 44 24 04 40 01 00 	movl   $0x140,0x4(%esp)
+c010646c:	00 
+c010646d:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106474:	e8 8c 9f ff ff       	call   c0100405 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c0106479:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010647c:	83 e8 10             	sub    $0x10,%eax
+c010647f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c0106482:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0106485:	8b 48 04             	mov    0x4(%eax),%ecx
+c0106488:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010648b:	89 d0                	mov    %edx,%eax
+c010648d:	c1 e0 02             	shl    $0x2,%eax
+c0106490:	01 d0                	add    %edx,%eax
+c0106492:	39 c1                	cmp    %eax,%ecx
+c0106494:	75 17                	jne    c01064ad <check_vma_struct+0x1ce>
+c0106496:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0106499:	8b 48 08             	mov    0x8(%eax),%ecx
+c010649c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010649f:	89 d0                	mov    %edx,%eax
+c01064a1:	c1 e0 02             	shl    $0x2,%eax
+c01064a4:	01 d0                	add    %edx,%eax
+c01064a6:	83 c0 02             	add    $0x2,%eax
+c01064a9:	39 c1                	cmp    %eax,%ecx
+c01064ab:	74 24                	je     c01064d1 <check_vma_struct+0x1f2>
+c01064ad:	c7 44 24 0c e0 da 10 	movl   $0xc010dae0,0xc(%esp)
+c01064b4:	c0 
+c01064b5:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01064bc:	c0 
+c01064bd:	c7 44 24 04 42 01 00 	movl   $0x142,0x4(%esp)
+c01064c4:	00 
+c01064c5:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01064cc:	e8 34 9f ff ff       	call   c0100405 <__panic>
+c01064d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01064d4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c01064d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01064da:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c01064dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    for (i = 1; i <= step2; i++)
+c01064e0:	ff 45 f4             	incl   -0xc(%ebp)
+c01064e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01064e6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01064e9:	0f 8e 5e ff ff ff    	jle    c010644d <check_vma_struct+0x16e>
+    }
+
+    for (i = 5; i <= 5 * step2; i += 5)
+c01064ef:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c01064f6:	e9 cb 01 00 00       	jmp    c01066c6 <check_vma_struct+0x3e7>
+    {
+        struct vma_struct *vma1 = find_vma(mm, i);
+c01064fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01064fe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106502:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106505:	89 04 24             	mov    %eax,(%esp)
+c0106508:	e8 dd f6 ff ff       	call   c0105bea <find_vma>
+c010650d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma1 != NULL);
+c0106510:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0106514:	75 24                	jne    c010653a <check_vma_struct+0x25b>
+c0106516:	c7 44 24 0c 15 db 10 	movl   $0xc010db15,0xc(%esp)
+c010651d:	c0 
+c010651e:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106525:	c0 
+c0106526:	c7 44 24 04 49 01 00 	movl   $0x149,0x4(%esp)
+c010652d:	00 
+c010652e:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106535:	e8 cb 9e ff ff       	call   c0100405 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i + 1);
+c010653a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010653d:	40                   	inc    %eax
+c010653e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106542:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106545:	89 04 24             	mov    %eax,(%esp)
+c0106548:	e8 9d f6 ff ff       	call   c0105bea <find_vma>
+c010654d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        assert(vma2 != NULL);
+c0106550:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+c0106554:	75 24                	jne    c010657a <check_vma_struct+0x29b>
+c0106556:	c7 44 24 0c 22 db 10 	movl   $0xc010db22,0xc(%esp)
+c010655d:	c0 
+c010655e:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106565:	c0 
+c0106566:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
+c010656d:	00 
+c010656e:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106575:	e8 8b 9e ff ff       	call   c0100405 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i + 2);
+c010657a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010657d:	83 c0 02             	add    $0x2,%eax
+c0106580:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106584:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106587:	89 04 24             	mov    %eax,(%esp)
+c010658a:	e8 5b f6 ff ff       	call   c0105bea <find_vma>
+c010658f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(vma3 == NULL);
+c0106592:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0106596:	74 24                	je     c01065bc <check_vma_struct+0x2dd>
+c0106598:	c7 44 24 0c 2f db 10 	movl   $0xc010db2f,0xc(%esp)
+c010659f:	c0 
+c01065a0:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01065a7:	c0 
+c01065a8:	c7 44 24 04 4d 01 00 	movl   $0x14d,0x4(%esp)
+c01065af:	00 
+c01065b0:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01065b7:	e8 49 9e ff ff       	call   c0100405 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i + 3);
+c01065bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065bf:	83 c0 03             	add    $0x3,%eax
+c01065c2:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01065c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01065c9:	89 04 24             	mov    %eax,(%esp)
+c01065cc:	e8 19 f6 ff ff       	call   c0105bea <find_vma>
+c01065d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma4 == NULL);
+c01065d4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c01065d8:	74 24                	je     c01065fe <check_vma_struct+0x31f>
+c01065da:	c7 44 24 0c 3c db 10 	movl   $0xc010db3c,0xc(%esp)
+c01065e1:	c0 
+c01065e2:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01065e9:	c0 
+c01065ea:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
+c01065f1:	00 
+c01065f2:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01065f9:	e8 07 9e ff ff       	call   c0100405 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i + 4);
+c01065fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106601:	83 c0 04             	add    $0x4,%eax
+c0106604:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106608:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010660b:	89 04 24             	mov    %eax,(%esp)
+c010660e:	e8 d7 f5 ff ff       	call   c0105bea <find_vma>
+c0106613:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma5 == NULL);
+c0106616:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c010661a:	74 24                	je     c0106640 <check_vma_struct+0x361>
+c010661c:	c7 44 24 0c 49 db 10 	movl   $0xc010db49,0xc(%esp)
+c0106623:	c0 
+c0106624:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c010662b:	c0 
+c010662c:	c7 44 24 04 51 01 00 	movl   $0x151,0x4(%esp)
+c0106633:	00 
+c0106634:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c010663b:	e8 c5 9d ff ff       	call   c0100405 <__panic>
+
+        assert(vma1->vm_start == i && vma1->vm_end == i + 2);
+c0106640:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0106643:	8b 50 04             	mov    0x4(%eax),%edx
+c0106646:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106649:	39 c2                	cmp    %eax,%edx
+c010664b:	75 10                	jne    c010665d <check_vma_struct+0x37e>
+c010664d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0106650:	8b 40 08             	mov    0x8(%eax),%eax
+c0106653:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106656:	83 c2 02             	add    $0x2,%edx
+c0106659:	39 d0                	cmp    %edx,%eax
+c010665b:	74 24                	je     c0106681 <check_vma_struct+0x3a2>
+c010665d:	c7 44 24 0c 58 db 10 	movl   $0xc010db58,0xc(%esp)
+c0106664:	c0 
+c0106665:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c010666c:	c0 
+c010666d:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
+c0106674:	00 
+c0106675:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c010667c:	e8 84 9d ff ff       	call   c0100405 <__panic>
+        assert(vma2->vm_start == i && vma2->vm_end == i + 2);
+c0106681:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0106684:	8b 50 04             	mov    0x4(%eax),%edx
+c0106687:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010668a:	39 c2                	cmp    %eax,%edx
+c010668c:	75 10                	jne    c010669e <check_vma_struct+0x3bf>
+c010668e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0106691:	8b 40 08             	mov    0x8(%eax),%eax
+c0106694:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106697:	83 c2 02             	add    $0x2,%edx
+c010669a:	39 d0                	cmp    %edx,%eax
+c010669c:	74 24                	je     c01066c2 <check_vma_struct+0x3e3>
+c010669e:	c7 44 24 0c 88 db 10 	movl   $0xc010db88,0xc(%esp)
+c01066a5:	c0 
+c01066a6:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01066ad:	c0 
+c01066ae:	c7 44 24 04 54 01 00 	movl   $0x154,0x4(%esp)
+c01066b5:	00 
+c01066b6:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01066bd:	e8 43 9d ff ff       	call   c0100405 <__panic>
+    for (i = 5; i <= 5 * step2; i += 5)
+c01066c2:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c01066c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01066c9:	89 d0                	mov    %edx,%eax
+c01066cb:	c1 e0 02             	shl    $0x2,%eax
+c01066ce:	01 d0                	add    %edx,%eax
+c01066d0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01066d3:	0f 8e 22 fe ff ff    	jle    c01064fb <check_vma_struct+0x21c>
+    }
+
+    for (i = 4; i >= 0; i--)
+c01066d9:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c01066e0:	eb 6f                	jmp    c0106751 <check_vma_struct+0x472>
+    {
+        struct vma_struct *vma_below_5 = find_vma(mm, i);
+c01066e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01066e5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01066e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01066ec:	89 04 24             	mov    %eax,(%esp)
+c01066ef:	e8 f6 f4 ff ff       	call   c0105bea <find_vma>
+c01066f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        if (vma_below_5 != NULL)
+c01066f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01066fb:	74 27                	je     c0106724 <check_vma_struct+0x445>
+        {
+            cprintf("vma_below_5: i %x, start %x, end %x\n", i, vma_below_5->vm_start, vma_below_5->vm_end);
+c01066fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106700:	8b 50 08             	mov    0x8(%eax),%edx
+c0106703:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106706:	8b 40 04             	mov    0x4(%eax),%eax
+c0106709:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010670d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106711:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106714:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106718:	c7 04 24 b8 db 10 c0 	movl   $0xc010dbb8,(%esp)
+c010671f:	e8 8a 9b ff ff       	call   c01002ae <cprintf>
+        }
+        assert(vma_below_5 == NULL);
+c0106724:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0106728:	74 24                	je     c010674e <check_vma_struct+0x46f>
+c010672a:	c7 44 24 0c dd db 10 	movl   $0xc010dbdd,0xc(%esp)
+c0106731:	c0 
+c0106732:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106739:	c0 
+c010673a:	c7 44 24 04 5e 01 00 	movl   $0x15e,0x4(%esp)
+c0106741:	00 
+c0106742:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106749:	e8 b7 9c ff ff       	call   c0100405 <__panic>
+    for (i = 4; i >= 0; i--)
+c010674e:	ff 4d f4             	decl   -0xc(%ebp)
+c0106751:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106755:	79 8b                	jns    c01066e2 <check_vma_struct+0x403>
+    }
+
+    mm_destroy(mm);
+c0106757:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010675a:	89 04 24             	mov    %eax,(%esp)
+c010675d:	e8 10 f7 ff ff       	call   c0105e72 <mm_destroy>
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0106762:	c7 04 24 f4 db 10 c0 	movl   $0xc010dbf4,(%esp)
+c0106769:	e8 40 9b ff ff       	call   c01002ae <cprintf>
+}
+c010676e:	90                   	nop
+c010676f:	c9                   	leave  
+c0106770:	c3                   	ret    
+
+c0106771 <check_pgfault>:
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void)
+{
+c0106771:	55                   	push   %ebp
+c0106772:	89 e5                	mov    %esp,%ebp
+c0106774:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0106777:	e8 fd d2 ff ff       	call   c0103a79 <nr_free_pages>
+c010677c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c010677f:	e8 92 f3 ff ff       	call   c0105b16 <mm_create>
+c0106784:	a3 e4 70 1b c0       	mov    %eax,0xc01b70e4
+    assert(check_mm_struct != NULL);
+c0106789:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c010678e:	85 c0                	test   %eax,%eax
+c0106790:	75 24                	jne    c01067b6 <check_pgfault+0x45>
+c0106792:	c7 44 24 0c 13 dc 10 	movl   $0xc010dc13,0xc(%esp)
+c0106799:	c0 
+c010679a:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01067a1:	c0 
+c01067a2:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
+c01067a9:	00 
+c01067aa:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01067b1:	e8 4f 9c ff ff       	call   c0100405 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c01067b6:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c01067bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c01067be:	8b 15 e0 e9 12 c0    	mov    0xc012e9e0,%edx
+c01067c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01067c7:	89 50 0c             	mov    %edx,0xc(%eax)
+c01067ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01067cd:	8b 40 0c             	mov    0xc(%eax),%eax
+c01067d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c01067d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01067d6:	8b 00                	mov    (%eax),%eax
+c01067d8:	85 c0                	test   %eax,%eax
+c01067da:	74 24                	je     c0106800 <check_pgfault+0x8f>
+c01067dc:	c7 44 24 0c 2b dc 10 	movl   $0xc010dc2b,0xc(%esp)
+c01067e3:	c0 
+c01067e4:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c01067eb:	c0 
+c01067ec:	c7 44 24 04 73 01 00 	movl   $0x173,0x4(%esp)
+c01067f3:	00 
+c01067f4:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01067fb:	e8 05 9c ff ff       	call   c0100405 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0106800:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+c0106807:	00 
+c0106808:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
+c010680f:	00 
+c0106810:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0106817:	e8 93 f3 ff ff       	call   c0105baf <vma_create>
+c010681c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c010681f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0106823:	75 24                	jne    c0106849 <check_pgfault+0xd8>
+c0106825:	c7 44 24 0c bc da 10 	movl   $0xc010dabc,0xc(%esp)
+c010682c:	c0 
+c010682d:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106834:	c0 
+c0106835:	c7 44 24 04 76 01 00 	movl   $0x176,0x4(%esp)
+c010683c:	00 
+c010683d:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106844:	e8 bc 9b ff ff       	call   c0100405 <__panic>
+
+    insert_vma_struct(mm, vma);
+c0106849:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010684c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106850:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106853:	89 04 24             	mov    %eax,(%esp)
+c0106856:	e8 e5 f4 ff ff       	call   c0105d40 <insert_vma_struct>
+
+    uintptr_t addr = 0x100;
+c010685b:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0106862:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106865:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106869:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010686c:	89 04 24             	mov    %eax,(%esp)
+c010686f:	e8 76 f3 ff ff       	call   c0105bea <find_vma>
+c0106874:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c0106877:	74 24                	je     c010689d <check_pgfault+0x12c>
+c0106879:	c7 44 24 0c 39 dc 10 	movl   $0xc010dc39,0xc(%esp)
+c0106880:	c0 
+c0106881:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106888:	c0 
+c0106889:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
+c0106890:	00 
+c0106891:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106898:	e8 68 9b ff ff       	call   c0100405 <__panic>
+
+    int i, sum = 0;
+c010689d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i++)
+c01068a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01068ab:	eb 16                	jmp    c01068c3 <check_pgfault+0x152>
+    {
+        *(char *)(addr + i) = i;
+c01068ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01068b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01068b3:	01 d0                	add    %edx,%eax
+c01068b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01068b8:	88 10                	mov    %dl,(%eax)
+        sum += i;
+c01068ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01068bd:	01 45 f0             	add    %eax,-0x10(%ebp)
+    for (i = 0; i < 100; i++)
+c01068c0:	ff 45 f4             	incl   -0xc(%ebp)
+c01068c3:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01068c7:	7e e4                	jle    c01068ad <check_pgfault+0x13c>
+    }
+    for (i = 0; i < 100; i++)
+c01068c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01068d0:	eb 14                	jmp    c01068e6 <check_pgfault+0x175>
+    {
+        sum -= *(char *)(addr + i);
+c01068d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01068d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01068d8:	01 d0                	add    %edx,%eax
+c01068da:	0f b6 00             	movzbl (%eax),%eax
+c01068dd:	0f be c0             	movsbl %al,%eax
+c01068e0:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    for (i = 0; i < 100; i++)
+c01068e3:	ff 45 f4             	incl   -0xc(%ebp)
+c01068e6:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01068ea:	7e e6                	jle    c01068d2 <check_pgfault+0x161>
+    }
+    assert(sum == 0);
+c01068ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01068f0:	74 24                	je     c0106916 <check_pgfault+0x1a5>
+c01068f2:	c7 44 24 0c 53 dc 10 	movl   $0xc010dc53,0xc(%esp)
+c01068f9:	c0 
+c01068fa:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106901:	c0 
+c0106902:	c7 44 24 04 87 01 00 	movl   $0x187,0x4(%esp)
+c0106909:	00 
+c010690a:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c0106911:	e8 ef 9a ff ff       	call   c0100405 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0106916:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106919:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010691c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010691f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106924:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010692b:	89 04 24             	mov    %eax,(%esp)
+c010692e:	e8 97 dd ff ff       	call   c01046ca <page_remove>
+    free_page(pde2page(pgdir[0]));
+c0106933:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106936:	8b 00                	mov    (%eax),%eax
+c0106938:	89 04 24             	mov    %eax,(%esp)
+c010693b:	e8 be f1 ff ff       	call   c0105afe <pde2page>
+c0106940:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0106947:	00 
+c0106948:	89 04 24             	mov    %eax,(%esp)
+c010694b:	e8 f6 d0 ff ff       	call   c0103a46 <free_pages>
+    pgdir[0] = 0;
+c0106950:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106953:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0106959:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010695c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0106963:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106966:	89 04 24             	mov    %eax,(%esp)
+c0106969:	e8 04 f5 ff ff       	call   c0105e72 <mm_destroy>
+    check_mm_struct = NULL;
+c010696e:	c7 05 e4 70 1b c0 00 	movl   $0x0,0xc01b70e4
+c0106975:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0106978:	e8 fc d0 ff ff       	call   c0103a79 <nr_free_pages>
+c010697d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0106980:	74 24                	je     c01069a6 <check_pgfault+0x235>
+c0106982:	c7 44 24 0c 5c dc 10 	movl   $0xc010dc5c,0xc(%esp)
+c0106989:	c0 
+c010698a:	c7 44 24 08 cb d9 10 	movl   $0xc010d9cb,0x8(%esp)
+c0106991:	c0 
+c0106992:	c7 44 24 04 91 01 00 	movl   $0x191,0x4(%esp)
+c0106999:	00 
+c010699a:	c7 04 24 e0 d9 10 c0 	movl   $0xc010d9e0,(%esp)
+c01069a1:	e8 5f 9a ff ff       	call   c0100405 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c01069a6:	c7 04 24 83 dc 10 c0 	movl   $0xc010dc83,(%esp)
+c01069ad:	e8 fc 98 ff ff       	call   c01002ae <cprintf>
+}
+c01069b2:	90                   	nop
+c01069b3:	c9                   	leave  
+c01069b4:	c3                   	ret    
+
+c01069b5 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr)
+{
+c01069b5:	55                   	push   %ebp
+c01069b6:	89 e5                	mov    %esp,%ebp
+c01069b8:	83 ec 38             	sub    $0x38,%esp
+    int ret = -E_INVAL;
+c01069bb:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c01069c2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01069c5:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01069c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01069cc:	89 04 24             	mov    %eax,(%esp)
+c01069cf:	e8 16 f2 ff ff       	call   c0105bea <find_vma>
+c01069d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c01069d7:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01069dc:	40                   	inc    %eax
+c01069dd:	a3 0c 50 1b c0       	mov    %eax,0xc01b500c
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr)
+c01069e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01069e6:	74 0b                	je     c01069f3 <do_pgfault+0x3e>
+c01069e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01069eb:	8b 40 04             	mov    0x4(%eax),%eax
+c01069ee:	39 45 10             	cmp    %eax,0x10(%ebp)
+c01069f1:	73 18                	jae    c0106a0b <do_pgfault+0x56>
+    {
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c01069f3:	8b 45 10             	mov    0x10(%ebp),%eax
+c01069f6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01069fa:	c7 04 24 a0 dc 10 c0 	movl   $0xc010dca0,(%esp)
+c0106a01:	e8 a8 98 ff ff       	call   c01002ae <cprintf>
+        goto failed;
+c0106a06:	e9 bf 01 00 00       	jmp    c0106bca <do_pgfault+0x215>
+    }
+    //check the error_code
+    switch (error_code & 3)
+c0106a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106a0e:	83 e0 03             	and    $0x3,%eax
+c0106a11:	85 c0                	test   %eax,%eax
+c0106a13:	74 34                	je     c0106a49 <do_pgfault+0x94>
+c0106a15:	83 f8 01             	cmp    $0x1,%eax
+c0106a18:	74 1e                	je     c0106a38 <do_pgfault+0x83>
+    {
+    default:
+        /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE))
+c0106a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106a1d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106a20:	83 e0 02             	and    $0x2,%eax
+c0106a23:	85 c0                	test   %eax,%eax
+c0106a25:	75 40                	jne    c0106a67 <do_pgfault+0xb2>
+        {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c0106a27:	c7 04 24 d0 dc 10 c0 	movl   $0xc010dcd0,(%esp)
+c0106a2e:	e8 7b 98 ff ff       	call   c01002ae <cprintf>
+            goto failed;
+c0106a33:	e9 92 01 00 00       	jmp    c0106bca <do_pgfault+0x215>
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0106a38:	c7 04 24 30 dd 10 c0 	movl   $0xc010dd30,(%esp)
+c0106a3f:	e8 6a 98 ff ff       	call   c01002ae <cprintf>
+        goto failed;
+c0106a44:	e9 81 01 00 00       	jmp    c0106bca <do_pgfault+0x215>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC)))
+c0106a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106a4c:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106a4f:	83 e0 05             	and    $0x5,%eax
+c0106a52:	85 c0                	test   %eax,%eax
+c0106a54:	75 12                	jne    c0106a68 <do_pgfault+0xb3>
+        {
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0106a56:	c7 04 24 68 dd 10 c0 	movl   $0xc010dd68,(%esp)
+c0106a5d:	e8 4c 98 ff ff       	call   c01002ae <cprintf>
+            goto failed;
+c0106a62:	e9 63 01 00 00       	jmp    c0106bca <do_pgfault+0x215>
+        break;
+c0106a67:	90                   	nop
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0106a68:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE)
+c0106a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106a72:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106a75:	83 e0 02             	and    $0x2,%eax
+c0106a78:	85 c0                	test   %eax,%eax
+c0106a7a:	74 04                	je     c0106a80 <do_pgfault+0xcb>
+    {
+        perm |= PTE_W;
+c0106a7c:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0106a80:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106a83:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0106a86:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106a89:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106a8e:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0106a91:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep = NULL;
+c0106a98:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+c0106a9f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106aa2:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106aa5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0106aac:	00 
+c0106aad:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106ab0:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106ab4:	89 04 24             	mov    %eax,(%esp)
+c0106ab7:	e8 ff d5 ff ff       	call   c01040bb <get_pte>
+c0106abc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (ptep == NULL)
+c0106abf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106ac3:	75 11                	jne    c0106ad6 <do_pgfault+0x121>
+    {
+        cprintf("get_pte failed\n");
+c0106ac5:	c7 04 24 cb dd 10 c0 	movl   $0xc010ddcb,(%esp)
+c0106acc:	e8 dd 97 ff ff       	call   c01002ae <cprintf>
+        goto failed;
+c0106ad1:	e9 f4 00 00 00       	jmp    c0106bca <do_pgfault+0x215>
+    }
+
+    if (*ptep == 0)
+c0106ad6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106ad9:	8b 00                	mov    (%eax),%eax
+c0106adb:	85 c0                	test   %eax,%eax
+c0106add:	75 3a                	jne    c0106b19 <do_pgfault+0x164>
+    {
+        struct Page *page = pgdir_alloc_page(mm->pgdir, addr, perm);
+c0106adf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ae2:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106ae5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106ae8:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0106aec:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106aef:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106af3:	89 04 24             	mov    %eax,(%esp)
+c0106af6:	e8 29 dd ff ff       	call   c0104824 <pgdir_alloc_page>
+c0106afb:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        if (page == NULL)
+c0106afe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0106b02:	0f 85 bb 00 00 00    	jne    c0106bc3 <do_pgfault+0x20e>
+        {
+            cprintf("pgdir_alloc_page failed\n");
+c0106b08:	c7 04 24 db dd 10 c0 	movl   $0xc010dddb,(%esp)
+c0106b0f:	e8 9a 97 ff ff       	call   c01002ae <cprintf>
+            goto failed;
+c0106b14:	e9 b1 00 00 00       	jmp    c0106bca <do_pgfault+0x215>
+        }
+    }
+    else
+    {
+        if (swap_init_ok)
+c0106b19:	a1 14 50 1b c0       	mov    0xc01b5014,%eax
+c0106b1e:	85 c0                	test   %eax,%eax
+c0106b20:	0f 84 86 00 00 00    	je     c0106bac <do_pgfault+0x1f7>
+        {
+            struct Page *page = NULL;
+c0106b26:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+            if ((ret = swap_in(mm, addr, &page)) != 0)
+c0106b2d:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0106b30:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106b34:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b37:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106b3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106b3e:	89 04 24             	mov    %eax,(%esp)
+c0106b41:	e8 25 0c 00 00       	call   c010776b <swap_in>
+c0106b46:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106b49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106b4d:	74 0e                	je     c0106b5d <do_pgfault+0x1a8>
+            {
+                cprintf("swap_in failed\n");
+c0106b4f:	c7 04 24 f4 dd 10 c0 	movl   $0xc010ddf4,(%esp)
+c0106b56:	e8 53 97 ff ff       	call   c01002ae <cprintf>
+c0106b5b:	eb 6d                	jmp    c0106bca <do_pgfault+0x215>
+                goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+c0106b5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106b60:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106b63:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106b66:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0106b69:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c0106b6d:	8b 4d 10             	mov    0x10(%ebp),%ecx
+c0106b70:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c0106b74:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0106b78:	89 04 24             	mov    %eax,(%esp)
+c0106b7b:	e8 8f db ff ff       	call   c010470f <page_insert>
+            swap_map_swappable(mm, addr, page, 1);
+c0106b80:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106b83:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c0106b8a:	00 
+c0106b8b:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0106b8f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106b92:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106b96:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106b99:	89 04 24             	mov    %eax,(%esp)
+c0106b9c:	e8 08 0a 00 00       	call   c01075a9 <swap_map_swappable>
+            page->pra_vaddr = addr;
+c0106ba1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106ba4:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106ba7:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0106baa:	eb 17                	jmp    c0106bc3 <do_pgfault+0x20e>
+        }
+        else
+        {
+            cprintf("no swap_init_ok but ptep is %x, failed\n", *ptep);
+c0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106baf:	8b 00                	mov    (%eax),%eax
+c0106bb1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106bb5:	c7 04 24 04 de 10 c0 	movl   $0xc010de04,(%esp)
+c0106bbc:	e8 ed 96 ff ff       	call   c01002ae <cprintf>
+            goto failed;
+c0106bc1:	eb 07                	jmp    c0106bca <do_pgfault+0x215>
+        }
+    }
+    ret = 0;
+c0106bc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c0106bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106bcd:	c9                   	leave  
+c0106bce:	c3                   	ret    
+
+c0106bcf <user_mem_check>:
+
+bool user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write)
+{
+c0106bcf:	55                   	push   %ebp
+c0106bd0:	89 e5                	mov    %esp,%ebp
+c0106bd2:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL)
+c0106bd5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106bd9:	0f 84 e0 00 00 00    	je     c0106cbf <user_mem_check+0xf0>
+    {
+        if (!USER_ACCESS(addr, addr + len))
+c0106bdf:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0106be6:	76 1c                	jbe    c0106c04 <user_mem_check+0x35>
+c0106be8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106bee:	01 d0                	add    %edx,%eax
+c0106bf0:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0106bf3:	73 0f                	jae    c0106c04 <user_mem_check+0x35>
+c0106bf5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106bf8:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106bfb:	01 d0                	add    %edx,%eax
+c0106bfd:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c0106c02:	76 0a                	jbe    c0106c0e <user_mem_check+0x3f>
+        {
+            return 0;
+c0106c04:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106c09:	e9 e2 00 00 00       	jmp    c0106cf0 <user_mem_check+0x121>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c0106c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106c11:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0106c14:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106c17:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c1a:	01 d0                	add    %edx,%eax
+c0106c1c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end)
+c0106c1f:	e9 88 00 00 00       	jmp    c0106cac <user_mem_check+0xdd>
+        {
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start)
+c0106c24:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106c27:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0106c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106c2e:	89 04 24             	mov    %eax,(%esp)
+c0106c31:	e8 b4 ef ff ff       	call   c0105bea <find_vma>
+c0106c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106c39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106c3d:	74 0b                	je     c0106c4a <user_mem_check+0x7b>
+c0106c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c42:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c45:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c0106c48:	73 0a                	jae    c0106c54 <user_mem_check+0x85>
+            {
+                return 0;
+c0106c4a:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106c4f:	e9 9c 00 00 00       	jmp    c0106cf0 <user_mem_check+0x121>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ)))
+c0106c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c57:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106c5a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0106c5e:	74 07                	je     c0106c67 <user_mem_check+0x98>
+c0106c60:	ba 02 00 00 00       	mov    $0x2,%edx
+c0106c65:	eb 05                	jmp    c0106c6c <user_mem_check+0x9d>
+c0106c67:	ba 01 00 00 00       	mov    $0x1,%edx
+c0106c6c:	21 d0                	and    %edx,%eax
+c0106c6e:	85 c0                	test   %eax,%eax
+c0106c70:	75 07                	jne    c0106c79 <user_mem_check+0xaa>
+            {
+                return 0;
+c0106c72:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106c77:	eb 77                	jmp    c0106cf0 <user_mem_check+0x121>
+            }
+            if (write && (vma->vm_flags & VM_STACK))
+c0106c79:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0106c7d:	74 24                	je     c0106ca3 <user_mem_check+0xd4>
+c0106c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c82:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106c85:	83 e0 08             	and    $0x8,%eax
+c0106c88:	85 c0                	test   %eax,%eax
+c0106c8a:	74 17                	je     c0106ca3 <user_mem_check+0xd4>
+            {
+                if (start < vma->vm_start + PGSIZE)
+c0106c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c8f:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c92:	05 00 10 00 00       	add    $0x1000,%eax
+c0106c97:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c0106c9a:	73 07                	jae    c0106ca3 <user_mem_check+0xd4>
+                { //check stack start & size
+                    return 0;
+c0106c9c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106ca1:	eb 4d                	jmp    c0106cf0 <user_mem_check+0x121>
+                }
+            }
+            start = vma->vm_end;
+c0106ca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ca6:	8b 40 08             	mov    0x8(%eax),%eax
+c0106ca9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < end)
+c0106cac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106caf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0106cb2:	0f 82 6c ff ff ff    	jb     c0106c24 <user_mem_check+0x55>
+        }
+        return 1;
+c0106cb8:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106cbd:	eb 31                	jmp    c0106cf0 <user_mem_check+0x121>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c0106cbf:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c0106cc6:	76 23                	jbe    c0106ceb <user_mem_check+0x11c>
+c0106cc8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106ccb:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106cce:	01 d0                	add    %edx,%eax
+c0106cd0:	39 45 0c             	cmp    %eax,0xc(%ebp)
+c0106cd3:	73 16                	jae    c0106ceb <user_mem_check+0x11c>
+c0106cd5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106cd8:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106cdb:	01 d0                	add    %edx,%eax
+c0106cdd:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c0106ce2:	77 07                	ja     c0106ceb <user_mem_check+0x11c>
+c0106ce4:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106ce9:	eb 05                	jmp    c0106cf0 <user_mem_check+0x121>
+c0106ceb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106cf0:	c9                   	leave  
+c0106cf1:	c3                   	ret    
+
+c0106cf2 <__intr_save>:
+__intr_save(void) {
+c0106cf2:	55                   	push   %ebp
+c0106cf3:	89 e5                	mov    %esp,%ebp
+c0106cf5:	83 ec 18             	sub    $0x18,%esp
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0106cf8:	9c                   	pushf  
+c0106cf9:	58                   	pop    %eax
+c0106cfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0106cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0106d00:	25 00 02 00 00       	and    $0x200,%eax
+c0106d05:	85 c0                	test   %eax,%eax
+c0106d07:	74 0c                	je     c0106d15 <__intr_save+0x23>
+        intr_disable();
+c0106d09:	e8 e2 b4 ff ff       	call   c01021f0 <intr_disable>
+        return 1;
+c0106d0e:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106d13:	eb 05                	jmp    c0106d1a <__intr_save+0x28>
+    return 0;
+c0106d15:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106d1a:	c9                   	leave  
+c0106d1b:	c3                   	ret    
+
+c0106d1c <__intr_restore>:
+__intr_restore(bool flag) {
+c0106d1c:	55                   	push   %ebp
+c0106d1d:	89 e5                	mov    %esp,%ebp
+c0106d1f:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0106d22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106d26:	74 05                	je     c0106d2d <__intr_restore+0x11>
+        intr_enable();
+c0106d28:	e8 bc b4 ff ff       	call   c01021e9 <intr_enable>
+}
+c0106d2d:	90                   	nop
+c0106d2e:	c9                   	leave  
+c0106d2f:	c3                   	ret    
+
+c0106d30 <page2ppn>:
+page2ppn(struct Page *page) {
+c0106d30:	55                   	push   %ebp
+c0106d31:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0106d33:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d36:	8b 15 d8 70 1b c0    	mov    0xc01b70d8,%edx
+c0106d3c:	29 d0                	sub    %edx,%eax
+c0106d3e:	c1 f8 05             	sar    $0x5,%eax
+}
+c0106d41:	5d                   	pop    %ebp
+c0106d42:	c3                   	ret    
+
+c0106d43 <page2pa>:
+page2pa(struct Page *page) {
+c0106d43:	55                   	push   %ebp
+c0106d44:	89 e5                	mov    %esp,%ebp
+c0106d46:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0106d49:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d4c:	89 04 24             	mov    %eax,(%esp)
+c0106d4f:	e8 dc ff ff ff       	call   c0106d30 <page2ppn>
+c0106d54:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0106d57:	c9                   	leave  
+c0106d58:	c3                   	ret    
+
+c0106d59 <pa2page>:
+pa2page(uintptr_t pa) {
+c0106d59:	55                   	push   %ebp
+c0106d5a:	89 e5                	mov    %esp,%ebp
+c0106d5c:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0106d5f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d62:	c1 e8 0c             	shr    $0xc,%eax
+c0106d65:	89 c2                	mov    %eax,%edx
+c0106d67:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0106d6c:	39 c2                	cmp    %eax,%edx
+c0106d6e:	72 1c                	jb     c0106d8c <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0106d70:	c7 44 24 08 2c de 10 	movl   $0xc010de2c,0x8(%esp)
+c0106d77:	c0 
+c0106d78:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0106d7f:	00 
+c0106d80:	c7 04 24 4b de 10 c0 	movl   $0xc010de4b,(%esp)
+c0106d87:	e8 79 96 ff ff       	call   c0100405 <__panic>
+    return &pages[PPN(pa)];
+c0106d8c:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c0106d91:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106d94:	c1 ea 0c             	shr    $0xc,%edx
+c0106d97:	c1 e2 05             	shl    $0x5,%edx
+c0106d9a:	01 d0                	add    %edx,%eax
+}
+c0106d9c:	c9                   	leave  
+c0106d9d:	c3                   	ret    
+
+c0106d9e <page2kva>:
+page2kva(struct Page *page) {
+c0106d9e:	55                   	push   %ebp
+c0106d9f:	89 e5                	mov    %esp,%ebp
+c0106da1:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0106da4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106da7:	89 04 24             	mov    %eax,(%esp)
+c0106daa:	e8 94 ff ff ff       	call   c0106d43 <page2pa>
+c0106daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106db5:	c1 e8 0c             	shr    $0xc,%eax
+c0106db8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106dbb:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0106dc0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0106dc3:	72 23                	jb     c0106de8 <page2kva+0x4a>
+c0106dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106dc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106dcc:	c7 44 24 08 5c de 10 	movl   $0xc010de5c,0x8(%esp)
+c0106dd3:	c0 
+c0106dd4:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c0106ddb:	00 
+c0106ddc:	c7 04 24 4b de 10 c0 	movl   $0xc010de4b,(%esp)
+c0106de3:	e8 1d 96 ff ff       	call   c0100405 <__panic>
+c0106de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106deb:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0106df0:	c9                   	leave  
+c0106df1:	c3                   	ret    
+
+c0106df2 <kva2page>:
+kva2page(void *kva) {
+c0106df2:	55                   	push   %ebp
+c0106df3:	89 e5                	mov    %esp,%ebp
+c0106df5:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c0106df8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106dfe:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0106e05:	77 23                	ja     c0106e2a <kva2page+0x38>
+c0106e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106e0a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0106e0e:	c7 44 24 08 80 de 10 	movl   $0xc010de80,0x8(%esp)
+c0106e15:	c0 
+c0106e16:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c0106e1d:	00 
+c0106e1e:	c7 04 24 4b de 10 c0 	movl   $0xc010de4b,(%esp)
+c0106e25:	e8 db 95 ff ff       	call   c0100405 <__panic>
+c0106e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106e2d:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106e32:	89 04 24             	mov    %eax,(%esp)
+c0106e35:	e8 1f ff ff ff       	call   c0106d59 <pa2page>
+}
+c0106e3a:	c9                   	leave  
+c0106e3b:	c3                   	ret    
+
+c0106e3c <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c0106e3c:	55                   	push   %ebp
+c0106e3d:	89 e5                	mov    %esp,%ebp
+c0106e3f:	83 ec 28             	sub    $0x28,%esp
+  struct Page * page = alloc_pages(1 << order);
+c0106e42:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106e45:	ba 01 00 00 00       	mov    $0x1,%edx
+c0106e4a:	88 c1                	mov    %al,%cl
+c0106e4c:	d3 e2                	shl    %cl,%edx
+c0106e4e:	89 d0                	mov    %edx,%eax
+c0106e50:	89 04 24             	mov    %eax,(%esp)
+c0106e53:	e8 83 cb ff ff       	call   c01039db <alloc_pages>
+c0106e58:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c0106e5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106e5f:	75 07                	jne    c0106e68 <__slob_get_free_pages+0x2c>
+    return NULL;
+c0106e61:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106e66:	eb 0b                	jmp    c0106e73 <__slob_get_free_pages+0x37>
+  return page2kva(page);
+c0106e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106e6b:	89 04 24             	mov    %eax,(%esp)
+c0106e6e:	e8 2b ff ff ff       	call   c0106d9e <page2kva>
+}
+c0106e73:	c9                   	leave  
+c0106e74:	c3                   	ret    
+
+c0106e75 <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c0106e75:	55                   	push   %ebp
+c0106e76:	89 e5                	mov    %esp,%ebp
+c0106e78:	53                   	push   %ebx
+c0106e79:	83 ec 14             	sub    $0x14,%esp
+  free_pages(kva2page(kva), 1 << order);
+c0106e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106e7f:	ba 01 00 00 00       	mov    $0x1,%edx
+c0106e84:	88 c1                	mov    %al,%cl
+c0106e86:	d3 e2                	shl    %cl,%edx
+c0106e88:	89 d0                	mov    %edx,%eax
+c0106e8a:	89 c3                	mov    %eax,%ebx
+c0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e8f:	89 04 24             	mov    %eax,(%esp)
+c0106e92:	e8 5b ff ff ff       	call   c0106df2 <kva2page>
+c0106e97:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+c0106e9b:	89 04 24             	mov    %eax,(%esp)
+c0106e9e:	e8 a3 cb ff ff       	call   c0103a46 <free_pages>
+}
+c0106ea3:	90                   	nop
+c0106ea4:	83 c4 14             	add    $0x14,%esp
+c0106ea7:	5b                   	pop    %ebx
+c0106ea8:	5d                   	pop    %ebp
+c0106ea9:	c3                   	ret    
+
+c0106eaa <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c0106eaa:	55                   	push   %ebp
+c0106eab:	89 e5                	mov    %esp,%ebp
+c0106ead:	83 ec 38             	sub    $0x38,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c0106eb0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106eb3:	83 c0 08             	add    $0x8,%eax
+c0106eb6:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0106ebb:	76 24                	jbe    c0106ee1 <slob_alloc+0x37>
+c0106ebd:	c7 44 24 0c a4 de 10 	movl   $0xc010dea4,0xc(%esp)
+c0106ec4:	c0 
+c0106ec5:	c7 44 24 08 c3 de 10 	movl   $0xc010dec3,0x8(%esp)
+c0106ecc:	c0 
+c0106ecd:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+c0106ed4:	00 
+c0106ed5:	c7 04 24 d8 de 10 c0 	movl   $0xc010ded8,(%esp)
+c0106edc:	e8 24 95 ff ff       	call   c0100405 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c0106ee1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c0106ee8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0106eef:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ef2:	83 c0 07             	add    $0x7,%eax
+c0106ef5:	c1 e8 03             	shr    $0x3,%eax
+c0106ef8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c0106efb:	e8 f2 fd ff ff       	call   c0106cf2 <__intr_save>
+c0106f00:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c0106f03:	a1 68 ea 12 c0       	mov    0xc012ea68,%eax
+c0106f08:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0106f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106f0e:	8b 40 04             	mov    0x4(%eax),%eax
+c0106f11:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c0106f14:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0106f18:	74 25                	je     c0106f3f <slob_alloc+0x95>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c0106f1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106f1d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106f20:	01 d0                	add    %edx,%eax
+c0106f22:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0106f25:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106f28:	f7 d8                	neg    %eax
+c0106f2a:	21 d0                	and    %edx,%eax
+c0106f2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c0106f2f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0106f32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f35:	29 c2                	sub    %eax,%edx
+c0106f37:	89 d0                	mov    %edx,%eax
+c0106f39:	c1 f8 03             	sar    $0x3,%eax
+c0106f3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c0106f3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f42:	8b 00                	mov    (%eax),%eax
+c0106f44:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c0106f47:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0106f4a:	01 ca                	add    %ecx,%edx
+c0106f4c:	39 d0                	cmp    %edx,%eax
+c0106f4e:	0f 8c aa 00 00 00    	jl     c0106ffe <slob_alloc+0x154>
+			if (delta) { /* need to fragment head to align? */
+c0106f54:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0106f58:	74 38                	je     c0106f92 <slob_alloc+0xe8>
+				aligned->units = cur->units - delta;
+c0106f5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f5d:	8b 00                	mov    (%eax),%eax
+c0106f5f:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c0106f62:	89 c2                	mov    %eax,%edx
+c0106f64:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106f67:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c0106f69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f6c:	8b 50 04             	mov    0x4(%eax),%edx
+c0106f6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106f72:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c0106f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f78:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0106f7b:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c0106f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f81:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0106f84:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c0106f86:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f89:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c0106f8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c0106f92:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f95:	8b 00                	mov    (%eax),%eax
+c0106f97:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c0106f9a:	75 0e                	jne    c0106faa <slob_alloc+0x100>
+				prev->next = cur->next; /* unlink */
+c0106f9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106f9f:	8b 50 04             	mov    0x4(%eax),%edx
+c0106fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106fa5:	89 50 04             	mov    %edx,0x4(%eax)
+c0106fa8:	eb 3c                	jmp    c0106fe6 <slob_alloc+0x13c>
+			else { /* fragment */
+				prev->next = cur + units;
+c0106faa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106fad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106fb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106fb7:	01 c2                	add    %eax,%edx
+c0106fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106fbc:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c0106fbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106fc2:	8b 10                	mov    (%eax),%edx
+c0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106fc7:	8b 40 04             	mov    0x4(%eax),%eax
+c0106fca:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c0106fcd:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c0106fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106fd2:	8b 40 04             	mov    0x4(%eax),%eax
+c0106fd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106fd8:	8b 52 04             	mov    0x4(%edx),%edx
+c0106fdb:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c0106fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106fe1:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106fe4:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c0106fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106fe9:	a3 68 ea 12 c0       	mov    %eax,0xc012ea68
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0106fee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106ff1:	89 04 24             	mov    %eax,(%esp)
+c0106ff4:	e8 23 fd ff ff       	call   c0106d1c <__intr_restore>
+			return cur;
+c0106ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106ffc:	eb 7f                	jmp    c010707d <slob_alloc+0x1d3>
+		}
+		if (cur == slobfree) {
+c0106ffe:	a1 68 ea 12 c0       	mov    0xc012ea68,%eax
+c0107003:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0107006:	75 61                	jne    c0107069 <slob_alloc+0x1bf>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0107008:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010700b:	89 04 24             	mov    %eax,(%esp)
+c010700e:	e8 09 fd ff ff       	call   c0106d1c <__intr_restore>
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0107013:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c010701a:	75 07                	jne    c0107023 <slob_alloc+0x179>
+				return 0;
+c010701c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107021:	eb 5a                	jmp    c010707d <slob_alloc+0x1d3>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c0107023:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010702a:	00 
+c010702b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010702e:	89 04 24             	mov    %eax,(%esp)
+c0107031:	e8 06 fe ff ff       	call   c0106e3c <__slob_get_free_pages>
+c0107036:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c0107039:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010703d:	75 07                	jne    c0107046 <slob_alloc+0x19c>
+				return 0;
+c010703f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107044:	eb 37                	jmp    c010707d <slob_alloc+0x1d3>
+
+			slob_free(cur, PAGE_SIZE);
+c0107046:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c010704d:	00 
+c010704e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107051:	89 04 24             	mov    %eax,(%esp)
+c0107054:	e8 26 00 00 00       	call   c010707f <slob_free>
+			spin_lock_irqsave(&slob_lock, flags);
+c0107059:	e8 94 fc ff ff       	call   c0106cf2 <__intr_save>
+c010705e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c0107061:	a1 68 ea 12 c0       	mov    0xc012ea68,%eax
+c0107066:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0107069:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010706c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010706f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107072:	8b 40 04             	mov    0x4(%eax),%eax
+c0107075:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c0107078:	e9 97 fe ff ff       	jmp    c0106f14 <slob_alloc+0x6a>
+		}
+	}
+}
+c010707d:	c9                   	leave  
+c010707e:	c3                   	ret    
+
+c010707f <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c010707f:	55                   	push   %ebp
+c0107080:	89 e5                	mov    %esp,%ebp
+c0107082:	83 ec 28             	sub    $0x28,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c0107085:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107088:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c010708b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010708f:	0f 84 01 01 00 00    	je     c0107196 <slob_free+0x117>
+		return;
+
+	if (size)
+c0107095:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107099:	74 10                	je     c01070ab <slob_free+0x2c>
+		b->units = SLOB_UNITS(size);
+c010709b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010709e:	83 c0 07             	add    $0x7,%eax
+c01070a1:	c1 e8 03             	shr    $0x3,%eax
+c01070a4:	89 c2                	mov    %eax,%edx
+c01070a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070a9:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c01070ab:	e8 42 fc ff ff       	call   c0106cf2 <__intr_save>
+c01070b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c01070b3:	a1 68 ea 12 c0       	mov    0xc012ea68,%eax
+c01070b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01070bb:	eb 27                	jmp    c01070e4 <slob_free+0x65>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c01070bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070c0:	8b 40 04             	mov    0x4(%eax),%eax
+c01070c3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01070c6:	72 13                	jb     c01070db <slob_free+0x5c>
+c01070c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01070ce:	77 27                	ja     c01070f7 <slob_free+0x78>
+c01070d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070d3:	8b 40 04             	mov    0x4(%eax),%eax
+c01070d6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01070d9:	72 1c                	jb     c01070f7 <slob_free+0x78>
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c01070db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070de:	8b 40 04             	mov    0x4(%eax),%eax
+c01070e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01070e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01070ea:	76 d1                	jbe    c01070bd <slob_free+0x3e>
+c01070ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070ef:	8b 40 04             	mov    0x4(%eax),%eax
+c01070f2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01070f5:	73 c6                	jae    c01070bd <slob_free+0x3e>
+			break;
+
+	if (b + b->units == cur->next) {
+c01070f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070fa:	8b 00                	mov    (%eax),%eax
+c01070fc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0107103:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107106:	01 c2                	add    %eax,%edx
+c0107108:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010710b:	8b 40 04             	mov    0x4(%eax),%eax
+c010710e:	39 c2                	cmp    %eax,%edx
+c0107110:	75 25                	jne    c0107137 <slob_free+0xb8>
+		b->units += cur->next->units;
+c0107112:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107115:	8b 10                	mov    (%eax),%edx
+c0107117:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010711a:	8b 40 04             	mov    0x4(%eax),%eax
+c010711d:	8b 00                	mov    (%eax),%eax
+c010711f:	01 c2                	add    %eax,%edx
+c0107121:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107124:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107129:	8b 40 04             	mov    0x4(%eax),%eax
+c010712c:	8b 50 04             	mov    0x4(%eax),%edx
+c010712f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107132:	89 50 04             	mov    %edx,0x4(%eax)
+c0107135:	eb 0c                	jmp    c0107143 <slob_free+0xc4>
+	} else
+		b->next = cur->next;
+c0107137:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010713a:	8b 50 04             	mov    0x4(%eax),%edx
+c010713d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107140:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0107143:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107146:	8b 00                	mov    (%eax),%eax
+c0107148:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010714f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107152:	01 d0                	add    %edx,%eax
+c0107154:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0107157:	75 1f                	jne    c0107178 <slob_free+0xf9>
+		cur->units += b->units;
+c0107159:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010715c:	8b 10                	mov    (%eax),%edx
+c010715e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107161:	8b 00                	mov    (%eax),%eax
+c0107163:	01 c2                	add    %eax,%edx
+c0107165:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107168:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c010716a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010716d:	8b 50 04             	mov    0x4(%eax),%edx
+c0107170:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107173:	89 50 04             	mov    %edx,0x4(%eax)
+c0107176:	eb 09                	jmp    c0107181 <slob_free+0x102>
+	} else
+		cur->next = b;
+c0107178:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010717b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010717e:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0107181:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107184:	a3 68 ea 12 c0       	mov    %eax,0xc012ea68
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0107189:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010718c:	89 04 24             	mov    %eax,(%esp)
+c010718f:	e8 88 fb ff ff       	call   c0106d1c <__intr_restore>
+c0107194:	eb 01                	jmp    c0107197 <slob_free+0x118>
+		return;
+c0107196:	90                   	nop
+}
+c0107197:	c9                   	leave  
+c0107198:	c3                   	ret    
+
+c0107199 <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0107199:	55                   	push   %ebp
+c010719a:	89 e5                	mov    %esp,%ebp
+c010719c:	83 ec 18             	sub    $0x18,%esp
+  cprintf("use SLOB allocator\n");
+c010719f:	c7 04 24 ea de 10 c0 	movl   $0xc010deea,(%esp)
+c01071a6:	e8 03 91 ff ff       	call   c01002ae <cprintf>
+}
+c01071ab:	90                   	nop
+c01071ac:	c9                   	leave  
+c01071ad:	c3                   	ret    
+
+c01071ae <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c01071ae:	55                   	push   %ebp
+c01071af:	89 e5                	mov    %esp,%ebp
+c01071b1:	83 ec 18             	sub    $0x18,%esp
+    slob_init();
+c01071b4:	e8 e0 ff ff ff       	call   c0107199 <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c01071b9:	c7 04 24 fe de 10 c0 	movl   $0xc010defe,(%esp)
+c01071c0:	e8 e9 90 ff ff       	call   c01002ae <cprintf>
+}
+c01071c5:	90                   	nop
+c01071c6:	c9                   	leave  
+c01071c7:	c3                   	ret    
+
+c01071c8 <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c01071c8:	55                   	push   %ebp
+c01071c9:	89 e5                	mov    %esp,%ebp
+  return 0;
+c01071cb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01071d0:	5d                   	pop    %ebp
+c01071d1:	c3                   	ret    
+
+c01071d2 <kallocated>:
+
+size_t
+kallocated(void) {
+c01071d2:	55                   	push   %ebp
+c01071d3:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c01071d5:	e8 ee ff ff ff       	call   c01071c8 <slob_allocated>
+}
+c01071da:	5d                   	pop    %ebp
+c01071db:	c3                   	ret    
+
+c01071dc <find_order>:
+
+static int find_order(int size)
+{
+c01071dc:	55                   	push   %ebp
+c01071dd:	89 e5                	mov    %esp,%ebp
+c01071df:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c01071e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c01071e9:	eb 06                	jmp    c01071f1 <find_order+0x15>
+		order++;
+c01071eb:	ff 45 fc             	incl   -0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c01071ee:	d1 7d 08             	sarl   0x8(%ebp)
+c01071f1:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c01071f8:	7f f1                	jg     c01071eb <find_order+0xf>
+	return order;
+c01071fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01071fd:	c9                   	leave  
+c01071fe:	c3                   	ret    
+
+c01071ff <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c01071ff:	55                   	push   %ebp
+c0107200:	89 e5                	mov    %esp,%ebp
+c0107202:	83 ec 28             	sub    $0x28,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0107205:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c010720c:	77 3b                	ja     c0107249 <__kmalloc+0x4a>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c010720e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107211:	8d 50 08             	lea    0x8(%eax),%edx
+c0107214:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010721b:	00 
+c010721c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010721f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107223:	89 14 24             	mov    %edx,(%esp)
+c0107226:	e8 7f fc ff ff       	call   c0106eaa <slob_alloc>
+c010722b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c010722e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107232:	74 0b                	je     c010723f <__kmalloc+0x40>
+c0107234:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107237:	83 c0 08             	add    $0x8,%eax
+c010723a:	e9 b4 00 00 00       	jmp    c01072f3 <__kmalloc+0xf4>
+c010723f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107244:	e9 aa 00 00 00       	jmp    c01072f3 <__kmalloc+0xf4>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0107249:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107250:	00 
+c0107251:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107254:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107258:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+c010725f:	e8 46 fc ff ff       	call   c0106eaa <slob_alloc>
+c0107264:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	if (!bb)
+c0107267:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010726b:	75 07                	jne    c0107274 <__kmalloc+0x75>
+		return 0;
+c010726d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107272:	eb 7f                	jmp    c01072f3 <__kmalloc+0xf4>
+
+	bb->order = find_order(size);
+c0107274:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107277:	89 04 24             	mov    %eax,(%esp)
+c010727a:	e8 5d ff ff ff       	call   c01071dc <find_order>
+c010727f:	89 c2                	mov    %eax,%edx
+c0107281:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107284:	89 10                	mov    %edx,(%eax)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0107286:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107289:	8b 00                	mov    (%eax),%eax
+c010728b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010728f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107292:	89 04 24             	mov    %eax,(%esp)
+c0107295:	e8 a2 fb ff ff       	call   c0106e3c <__slob_get_free_pages>
+c010729a:	89 c2                	mov    %eax,%edx
+c010729c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010729f:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (bb->pages) {
+c01072a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01072a5:	8b 40 04             	mov    0x4(%eax),%eax
+c01072a8:	85 c0                	test   %eax,%eax
+c01072aa:	74 2f                	je     c01072db <__kmalloc+0xdc>
+		spin_lock_irqsave(&block_lock, flags);
+c01072ac:	e8 41 fa ff ff       	call   c0106cf2 <__intr_save>
+c01072b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		bb->next = bigblocks;
+c01072b4:	8b 15 10 50 1b c0    	mov    0xc01b5010,%edx
+c01072ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01072bd:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c01072c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01072c3:	a3 10 50 1b c0       	mov    %eax,0xc01b5010
+		spin_unlock_irqrestore(&block_lock, flags);
+c01072c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01072cb:	89 04 24             	mov    %eax,(%esp)
+c01072ce:	e8 49 fa ff ff       	call   c0106d1c <__intr_restore>
+		return bb->pages;
+c01072d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01072d6:	8b 40 04             	mov    0x4(%eax),%eax
+c01072d9:	eb 18                	jmp    c01072f3 <__kmalloc+0xf4>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c01072db:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c01072e2:	00 
+c01072e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01072e6:	89 04 24             	mov    %eax,(%esp)
+c01072e9:	e8 91 fd ff ff       	call   c010707f <slob_free>
+	return 0;
+c01072ee:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01072f3:	c9                   	leave  
+c01072f4:	c3                   	ret    
+
+c01072f5 <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c01072f5:	55                   	push   %ebp
+c01072f6:	89 e5                	mov    %esp,%ebp
+c01072f8:	83 ec 18             	sub    $0x18,%esp
+  return __kmalloc(size, 0);
+c01072fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0107302:	00 
+c0107303:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107306:	89 04 24             	mov    %eax,(%esp)
+c0107309:	e8 f1 fe ff ff       	call   c01071ff <__kmalloc>
+}
+c010730e:	c9                   	leave  
+c010730f:	c3                   	ret    
+
+c0107310 <kfree>:
+
+
+void kfree(void *block)
+{
+c0107310:	55                   	push   %ebp
+c0107311:	89 e5                	mov    %esp,%ebp
+c0107313:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0107316:	c7 45 f0 10 50 1b c0 	movl   $0xc01b5010,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c010731d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0107321:	0f 84 a4 00 00 00    	je     c01073cb <kfree+0xbb>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0107327:	8b 45 08             	mov    0x8(%ebp),%eax
+c010732a:	25 ff 0f 00 00       	and    $0xfff,%eax
+c010732f:	85 c0                	test   %eax,%eax
+c0107331:	75 7f                	jne    c01073b2 <kfree+0xa2>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0107333:	e8 ba f9 ff ff       	call   c0106cf2 <__intr_save>
+c0107338:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c010733b:	a1 10 50 1b c0       	mov    0xc01b5010,%eax
+c0107340:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107343:	eb 5c                	jmp    c01073a1 <kfree+0x91>
+			if (bb->pages == block) {
+c0107345:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107348:	8b 40 04             	mov    0x4(%eax),%eax
+c010734b:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010734e:	75 3f                	jne    c010738f <kfree+0x7f>
+				*last = bb->next;
+c0107350:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107353:	8b 50 08             	mov    0x8(%eax),%edx
+c0107356:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107359:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c010735b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010735e:	89 04 24             	mov    %eax,(%esp)
+c0107361:	e8 b6 f9 ff ff       	call   c0106d1c <__intr_restore>
+				__slob_free_pages((unsigned long)block, bb->order);
+c0107366:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107369:	8b 10                	mov    (%eax),%edx
+c010736b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010736e:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107372:	89 04 24             	mov    %eax,(%esp)
+c0107375:	e8 fb fa ff ff       	call   c0106e75 <__slob_free_pages>
+				slob_free(bb, sizeof(bigblock_t));
+c010737a:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
+c0107381:	00 
+c0107382:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107385:	89 04 24             	mov    %eax,(%esp)
+c0107388:	e8 f2 fc ff ff       	call   c010707f <slob_free>
+				return;
+c010738d:	eb 3d                	jmp    c01073cc <kfree+0xbc>
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c010738f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107392:	83 c0 08             	add    $0x8,%eax
+c0107395:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107398:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010739b:	8b 40 08             	mov    0x8(%eax),%eax
+c010739e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01073a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01073a5:	75 9e                	jne    c0107345 <kfree+0x35>
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c01073a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01073aa:	89 04 24             	mov    %eax,(%esp)
+c01073ad:	e8 6a f9 ff ff       	call   c0106d1c <__intr_restore>
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c01073b2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01073b5:	83 e8 08             	sub    $0x8,%eax
+c01073b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01073bf:	00 
+c01073c0:	89 04 24             	mov    %eax,(%esp)
+c01073c3:	e8 b7 fc ff ff       	call   c010707f <slob_free>
+	return;
+c01073c8:	90                   	nop
+c01073c9:	eb 01                	jmp    c01073cc <kfree+0xbc>
+		return;
+c01073cb:	90                   	nop
+}
+c01073cc:	c9                   	leave  
+c01073cd:	c3                   	ret    
+
+c01073ce <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c01073ce:	55                   	push   %ebp
+c01073cf:	89 e5                	mov    %esp,%ebp
+c01073d1:	83 ec 28             	sub    $0x28,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c01073d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01073d8:	75 07                	jne    c01073e1 <ksize+0x13>
+		return 0;
+c01073da:	b8 00 00 00 00       	mov    $0x0,%eax
+c01073df:	eb 6b                	jmp    c010744c <ksize+0x7e>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c01073e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01073e4:	25 ff 0f 00 00       	and    $0xfff,%eax
+c01073e9:	85 c0                	test   %eax,%eax
+c01073eb:	75 54                	jne    c0107441 <ksize+0x73>
+		spin_lock_irqsave(&block_lock, flags);
+c01073ed:	e8 00 f9 ff ff       	call   c0106cf2 <__intr_save>
+c01073f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c01073f5:	a1 10 50 1b c0       	mov    0xc01b5010,%eax
+c01073fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01073fd:	eb 31                	jmp    c0107430 <ksize+0x62>
+			if (bb->pages == block) {
+c01073ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107402:	8b 40 04             	mov    0x4(%eax),%eax
+c0107405:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0107408:	75 1d                	jne    c0107427 <ksize+0x59>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c010740a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010740d:	89 04 24             	mov    %eax,(%esp)
+c0107410:	e8 07 f9 ff ff       	call   c0106d1c <__intr_restore>
+				return PAGE_SIZE << bb->order;
+c0107415:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107418:	8b 00                	mov    (%eax),%eax
+c010741a:	ba 00 10 00 00       	mov    $0x1000,%edx
+c010741f:	88 c1                	mov    %al,%cl
+c0107421:	d3 e2                	shl    %cl,%edx
+c0107423:	89 d0                	mov    %edx,%eax
+c0107425:	eb 25                	jmp    c010744c <ksize+0x7e>
+		for (bb = bigblocks; bb; bb = bb->next)
+c0107427:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010742a:	8b 40 08             	mov    0x8(%eax),%eax
+c010742d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107430:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107434:	75 c9                	jne    c01073ff <ksize+0x31>
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0107436:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107439:	89 04 24             	mov    %eax,(%esp)
+c010743c:	e8 db f8 ff ff       	call   c0106d1c <__intr_restore>
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0107441:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107444:	83 e8 08             	sub    $0x8,%eax
+c0107447:	8b 00                	mov    (%eax),%eax
+c0107449:	c1 e0 03             	shl    $0x3,%eax
+}
+c010744c:	c9                   	leave  
+c010744d:	c3                   	ret    
+
+c010744e <pa2page>:
+pa2page(uintptr_t pa) {
+c010744e:	55                   	push   %ebp
+c010744f:	89 e5                	mov    %esp,%ebp
+c0107451:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c0107454:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107457:	c1 e8 0c             	shr    $0xc,%eax
+c010745a:	89 c2                	mov    %eax,%edx
+c010745c:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0107461:	39 c2                	cmp    %eax,%edx
+c0107463:	72 1c                	jb     c0107481 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c0107465:	c7 44 24 08 1c df 10 	movl   $0xc010df1c,0x8(%esp)
+c010746c:	c0 
+c010746d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c0107474:	00 
+c0107475:	c7 04 24 3b df 10 c0 	movl   $0xc010df3b,(%esp)
+c010747c:	e8 84 8f ff ff       	call   c0100405 <__panic>
+    return &pages[PPN(pa)];
+c0107481:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c0107486:	8b 55 08             	mov    0x8(%ebp),%edx
+c0107489:	c1 ea 0c             	shr    $0xc,%edx
+c010748c:	c1 e2 05             	shl    $0x5,%edx
+c010748f:	01 d0                	add    %edx,%eax
+}
+c0107491:	c9                   	leave  
+c0107492:	c3                   	ret    
+
+c0107493 <pte2page>:
+pte2page(pte_t pte) {
+c0107493:	55                   	push   %ebp
+c0107494:	89 e5                	mov    %esp,%ebp
+c0107496:	83 ec 18             	sub    $0x18,%esp
+    if (!(pte & PTE_P)) {
+c0107499:	8b 45 08             	mov    0x8(%ebp),%eax
+c010749c:	83 e0 01             	and    $0x1,%eax
+c010749f:	85 c0                	test   %eax,%eax
+c01074a1:	75 1c                	jne    c01074bf <pte2page+0x2c>
+        panic("pte2page called with invalid pte");
+c01074a3:	c7 44 24 08 4c df 10 	movl   $0xc010df4c,0x8(%esp)
+c01074aa:	c0 
+c01074ab:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
+c01074b2:	00 
+c01074b3:	c7 04 24 3b df 10 c0 	movl   $0xc010df3b,(%esp)
+c01074ba:	e8 46 8f ff ff       	call   c0100405 <__panic>
+    return pa2page(PTE_ADDR(pte));
+c01074bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01074c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01074c7:	89 04 24             	mov    %eax,(%esp)
+c01074ca:	e8 7f ff ff ff       	call   c010744e <pa2page>
+}
+c01074cf:	c9                   	leave  
+c01074d0:	c3                   	ret    
+
+c01074d1 <pde2page>:
+pde2page(pde_t pde) {
+c01074d1:	55                   	push   %ebp
+c01074d2:	89 e5                	mov    %esp,%ebp
+c01074d4:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PDE_ADDR(pde));
+c01074d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01074da:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01074df:	89 04 24             	mov    %eax,(%esp)
+c01074e2:	e8 67 ff ff ff       	call   c010744e <pa2page>
+}
+c01074e7:	c9                   	leave  
+c01074e8:	c3                   	ret    
+
+c01074e9 <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c01074e9:	55                   	push   %ebp
+c01074ea:	89 e5                	mov    %esp,%ebp
+c01074ec:	83 ec 28             	sub    $0x28,%esp
+     swapfs_init();
+c01074ef:	e8 e0 1d 00 00       	call   c01092d4 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c01074f4:	a1 9c 71 1b c0       	mov    0xc01b719c,%eax
+c01074f9:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c01074fe:	76 0c                	jbe    c010750c <swap_init+0x23>
+c0107500:	a1 9c 71 1b c0       	mov    0xc01b719c,%eax
+c0107505:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c010750a:	76 25                	jbe    c0107531 <swap_init+0x48>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c010750c:	a1 9c 71 1b c0       	mov    0xc01b719c,%eax
+c0107511:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0107515:	c7 44 24 08 6d df 10 	movl   $0xc010df6d,0x8(%esp)
+c010751c:	c0 
+c010751d:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
+c0107524:	00 
+c0107525:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c010752c:	e8 d4 8e ff ff       	call   c0100405 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0107531:	c7 05 1c 50 1b c0 40 	movl   $0xc012ea40,0xc01b501c
+c0107538:	ea 12 c0 
+     int r = sm->init();
+c010753b:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c0107540:	8b 40 04             	mov    0x4(%eax),%eax
+c0107543:	ff d0                	call   *%eax
+c0107545:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0107548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010754c:	75 26                	jne    c0107574 <swap_init+0x8b>
+     {
+          swap_init_ok = 1;
+c010754e:	c7 05 14 50 1b c0 01 	movl   $0x1,0xc01b5014
+c0107555:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0107558:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c010755d:	8b 00                	mov    (%eax),%eax
+c010755f:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107563:	c7 04 24 97 df 10 c0 	movl   $0xc010df97,(%esp)
+c010756a:	e8 3f 8d ff ff       	call   c01002ae <cprintf>
+          check_swap();
+c010756f:	e8 9e 04 00 00       	call   c0107a12 <check_swap>
+     }
+
+     return r;
+c0107574:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107577:	c9                   	leave  
+c0107578:	c3                   	ret    
+
+c0107579 <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0107579:	55                   	push   %ebp
+c010757a:	89 e5                	mov    %esp,%ebp
+c010757c:	83 ec 18             	sub    $0x18,%esp
+     return sm->init_mm(mm);
+c010757f:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c0107584:	8b 40 08             	mov    0x8(%eax),%eax
+c0107587:	8b 55 08             	mov    0x8(%ebp),%edx
+c010758a:	89 14 24             	mov    %edx,(%esp)
+c010758d:	ff d0                	call   *%eax
+}
+c010758f:	c9                   	leave  
+c0107590:	c3                   	ret    
+
+c0107591 <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0107591:	55                   	push   %ebp
+c0107592:	89 e5                	mov    %esp,%ebp
+c0107594:	83 ec 18             	sub    $0x18,%esp
+     return sm->tick_event(mm);
+c0107597:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c010759c:	8b 40 0c             	mov    0xc(%eax),%eax
+c010759f:	8b 55 08             	mov    0x8(%ebp),%edx
+c01075a2:	89 14 24             	mov    %edx,(%esp)
+c01075a5:	ff d0                	call   *%eax
+}
+c01075a7:	c9                   	leave  
+c01075a8:	c3                   	ret    
+
+c01075a9 <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c01075a9:	55                   	push   %ebp
+c01075aa:	89 e5                	mov    %esp,%ebp
+c01075ac:	83 ec 18             	sub    $0x18,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c01075af:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c01075b4:	8b 40 10             	mov    0x10(%eax),%eax
+c01075b7:	8b 55 14             	mov    0x14(%ebp),%edx
+c01075ba:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c01075be:	8b 55 10             	mov    0x10(%ebp),%edx
+c01075c1:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01075c5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01075c8:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01075cc:	8b 55 08             	mov    0x8(%ebp),%edx
+c01075cf:	89 14 24             	mov    %edx,(%esp)
+c01075d2:	ff d0                	call   *%eax
+}
+c01075d4:	c9                   	leave  
+c01075d5:	c3                   	ret    
+
+c01075d6 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c01075d6:	55                   	push   %ebp
+c01075d7:	89 e5                	mov    %esp,%ebp
+c01075d9:	83 ec 18             	sub    $0x18,%esp
+     return sm->set_unswappable(mm, addr);
+c01075dc:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c01075e1:	8b 40 14             	mov    0x14(%eax),%eax
+c01075e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01075e7:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01075eb:	8b 55 08             	mov    0x8(%ebp),%edx
+c01075ee:	89 14 24             	mov    %edx,(%esp)
+c01075f1:	ff d0                	call   *%eax
+}
+c01075f3:	c9                   	leave  
+c01075f4:	c3                   	ret    
+
+c01075f5 <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c01075f5:	55                   	push   %ebp
+c01075f6:	89 e5                	mov    %esp,%ebp
+c01075f8:	83 ec 38             	sub    $0x38,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c01075fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0107602:	e9 53 01 00 00       	jmp    c010775a <swap_out+0x165>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0107607:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c010760c:	8b 40 18             	mov    0x18(%eax),%eax
+c010760f:	8b 55 10             	mov    0x10(%ebp),%edx
+c0107612:	89 54 24 08          	mov    %edx,0x8(%esp)
+c0107616:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0107619:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010761d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0107620:	89 14 24             	mov    %edx,(%esp)
+c0107623:	ff d0                	call   *%eax
+c0107625:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0107628:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010762c:	74 18                	je     c0107646 <swap_out+0x51>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c010762e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107631:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107635:	c7 04 24 ac df 10 c0 	movl   $0xc010dfac,(%esp)
+c010763c:	e8 6d 8c ff ff       	call   c01002ae <cprintf>
+c0107641:	e9 20 01 00 00       	jmp    c0107766 <swap_out+0x171>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0107646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107649:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010764c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c010764f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107652:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107655:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010765c:	00 
+c010765d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107660:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107664:	89 04 24             	mov    %eax,(%esp)
+c0107667:	e8 4f ca ff ff       	call   c01040bb <get_pte>
+c010766c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c010766f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107672:	8b 00                	mov    (%eax),%eax
+c0107674:	83 e0 01             	and    $0x1,%eax
+c0107677:	85 c0                	test   %eax,%eax
+c0107679:	75 24                	jne    c010769f <swap_out+0xaa>
+c010767b:	c7 44 24 0c d9 df 10 	movl   $0xc010dfd9,0xc(%esp)
+c0107682:	c0 
+c0107683:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c010768a:	c0 
+c010768b:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
+c0107692:	00 
+c0107693:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c010769a:	e8 66 8d ff ff       	call   c0100405 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c010769f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01076a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01076a5:	8b 52 1c             	mov    0x1c(%edx),%edx
+c01076a8:	c1 ea 0c             	shr    $0xc,%edx
+c01076ab:	42                   	inc    %edx
+c01076ac:	c1 e2 08             	shl    $0x8,%edx
+c01076af:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01076b3:	89 14 24             	mov    %edx,(%esp)
+c01076b6:	e8 d4 1c 00 00       	call   c010938f <swapfs_write>
+c01076bb:	85 c0                	test   %eax,%eax
+c01076bd:	74 34                	je     c01076f3 <swap_out+0xfe>
+                    cprintf("SWAP: failed to save\n");
+c01076bf:	c7 04 24 03 e0 10 c0 	movl   $0xc010e003,(%esp)
+c01076c6:	e8 e3 8b ff ff       	call   c01002ae <cprintf>
+                    sm->map_swappable(mm, v, page, 0);
+c01076cb:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c01076d0:	8b 40 10             	mov    0x10(%eax),%eax
+c01076d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01076d6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c01076dd:	00 
+c01076de:	89 54 24 08          	mov    %edx,0x8(%esp)
+c01076e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01076e5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01076e9:	8b 55 08             	mov    0x8(%ebp),%edx
+c01076ec:	89 14 24             	mov    %edx,(%esp)
+c01076ef:	ff d0                	call   *%eax
+c01076f1:	eb 64                	jmp    c0107757 <swap_out+0x162>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c01076f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01076f6:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01076f9:	c1 e8 0c             	shr    $0xc,%eax
+c01076fc:	40                   	inc    %eax
+c01076fd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0107701:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107704:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107708:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010770b:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010770f:	c7 04 24 1c e0 10 c0 	movl   $0xc010e01c,(%esp)
+c0107716:	e8 93 8b ff ff       	call   c01002ae <cprintf>
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c010771b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010771e:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107721:	c1 e8 0c             	shr    $0xc,%eax
+c0107724:	40                   	inc    %eax
+c0107725:	c1 e0 08             	shl    $0x8,%eax
+c0107728:	89 c2                	mov    %eax,%edx
+c010772a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010772d:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c010772f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107732:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107739:	00 
+c010773a:	89 04 24             	mov    %eax,(%esp)
+c010773d:	e8 04 c3 ff ff       	call   c0103a46 <free_pages>
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c0107742:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107745:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107748:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010774b:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010774f:	89 04 24             	mov    %eax,(%esp)
+c0107752:	e8 71 d0 ff ff       	call   c01047c8 <tlb_invalidate>
+     for (i = 0; i != n; ++ i)
+c0107757:	ff 45 f4             	incl   -0xc(%ebp)
+c010775a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010775d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107760:	0f 85 a1 fe ff ff    	jne    c0107607 <swap_out+0x12>
+     }
+     return i;
+c0107766:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107769:	c9                   	leave  
+c010776a:	c3                   	ret    
+
+c010776b <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c010776b:	55                   	push   %ebp
+c010776c:	89 e5                	mov    %esp,%ebp
+c010776e:	83 ec 28             	sub    $0x28,%esp
+     struct Page *result = alloc_page();
+c0107771:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0107778:	e8 5e c2 ff ff       	call   c01039db <alloc_pages>
+c010777d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c0107780:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107784:	75 24                	jne    c01077aa <swap_in+0x3f>
+c0107786:	c7 44 24 0c 5c e0 10 	movl   $0xc010e05c,0xc(%esp)
+c010778d:	c0 
+c010778e:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107795:	c0 
+c0107796:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
+c010779d:	00 
+c010779e:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c01077a5:	e8 5b 8c ff ff       	call   c0100405 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c01077aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c01077ad:	8b 40 0c             	mov    0xc(%eax),%eax
+c01077b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c01077b7:	00 
+c01077b8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01077bb:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01077bf:	89 04 24             	mov    %eax,(%esp)
+c01077c2:	e8 f4 c8 ff ff       	call   c01040bb <get_pte>
+c01077c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c01077ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01077cd:	8b 00                	mov    (%eax),%eax
+c01077cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01077d2:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01077d6:	89 04 24             	mov    %eax,(%esp)
+c01077d9:	e8 3f 1b 00 00       	call   c010931d <swapfs_read>
+c01077de:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01077e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01077e5:	74 2a                	je     c0107811 <swap_in+0xa6>
+     {
+        assert(r!=0);
+c01077e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01077eb:	75 24                	jne    c0107811 <swap_in+0xa6>
+c01077ed:	c7 44 24 0c 69 e0 10 	movl   $0xc010e069,0xc(%esp)
+c01077f4:	c0 
+c01077f5:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c01077fc:	c0 
+c01077fd:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
+c0107804:	00 
+c0107805:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c010780c:	e8 f4 8b ff ff       	call   c0100405 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c0107811:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107814:	8b 00                	mov    (%eax),%eax
+c0107816:	c1 e8 08             	shr    $0x8,%eax
+c0107819:	89 c2                	mov    %eax,%edx
+c010781b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010781e:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107822:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0107826:	c7 04 24 70 e0 10 c0 	movl   $0xc010e070,(%esp)
+c010782d:	e8 7c 8a ff ff       	call   c01002ae <cprintf>
+     *ptr_result=result;
+c0107832:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107835:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107838:	89 10                	mov    %edx,(%eax)
+     return 0;
+c010783a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010783f:	c9                   	leave  
+c0107840:	c3                   	ret    
+
+c0107841 <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c0107841:	55                   	push   %ebp
+c0107842:	89 e5                	mov    %esp,%ebp
+c0107844:	83 ec 18             	sub    $0x18,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c0107847:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010784c:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c010784f:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0107854:	83 f8 01             	cmp    $0x1,%eax
+c0107857:	74 24                	je     c010787d <check_content_set+0x3c>
+c0107859:	c7 44 24 0c ae e0 10 	movl   $0xc010e0ae,0xc(%esp)
+c0107860:	c0 
+c0107861:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107868:	c0 
+c0107869:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
+c0107870:	00 
+c0107871:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107878:	e8 88 8b ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c010787d:	b8 10 10 00 00       	mov    $0x1010,%eax
+c0107882:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107885:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010788a:	83 f8 01             	cmp    $0x1,%eax
+c010788d:	74 24                	je     c01078b3 <check_content_set+0x72>
+c010788f:	c7 44 24 0c ae e0 10 	movl   $0xc010e0ae,0xc(%esp)
+c0107896:	c0 
+c0107897:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c010789e:	c0 
+c010789f:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
+c01078a6:	00 
+c01078a7:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c01078ae:	e8 52 8b ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c01078b3:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01078b8:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01078bb:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01078c0:	83 f8 02             	cmp    $0x2,%eax
+c01078c3:	74 24                	je     c01078e9 <check_content_set+0xa8>
+c01078c5:	c7 44 24 0c bd e0 10 	movl   $0xc010e0bd,0xc(%esp)
+c01078cc:	c0 
+c01078cd:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c01078d4:	c0 
+c01078d5:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
+c01078dc:	00 
+c01078dd:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c01078e4:	e8 1c 8b ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01078e9:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01078ee:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01078f1:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01078f6:	83 f8 02             	cmp    $0x2,%eax
+c01078f9:	74 24                	je     c010791f <check_content_set+0xde>
+c01078fb:	c7 44 24 0c bd e0 10 	movl   $0xc010e0bd,0xc(%esp)
+c0107902:	c0 
+c0107903:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c010790a:	c0 
+c010790b:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
+c0107912:	00 
+c0107913:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c010791a:	e8 e6 8a ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c010791f:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107924:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107927:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c010792c:	83 f8 03             	cmp    $0x3,%eax
+c010792f:	74 24                	je     c0107955 <check_content_set+0x114>
+c0107931:	c7 44 24 0c cc e0 10 	movl   $0xc010e0cc,0xc(%esp)
+c0107938:	c0 
+c0107939:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107940:	c0 
+c0107941:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
+c0107948:	00 
+c0107949:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107950:	e8 b0 8a ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c0107955:	b8 10 30 00 00       	mov    $0x3010,%eax
+c010795a:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c010795d:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0107962:	83 f8 03             	cmp    $0x3,%eax
+c0107965:	74 24                	je     c010798b <check_content_set+0x14a>
+c0107967:	c7 44 24 0c cc e0 10 	movl   $0xc010e0cc,0xc(%esp)
+c010796e:	c0 
+c010796f:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107976:	c0 
+c0107977:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
+c010797e:	00 
+c010797f:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107986:	e8 7a 8a ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c010798b:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107990:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0107993:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c0107998:	83 f8 04             	cmp    $0x4,%eax
+c010799b:	74 24                	je     c01079c1 <check_content_set+0x180>
+c010799d:	c7 44 24 0c db e0 10 	movl   $0xc010e0db,0xc(%esp)
+c01079a4:	c0 
+c01079a5:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c01079ac:	c0 
+c01079ad:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
+c01079b4:	00 
+c01079b5:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c01079bc:	e8 44 8a ff ff       	call   c0100405 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c01079c1:	b8 10 40 00 00       	mov    $0x4010,%eax
+c01079c6:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c01079c9:	a1 0c 50 1b c0       	mov    0xc01b500c,%eax
+c01079ce:	83 f8 04             	cmp    $0x4,%eax
+c01079d1:	74 24                	je     c01079f7 <check_content_set+0x1b6>
+c01079d3:	c7 44 24 0c db e0 10 	movl   $0xc010e0db,0xc(%esp)
+c01079da:	c0 
+c01079db:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c01079e2:	c0 
+c01079e3:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
+c01079ea:	00 
+c01079eb:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c01079f2:	e8 0e 8a ff ff       	call   c0100405 <__panic>
+}
+c01079f7:	90                   	nop
+c01079f8:	c9                   	leave  
+c01079f9:	c3                   	ret    
+
+c01079fa <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01079fa:	55                   	push   %ebp
+c01079fb:	89 e5                	mov    %esp,%ebp
+c01079fd:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c0107a00:	a1 1c 50 1b c0       	mov    0xc01b501c,%eax
+c0107a05:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107a08:	ff d0                	call   *%eax
+c0107a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c0107a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107a10:	c9                   	leave  
+c0107a11:	c3                   	ret    
+
+c0107a12 <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c0107a12:	55                   	push   %ebp
+c0107a13:	89 e5                	mov    %esp,%ebp
+c0107a15:	83 ec 78             	sub    $0x78,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c0107a18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0107a1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c0107a26:	c7 45 e8 c4 71 1b c0 	movl   $0xc01b71c4,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107a2d:	eb 6a                	jmp    c0107a99 <check_swap+0x87>
+        struct Page *p = le2page(le, page_link);
+c0107a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a32:	83 e8 0c             	sub    $0xc,%eax
+c0107a35:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(PageProperty(p));
+c0107a38:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107a3b:	83 c0 04             	add    $0x4,%eax
+c0107a3e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c0107a45:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107a48:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107a4b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107a4e:	0f a3 10             	bt     %edx,(%eax)
+c0107a51:	19 c0                	sbb    %eax,%eax
+c0107a53:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0107a56:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0107a5a:	0f 95 c0             	setne  %al
+c0107a5d:	0f b6 c0             	movzbl %al,%eax
+c0107a60:	85 c0                	test   %eax,%eax
+c0107a62:	75 24                	jne    c0107a88 <check_swap+0x76>
+c0107a64:	c7 44 24 0c ea e0 10 	movl   $0xc010e0ea,0xc(%esp)
+c0107a6b:	c0 
+c0107a6c:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107a73:	c0 
+c0107a74:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
+c0107a7b:	00 
+c0107a7c:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107a83:	e8 7d 89 ff ff       	call   c0100405 <__panic>
+        count ++, total += p->property;
+c0107a88:	ff 45 f4             	incl   -0xc(%ebp)
+c0107a8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107a8e:	8b 50 08             	mov    0x8(%eax),%edx
+c0107a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a94:	01 d0                	add    %edx,%eax
+c0107a96:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0107a9f:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107aa2:	8b 40 04             	mov    0x4(%eax),%eax
+     while ((le = list_next(le)) != &free_list) {
+c0107aa5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107aa8:	81 7d e8 c4 71 1b c0 	cmpl   $0xc01b71c4,-0x18(%ebp)
+c0107aaf:	0f 85 7a ff ff ff    	jne    c0107a2f <check_swap+0x1d>
+     }
+     assert(total == nr_free_pages());
+c0107ab5:	e8 bf bf ff ff       	call   c0103a79 <nr_free_pages>
+c0107aba:	89 c2                	mov    %eax,%edx
+c0107abc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107abf:	39 c2                	cmp    %eax,%edx
+c0107ac1:	74 24                	je     c0107ae7 <check_swap+0xd5>
+c0107ac3:	c7 44 24 0c fa e0 10 	movl   $0xc010e0fa,0xc(%esp)
+c0107aca:	c0 
+c0107acb:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107ad2:	c0 
+c0107ad3:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
+c0107ada:	00 
+c0107adb:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107ae2:	e8 1e 89 ff ff       	call   c0100405 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c0107ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107aea:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0107aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107af1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107af5:	c7 04 24 14 e1 10 c0 	movl   $0xc010e114,(%esp)
+c0107afc:	e8 ad 87 ff ff       	call   c01002ae <cprintf>
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c0107b01:	e8 10 e0 ff ff       	call   c0105b16 <mm_create>
+c0107b06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     assert(mm != NULL);
+c0107b09:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0107b0d:	75 24                	jne    c0107b33 <check_swap+0x121>
+c0107b0f:	c7 44 24 0c 3a e1 10 	movl   $0xc010e13a,0xc(%esp)
+c0107b16:	c0 
+c0107b17:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107b1e:	c0 
+c0107b1f:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
+c0107b26:	00 
+c0107b27:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107b2e:	e8 d2 88 ff ff       	call   c0100405 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c0107b33:	a1 e4 70 1b c0       	mov    0xc01b70e4,%eax
+c0107b38:	85 c0                	test   %eax,%eax
+c0107b3a:	74 24                	je     c0107b60 <check_swap+0x14e>
+c0107b3c:	c7 44 24 0c 45 e1 10 	movl   $0xc010e145,0xc(%esp)
+c0107b43:	c0 
+c0107b44:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107b4b:	c0 
+c0107b4c:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
+c0107b53:	00 
+c0107b54:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107b5b:	e8 a5 88 ff ff       	call   c0100405 <__panic>
+
+     check_mm_struct = mm;
+c0107b60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b63:	a3 e4 70 1b c0       	mov    %eax,0xc01b70e4
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0107b68:	8b 15 e0 e9 12 c0    	mov    0xc012e9e0,%edx
+c0107b6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b71:	89 50 0c             	mov    %edx,0xc(%eax)
+c0107b74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107b77:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107b7a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+     assert(pgdir[0] == 0);
+c0107b7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b80:	8b 00                	mov    (%eax),%eax
+c0107b82:	85 c0                	test   %eax,%eax
+c0107b84:	74 24                	je     c0107baa <check_swap+0x198>
+c0107b86:	c7 44 24 0c 5d e1 10 	movl   $0xc010e15d,0xc(%esp)
+c0107b8d:	c0 
+c0107b8e:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107b95:	c0 
+c0107b96:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
+c0107b9d:	00 
+c0107b9e:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107ba5:	e8 5b 88 ff ff       	call   c0100405 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c0107baa:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
+c0107bb1:	00 
+c0107bb2:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
+c0107bb9:	00 
+c0107bba:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+c0107bc1:	e8 e9 df ff ff       	call   c0105baf <vma_create>
+c0107bc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+     assert(vma != NULL);
+c0107bc9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0107bcd:	75 24                	jne    c0107bf3 <check_swap+0x1e1>
+c0107bcf:	c7 44 24 0c 6b e1 10 	movl   $0xc010e16b,0xc(%esp)
+c0107bd6:	c0 
+c0107bd7:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107bde:	c0 
+c0107bdf:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
+c0107be6:	00 
+c0107be7:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107bee:	e8 12 88 ff ff       	call   c0100405 <__panic>
+
+     insert_vma_struct(mm, vma);
+c0107bf3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107bf6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107bfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107bfd:	89 04 24             	mov    %eax,(%esp)
+c0107c00:	e8 3b e1 ff ff       	call   c0105d40 <insert_vma_struct>
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c0107c05:	c7 04 24 78 e1 10 c0 	movl   $0xc010e178,(%esp)
+c0107c0c:	e8 9d 86 ff ff       	call   c01002ae <cprintf>
+     pte_t *temp_ptep=NULL;
+c0107c11:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c0107c18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107c1b:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107c1e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+c0107c25:	00 
+c0107c26:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
+c0107c2d:	00 
+c0107c2e:	89 04 24             	mov    %eax,(%esp)
+c0107c31:	e8 85 c4 ff ff       	call   c01040bb <get_pte>
+c0107c36:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(temp_ptep!= NULL);
+c0107c39:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0107c3d:	75 24                	jne    c0107c63 <check_swap+0x251>
+c0107c3f:	c7 44 24 0c ac e1 10 	movl   $0xc010e1ac,0xc(%esp)
+c0107c46:	c0 
+c0107c47:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107c4e:	c0 
+c0107c4f:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0107c56:	00 
+c0107c57:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107c5e:	e8 a2 87 ff ff       	call   c0100405 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c0107c63:	c7 04 24 c0 e1 10 c0 	movl   $0xc010e1c0,(%esp)
+c0107c6a:	e8 3f 86 ff ff       	call   c01002ae <cprintf>
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107c6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107c76:	e9 a4 00 00 00       	jmp    c0107d1f <check_swap+0x30d>
+          check_rp[i] = alloc_page();
+c0107c7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0107c82:	e8 54 bd ff ff       	call   c01039db <alloc_pages>
+c0107c87:	89 c2                	mov    %eax,%edx
+c0107c89:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107c8c:	89 14 85 00 71 1b c0 	mov    %edx,-0x3fe48f00(,%eax,4)
+          assert(check_rp[i] != NULL );
+c0107c93:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107c96:	8b 04 85 00 71 1b c0 	mov    -0x3fe48f00(,%eax,4),%eax
+c0107c9d:	85 c0                	test   %eax,%eax
+c0107c9f:	75 24                	jne    c0107cc5 <check_swap+0x2b3>
+c0107ca1:	c7 44 24 0c e4 e1 10 	movl   $0xc010e1e4,0xc(%esp)
+c0107ca8:	c0 
+c0107ca9:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107cb0:	c0 
+c0107cb1:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
+c0107cb8:	00 
+c0107cb9:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107cc0:	e8 40 87 ff ff       	call   c0100405 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c0107cc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107cc8:	8b 04 85 00 71 1b c0 	mov    -0x3fe48f00(,%eax,4),%eax
+c0107ccf:	83 c0 04             	add    $0x4,%eax
+c0107cd2:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
+c0107cd9:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107cdc:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107cdf:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0107ce2:	0f a3 10             	bt     %edx,(%eax)
+c0107ce5:	19 c0                	sbb    %eax,%eax
+c0107ce7:	89 45 ac             	mov    %eax,-0x54(%ebp)
+    return oldbit != 0;
+c0107cea:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
+c0107cee:	0f 95 c0             	setne  %al
+c0107cf1:	0f b6 c0             	movzbl %al,%eax
+c0107cf4:	85 c0                	test   %eax,%eax
+c0107cf6:	74 24                	je     c0107d1c <check_swap+0x30a>
+c0107cf8:	c7 44 24 0c f8 e1 10 	movl   $0xc010e1f8,0xc(%esp)
+c0107cff:	c0 
+c0107d00:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107d07:	c0 
+c0107d08:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c0107d0f:	00 
+c0107d10:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107d17:	e8 e9 86 ff ff       	call   c0100405 <__panic>
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107d1c:	ff 45 ec             	incl   -0x14(%ebp)
+c0107d1f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107d23:	0f 8e 52 ff ff ff    	jle    c0107c7b <check_swap+0x269>
+     }
+     list_entry_t free_list_store = free_list;
+c0107d29:	a1 c4 71 1b c0       	mov    0xc01b71c4,%eax
+c0107d2e:	8b 15 c8 71 1b c0    	mov    0xc01b71c8,%edx
+c0107d34:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107d37:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c0107d3a:	c7 45 a4 c4 71 1b c0 	movl   $0xc01b71c4,-0x5c(%ebp)
+    elm->prev = elm->next = elm;
+c0107d41:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107d44:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c0107d47:	89 50 04             	mov    %edx,0x4(%eax)
+c0107d4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107d4d:	8b 50 04             	mov    0x4(%eax),%edx
+c0107d50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107d53:	89 10                	mov    %edx,(%eax)
+c0107d55:	c7 45 a8 c4 71 1b c0 	movl   $0xc01b71c4,-0x58(%ebp)
+    return list->next == list;
+c0107d5c:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107d5f:	8b 40 04             	mov    0x4(%eax),%eax
+c0107d62:	39 45 a8             	cmp    %eax,-0x58(%ebp)
+c0107d65:	0f 94 c0             	sete   %al
+c0107d68:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c0107d6b:	85 c0                	test   %eax,%eax
+c0107d6d:	75 24                	jne    c0107d93 <check_swap+0x381>
+c0107d6f:	c7 44 24 0c 13 e2 10 	movl   $0xc010e213,0xc(%esp)
+c0107d76:	c0 
+c0107d77:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107d7e:	c0 
+c0107d7f:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
+c0107d86:	00 
+c0107d87:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107d8e:	e8 72 86 ff ff       	call   c0100405 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c0107d93:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c0107d98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     nr_free = 0;
+c0107d9b:	c7 05 cc 71 1b c0 00 	movl   $0x0,0xc01b71cc
+c0107da2:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107da5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107dac:	eb 1d                	jmp    c0107dcb <check_swap+0x3b9>
+        free_pages(check_rp[i],1);
+c0107dae:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107db1:	8b 04 85 00 71 1b c0 	mov    -0x3fe48f00(,%eax,4),%eax
+c0107db8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107dbf:	00 
+c0107dc0:	89 04 24             	mov    %eax,(%esp)
+c0107dc3:	e8 7e bc ff ff       	call   c0103a46 <free_pages>
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107dc8:	ff 45 ec             	incl   -0x14(%ebp)
+c0107dcb:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107dcf:	7e dd                	jle    c0107dae <check_swap+0x39c>
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c0107dd1:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c0107dd6:	83 f8 04             	cmp    $0x4,%eax
+c0107dd9:	74 24                	je     c0107dff <check_swap+0x3ed>
+c0107ddb:	c7 44 24 0c 2c e2 10 	movl   $0xc010e22c,0xc(%esp)
+c0107de2:	c0 
+c0107de3:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107dea:	c0 
+c0107deb:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
+c0107df2:	00 
+c0107df3:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107dfa:	e8 06 86 ff ff       	call   c0100405 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c0107dff:	c7 04 24 50 e2 10 c0 	movl   $0xc010e250,(%esp)
+c0107e06:	e8 a3 84 ff ff       	call   c01002ae <cprintf>
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c0107e0b:	c7 05 0c 50 1b c0 00 	movl   $0x0,0xc01b500c
+c0107e12:	00 00 00 
+     
+     check_content_set();
+c0107e15:	e8 27 fa ff ff       	call   c0107841 <check_content_set>
+     assert( nr_free == 0);         
+c0107e1a:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c0107e1f:	85 c0                	test   %eax,%eax
+c0107e21:	74 24                	je     c0107e47 <check_swap+0x435>
+c0107e23:	c7 44 24 0c 77 e2 10 	movl   $0xc010e277,0xc(%esp)
+c0107e2a:	c0 
+c0107e2b:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107e32:	c0 
+c0107e33:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
+c0107e3a:	00 
+c0107e3b:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107e42:	e8 be 85 ff ff       	call   c0100405 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107e47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107e4e:	eb 25                	jmp    c0107e75 <check_swap+0x463>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0107e50:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107e53:	c7 04 85 20 71 1b c0 	movl   $0xffffffff,-0x3fe48ee0(,%eax,4)
+c0107e5a:	ff ff ff ff 
+c0107e5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107e61:	8b 14 85 20 71 1b c0 	mov    -0x3fe48ee0(,%eax,4),%edx
+c0107e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107e6b:	89 14 85 60 71 1b c0 	mov    %edx,-0x3fe48ea0(,%eax,4)
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107e72:	ff 45 ec             	incl   -0x14(%ebp)
+c0107e75:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c0107e79:	7e d5                	jle    c0107e50 <check_swap+0x43e>
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107e7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107e82:	e9 ec 00 00 00       	jmp    c0107f73 <check_swap+0x561>
+         check_ptep[i]=0;
+c0107e87:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107e8a:	c7 04 85 b4 71 1b c0 	movl   $0x0,-0x3fe48e4c(,%eax,4)
+c0107e91:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c0107e95:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107e98:	40                   	inc    %eax
+c0107e99:	c1 e0 0c             	shl    $0xc,%eax
+c0107e9c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c0107ea3:	00 
+c0107ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0107ea8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107eab:	89 04 24             	mov    %eax,(%esp)
+c0107eae:	e8 08 c2 ff ff       	call   c01040bb <get_pte>
+c0107eb3:	89 c2                	mov    %eax,%edx
+c0107eb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107eb8:	89 14 85 b4 71 1b c0 	mov    %edx,-0x3fe48e4c(,%eax,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c0107ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107ec2:	8b 04 85 b4 71 1b c0 	mov    -0x3fe48e4c(,%eax,4),%eax
+c0107ec9:	85 c0                	test   %eax,%eax
+c0107ecb:	75 24                	jne    c0107ef1 <check_swap+0x4df>
+c0107ecd:	c7 44 24 0c 84 e2 10 	movl   $0xc010e284,0xc(%esp)
+c0107ed4:	c0 
+c0107ed5:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107edc:	c0 
+c0107edd:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
+c0107ee4:	00 
+c0107ee5:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107eec:	e8 14 85 ff ff       	call   c0100405 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c0107ef1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107ef4:	8b 04 85 b4 71 1b c0 	mov    -0x3fe48e4c(,%eax,4),%eax
+c0107efb:	8b 00                	mov    (%eax),%eax
+c0107efd:	89 04 24             	mov    %eax,(%esp)
+c0107f00:	e8 8e f5 ff ff       	call   c0107493 <pte2page>
+c0107f05:	89 c2                	mov    %eax,%edx
+c0107f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f0a:	8b 04 85 00 71 1b c0 	mov    -0x3fe48f00(,%eax,4),%eax
+c0107f11:	39 c2                	cmp    %eax,%edx
+c0107f13:	74 24                	je     c0107f39 <check_swap+0x527>
+c0107f15:	c7 44 24 0c 9c e2 10 	movl   $0xc010e29c,0xc(%esp)
+c0107f1c:	c0 
+c0107f1d:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107f24:	c0 
+c0107f25:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c0107f2c:	00 
+c0107f2d:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107f34:	e8 cc 84 ff ff       	call   c0100405 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c0107f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f3c:	8b 04 85 b4 71 1b c0 	mov    -0x3fe48e4c(,%eax,4),%eax
+c0107f43:	8b 00                	mov    (%eax),%eax
+c0107f45:	83 e0 01             	and    $0x1,%eax
+c0107f48:	85 c0                	test   %eax,%eax
+c0107f4a:	75 24                	jne    c0107f70 <check_swap+0x55e>
+c0107f4c:	c7 44 24 0c c4 e2 10 	movl   $0xc010e2c4,0xc(%esp)
+c0107f53:	c0 
+c0107f54:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107f5b:	c0 
+c0107f5c:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
+c0107f63:	00 
+c0107f64:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107f6b:	e8 95 84 ff ff       	call   c0100405 <__panic>
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107f70:	ff 45 ec             	incl   -0x14(%ebp)
+c0107f73:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107f77:	0f 8e 0a ff ff ff    	jle    c0107e87 <check_swap+0x475>
+     }
+     cprintf("set up init env for check_swap over!\n");
+c0107f7d:	c7 04 24 e0 e2 10 c0 	movl   $0xc010e2e0,(%esp)
+c0107f84:	e8 25 83 ff ff       	call   c01002ae <cprintf>
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c0107f89:	e8 6c fa ff ff       	call   c01079fa <check_content_access>
+c0107f8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     assert(ret==0);
+c0107f91:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0107f95:	74 24                	je     c0107fbb <check_swap+0x5a9>
+c0107f97:	c7 44 24 0c 06 e3 10 	movl   $0xc010e306,0xc(%esp)
+c0107f9e:	c0 
+c0107f9f:	c7 44 24 08 ee df 10 	movl   $0xc010dfee,0x8(%esp)
+c0107fa6:	c0 
+c0107fa7:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
+c0107fae:	00 
+c0107faf:	c7 04 24 88 df 10 c0 	movl   $0xc010df88,(%esp)
+c0107fb6:	e8 4a 84 ff ff       	call   c0100405 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107fbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107fc2:	eb 1d                	jmp    c0107fe1 <check_swap+0x5cf>
+         free_pages(check_rp[i],1);
+c0107fc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107fc7:	8b 04 85 00 71 1b c0 	mov    -0x3fe48f00(,%eax,4),%eax
+c0107fce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107fd5:	00 
+c0107fd6:	89 04 24             	mov    %eax,(%esp)
+c0107fd9:	e8 68 ba ff ff       	call   c0103a46 <free_pages>
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107fde:	ff 45 ec             	incl   -0x14(%ebp)
+c0107fe1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107fe5:	7e dd                	jle    c0107fc4 <check_swap+0x5b2>
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c0107fe7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107fea:	8b 00                	mov    (%eax),%eax
+c0107fec:	89 04 24             	mov    %eax,(%esp)
+c0107fef:	e8 dd f4 ff ff       	call   c01074d1 <pde2page>
+c0107ff4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0107ffb:	00 
+c0107ffc:	89 04 24             	mov    %eax,(%esp)
+c0107fff:	e8 42 ba ff ff       	call   c0103a46 <free_pages>
+     pgdir[0] = 0;
+c0108004:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108007:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c010800d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108010:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c0108017:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010801a:	89 04 24             	mov    %eax,(%esp)
+c010801d:	e8 50 de ff ff       	call   c0105e72 <mm_destroy>
+     check_mm_struct = NULL;
+c0108022:	c7 05 e4 70 1b c0 00 	movl   $0x0,0xc01b70e4
+c0108029:	00 00 00 
+     
+     nr_free = nr_free_store;
+c010802c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010802f:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+     free_list = free_list_store;
+c0108034:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0108037:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c010803a:	a3 c4 71 1b c0       	mov    %eax,0xc01b71c4
+c010803f:	89 15 c8 71 1b c0    	mov    %edx,0xc01b71c8
+
+     
+     le = &free_list;
+c0108045:	c7 45 e8 c4 71 1b c0 	movl   $0xc01b71c4,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c010804c:	eb 1c                	jmp    c010806a <check_swap+0x658>
+         struct Page *p = le2page(le, page_link);
+c010804e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108051:	83 e8 0c             	sub    $0xc,%eax
+c0108054:	89 45 cc             	mov    %eax,-0x34(%ebp)
+         count --, total -= p->property;
+c0108057:	ff 4d f4             	decl   -0xc(%ebp)
+c010805a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010805d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108060:	8b 40 08             	mov    0x8(%eax),%eax
+c0108063:	29 c2                	sub    %eax,%edx
+c0108065:	89 d0                	mov    %edx,%eax
+c0108067:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010806a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010806d:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return listelm->next;
+c0108070:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0108073:	8b 40 04             	mov    0x4(%eax),%eax
+     while ((le = list_next(le)) != &free_list) {
+c0108076:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108079:	81 7d e8 c4 71 1b c0 	cmpl   $0xc01b71c4,-0x18(%ebp)
+c0108080:	75 cc                	jne    c010804e <check_swap+0x63c>
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0108082:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108085:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0108089:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010808c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0108090:	c7 04 24 0d e3 10 c0 	movl   $0xc010e30d,(%esp)
+c0108097:	e8 12 82 ff ff       	call   c01002ae <cprintf>
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c010809c:	c7 04 24 27 e3 10 c0 	movl   $0xc010e327,(%esp)
+c01080a3:	e8 06 82 ff ff       	call   c01002ae <cprintf>
+}
+c01080a8:	90                   	nop
+c01080a9:	c9                   	leave  
+c01080aa:	c3                   	ret    
+
+c01080ab <page2ppn>:
+page2ppn(struct Page *page) {
+c01080ab:	55                   	push   %ebp
+c01080ac:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01080ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080b1:	8b 15 d8 70 1b c0    	mov    0xc01b70d8,%edx
+c01080b7:	29 d0                	sub    %edx,%eax
+c01080b9:	c1 f8 05             	sar    $0x5,%eax
+}
+c01080bc:	5d                   	pop    %ebp
+c01080bd:	c3                   	ret    
+
+c01080be <page2pa>:
+page2pa(struct Page *page) {
+c01080be:	55                   	push   %ebp
+c01080bf:	89 e5                	mov    %esp,%ebp
+c01080c1:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c01080c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080c7:	89 04 24             	mov    %eax,(%esp)
+c01080ca:	e8 dc ff ff ff       	call   c01080ab <page2ppn>
+c01080cf:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01080d2:	c9                   	leave  
+c01080d3:	c3                   	ret    
+
+c01080d4 <page_ref>:
+page_ref(struct Page *page) {
+c01080d4:	55                   	push   %ebp
+c01080d5:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01080d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080da:	8b 00                	mov    (%eax),%eax
+}
+c01080dc:	5d                   	pop    %ebp
+c01080dd:	c3                   	ret    
+
+c01080de <set_page_ref>:
+set_page_ref(struct Page *page, int val) {
+c01080de:	55                   	push   %ebp
+c01080df:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c01080e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01080e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01080e7:	89 10                	mov    %edx,(%eax)
+}
+c01080e9:	90                   	nop
+c01080ea:	5d                   	pop    %ebp
+c01080eb:	c3                   	ret    
+
+c01080ec <default_init>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void)
+{
+c01080ec:	55                   	push   %ebp
+c01080ed:	89 e5                	mov    %esp,%ebp
+c01080ef:	83 ec 10             	sub    $0x10,%esp
+c01080f2:	c7 45 fc c4 71 1b c0 	movl   $0xc01b71c4,-0x4(%ebp)
+    elm->prev = elm->next = elm;
+c01080f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01080fc:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01080ff:	89 50 04             	mov    %edx,0x4(%eax)
+c0108102:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108105:	8b 50 04             	mov    0x4(%eax),%edx
+c0108108:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010810b:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c010810d:	c7 05 cc 71 1b c0 00 	movl   $0x0,0xc01b71cc
+c0108114:	00 00 00 
+}
+c0108117:	90                   	nop
+c0108118:	c9                   	leave  
+c0108119:	c3                   	ret    
+
+c010811a <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n)
+{
+c010811a:	55                   	push   %ebp
+c010811b:	89 e5                	mov    %esp,%ebp
+c010811d:	83 ec 58             	sub    $0x58,%esp
+    assert(n > 0);
+c0108120:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0108124:	75 24                	jne    c010814a <default_init_memmap+0x30>
+c0108126:	c7 44 24 0c 40 e3 10 	movl   $0xc010e340,0xc(%esp)
+c010812d:	c0 
+c010812e:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108135:	c0 
+c0108136:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
+c010813d:	00 
+c010813e:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108145:	e8 bb 82 ff ff       	call   c0100405 <__panic>
+    struct Page *p = base;
+c010814a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010814d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p++)
+c0108150:	eb 7d                	jmp    c01081cf <default_init_memmap+0xb5>
+    {
+        assert(PageReserved(p));
+c0108152:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108155:	83 c0 04             	add    $0x4,%eax
+c0108158:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+c010815f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108162:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108165:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108168:	0f a3 10             	bt     %edx,(%eax)
+c010816b:	19 c0                	sbb    %eax,%eax
+c010816d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return oldbit != 0;
+c0108170:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0108174:	0f 95 c0             	setne  %al
+c0108177:	0f b6 c0             	movzbl %al,%eax
+c010817a:	85 c0                	test   %eax,%eax
+c010817c:	75 24                	jne    c01081a2 <default_init_memmap+0x88>
+c010817e:	c7 44 24 0c 71 e3 10 	movl   $0xc010e371,0xc(%esp)
+c0108185:	c0 
+c0108186:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c010818d:	c0 
+c010818e:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
+c0108195:	00 
+c0108196:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c010819d:	e8 63 82 ff ff       	call   c0100405 <__panic>
+        p->flags = p->property = 0;
+c01081a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01081a5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c01081ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01081af:	8b 50 08             	mov    0x8(%eax),%edx
+c01081b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01081b5:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c01081b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01081bf:	00 
+c01081c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01081c3:	89 04 24             	mov    %eax,(%esp)
+c01081c6:	e8 13 ff ff ff       	call   c01080de <set_page_ref>
+    for (; p != base + n; p++)
+c01081cb:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01081cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01081d2:	c1 e0 05             	shl    $0x5,%eax
+c01081d5:	89 c2                	mov    %eax,%edx
+c01081d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081da:	01 d0                	add    %edx,%eax
+c01081dc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01081df:	0f 85 6d ff ff ff    	jne    c0108152 <default_init_memmap+0x38>
+    }
+    base->property = n;
+c01081e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081e8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01081eb:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01081ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01081f1:	83 c0 04             	add    $0x4,%eax
+c01081f4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
+c01081fb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01081fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0108201:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0108204:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c0108207:	8b 15 cc 71 1b c0    	mov    0xc01b71cc,%edx
+c010820d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108210:	01 d0                	add    %edx,%eax
+c0108212:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+    list_add(&free_list, &(base->page_link));
+c0108217:	8b 45 08             	mov    0x8(%ebp),%eax
+c010821a:	83 c0 0c             	add    $0xc,%eax
+c010821d:	c7 45 e4 c4 71 1b c0 	movl   $0xc01b71c4,-0x1c(%ebp)
+c0108224:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0108227:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010822a:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010822d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108230:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    __list_add(elm, listelm, listelm->next);
+c0108233:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108236:	8b 40 04             	mov    0x4(%eax),%eax
+c0108239:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010823c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010823f:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0108242:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0108245:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    prev->next = next->prev = elm;
+c0108248:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010824b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010824e:	89 10                	mov    %edx,(%eax)
+c0108250:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108253:	8b 10                	mov    (%eax),%edx
+c0108255:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108258:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010825b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010825e:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0108261:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0108264:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108267:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010826a:	89 10                	mov    %edx,(%eax)
+}
+c010826c:	90                   	nop
+c010826d:	c9                   	leave  
+c010826e:	c3                   	ret    
+
+c010826f <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n)
+{
+c010826f:	55                   	push   %ebp
+c0108270:	89 e5                	mov    %esp,%ebp
+c0108272:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c0108275:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108279:	75 24                	jne    c010829f <default_alloc_pages+0x30>
+c010827b:	c7 44 24 0c 40 e3 10 	movl   $0xc010e340,0xc(%esp)
+c0108282:	c0 
+c0108283:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c010828a:	c0 
+c010828b:	c7 44 24 04 80 00 00 	movl   $0x80,0x4(%esp)
+c0108292:	00 
+c0108293:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c010829a:	e8 66 81 ff ff       	call   c0100405 <__panic>
+    if (n > nr_free)
+c010829f:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c01082a4:	39 45 08             	cmp    %eax,0x8(%ebp)
+c01082a7:	76 0a                	jbe    c01082b3 <default_alloc_pages+0x44>
+    {
+        return NULL;
+c01082a9:	b8 00 00 00 00       	mov    $0x0,%eax
+c01082ae:	e9 36 01 00 00       	jmp    c01083e9 <default_alloc_pages+0x17a>
+    }
+    struct Page *page = NULL;
+c01082b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c01082ba:	c7 45 f0 c4 71 1b c0 	movl   $0xc01b71c4,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list)
+c01082c1:	eb 1c                	jmp    c01082df <default_alloc_pages+0x70>
+    {
+        struct Page *p = le2page(le, page_link);
+c01082c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082c6:	83 e8 0c             	sub    $0xc,%eax
+c01082c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (p->property >= n)
+c01082cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01082cf:	8b 40 08             	mov    0x8(%eax),%eax
+c01082d2:	39 45 08             	cmp    %eax,0x8(%ebp)
+c01082d5:	77 08                	ja     c01082df <default_alloc_pages+0x70>
+        {
+            page = p;
+c01082d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01082da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c01082dd:	eb 18                	jmp    c01082f7 <default_alloc_pages+0x88>
+c01082df:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01082e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return listelm->next;
+c01082e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01082e8:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != &free_list)
+c01082eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01082ee:	81 7d f0 c4 71 1b c0 	cmpl   $0xc01b71c4,-0x10(%ebp)
+c01082f5:	75 cc                	jne    c01082c3 <default_alloc_pages+0x54>
+        }
+    }
+    if (page != NULL)
+c01082f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01082fb:	0f 84 e5 00 00 00    	je     c01083e6 <default_alloc_pages+0x177>
+    {
+        if (page->property > n)
+c0108301:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108304:	8b 40 08             	mov    0x8(%eax),%eax
+c0108307:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010830a:	0f 83 85 00 00 00    	jae    c0108395 <default_alloc_pages+0x126>
+        {
+            struct Page *p = page + n;
+c0108310:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108313:	c1 e0 05             	shl    $0x5,%eax
+c0108316:	89 c2                	mov    %eax,%edx
+c0108318:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010831b:	01 d0                	add    %edx,%eax
+c010831d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            p->property = page->property - n;
+c0108320:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108323:	8b 40 08             	mov    0x8(%eax),%eax
+c0108326:	2b 45 08             	sub    0x8(%ebp),%eax
+c0108329:	89 c2                	mov    %eax,%edx
+c010832b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010832e:	89 50 08             	mov    %edx,0x8(%eax)
+            SetPageProperty(p);
+c0108331:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108334:	83 c0 04             	add    $0x4,%eax
+c0108337:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
+c010833e:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0108341:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0108344:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0108347:	0f ab 10             	bts    %edx,(%eax)
+            list_add_after(&(page->page_link), &(p->page_link));
+c010834a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010834d:	83 c0 0c             	add    $0xc,%eax
+c0108350:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108353:	83 c2 0c             	add    $0xc,%edx
+c0108356:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0108359:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    __list_add(elm, listelm, listelm->next);
+c010835c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010835f:	8b 40 04             	mov    0x4(%eax),%eax
+c0108362:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0108365:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c0108368:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010836b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010836e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    prev->next = next->prev = elm;
+c0108371:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108374:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0108377:	89 10                	mov    %edx,(%eax)
+c0108379:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010837c:	8b 10                	mov    (%eax),%edx
+c010837e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108381:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0108384:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108387:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010838a:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010838d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108390:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108393:	89 10                	mov    %edx,(%eax)
+        }
+        list_del(&(page->page_link));
+c0108395:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108398:	83 c0 0c             	add    $0xc,%eax
+c010839b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c010839e:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c01083a1:	8b 40 04             	mov    0x4(%eax),%eax
+c01083a4:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01083a7:	8b 12                	mov    (%edx),%edx
+c01083a9:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c01083ac:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+    prev->next = next;
+c01083af:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01083b2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01083b5:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01083b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01083bb:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c01083be:	89 10                	mov    %edx,(%eax)
+        nr_free -= n;
+c01083c0:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c01083c5:	2b 45 08             	sub    0x8(%ebp),%eax
+c01083c8:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+        ClearPageProperty(page);
+c01083cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01083d0:	83 c0 04             	add    $0x4,%eax
+c01083d3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+c01083da:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01083dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01083e0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c01083e3:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c01083e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01083e9:	c9                   	leave  
+c01083ea:	c3                   	ret    
+
+c01083eb <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n)
+{
+c01083eb:	55                   	push   %ebp
+c01083ec:	89 e5                	mov    %esp,%ebp
+c01083ee:	81 ec 98 00 00 00    	sub    $0x98,%esp
+    assert(n > 0);
+c01083f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01083f8:	75 24                	jne    c010841e <default_free_pages+0x33>
+c01083fa:	c7 44 24 0c 40 e3 10 	movl   $0xc010e340,0xc(%esp)
+c0108401:	c0 
+c0108402:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108409:	c0 
+c010840a:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
+c0108411:	00 
+c0108412:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108419:	e8 e7 7f ff ff       	call   c0100405 <__panic>
+    struct Page *p = base;
+c010841e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108421:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p++)
+c0108424:	e9 9d 00 00 00       	jmp    c01084c6 <default_free_pages+0xdb>
+    {
+        assert(!PageReserved(p) && !PageProperty(p));
+c0108429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010842c:	83 c0 04             	add    $0x4,%eax
+c010842f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0108436:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108439:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010843c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010843f:	0f a3 10             	bt     %edx,(%eax)
+c0108442:	19 c0                	sbb    %eax,%eax
+c0108444:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return oldbit != 0;
+c0108447:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010844b:	0f 95 c0             	setne  %al
+c010844e:	0f b6 c0             	movzbl %al,%eax
+c0108451:	85 c0                	test   %eax,%eax
+c0108453:	75 2c                	jne    c0108481 <default_free_pages+0x96>
+c0108455:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108458:	83 c0 04             	add    $0x4,%eax
+c010845b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0108462:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108465:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108468:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010846b:	0f a3 10             	bt     %edx,(%eax)
+c010846e:	19 c0                	sbb    %eax,%eax
+c0108470:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    return oldbit != 0;
+c0108473:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0108477:	0f 95 c0             	setne  %al
+c010847a:	0f b6 c0             	movzbl %al,%eax
+c010847d:	85 c0                	test   %eax,%eax
+c010847f:	74 24                	je     c01084a5 <default_free_pages+0xba>
+c0108481:	c7 44 24 0c 84 e3 10 	movl   $0xc010e384,0xc(%esp)
+c0108488:	c0 
+c0108489:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108490:	c0 
+c0108491:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
+c0108498:	00 
+c0108499:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c01084a0:	e8 60 7f ff ff       	call   c0100405 <__panic>
+        p->flags = 0;
+c01084a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01084a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c01084af:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c01084b6:	00 
+c01084b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01084ba:	89 04 24             	mov    %eax,(%esp)
+c01084bd:	e8 1c fc ff ff       	call   c01080de <set_page_ref>
+    for (; p != base + n; p++)
+c01084c2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01084c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01084c9:	c1 e0 05             	shl    $0x5,%eax
+c01084cc:	89 c2                	mov    %eax,%edx
+c01084ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01084d1:	01 d0                	add    %edx,%eax
+c01084d3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01084d6:	0f 85 4d ff ff ff    	jne    c0108429 <default_free_pages+0x3e>
+    }
+    base->property = n;
+c01084dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01084df:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01084e2:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01084e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01084e8:	83 c0 04             	add    $0x4,%eax
+c01084eb:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
+c01084f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01084f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01084f8:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c01084fb:	0f ab 10             	bts    %edx,(%eax)
+c01084fe:	c7 45 d4 c4 71 1b c0 	movl   $0xc01b71c4,-0x2c(%ebp)
+    return listelm->next;
+c0108505:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108508:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c010850b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list)
+c010850e:	e9 fa 00 00 00       	jmp    c010860d <default_free_pages+0x222>
+    {
+        p = le2page(le, page_link);
+c0108513:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108516:	83 e8 0c             	sub    $0xc,%eax
+c0108519:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010851c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010851f:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0108522:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0108525:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0108528:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (base + base->property == p)
+c010852b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010852e:	8b 40 08             	mov    0x8(%eax),%eax
+c0108531:	c1 e0 05             	shl    $0x5,%eax
+c0108534:	89 c2                	mov    %eax,%edx
+c0108536:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108539:	01 d0                	add    %edx,%eax
+c010853b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010853e:	75 5a                	jne    c010859a <default_free_pages+0x1af>
+        {
+            base->property += p->property;
+c0108540:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108543:	8b 50 08             	mov    0x8(%eax),%edx
+c0108546:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108549:	8b 40 08             	mov    0x8(%eax),%eax
+c010854c:	01 c2                	add    %eax,%edx
+c010854e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108551:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c0108554:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108557:	83 c0 04             	add    $0x4,%eax
+c010855a:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
+c0108561:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0108564:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0108567:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010856a:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c010856d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108570:	83 c0 0c             	add    $0xc,%eax
+c0108573:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c0108576:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0108579:	8b 40 04             	mov    0x4(%eax),%eax
+c010857c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c010857f:	8b 12                	mov    (%edx),%edx
+c0108581:	89 55 c0             	mov    %edx,-0x40(%ebp)
+c0108584:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    prev->next = next;
+c0108587:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010858a:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c010858d:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0108590:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108593:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0108596:	89 10                	mov    %edx,(%eax)
+c0108598:	eb 73                	jmp    c010860d <default_free_pages+0x222>
+        }
+        else if (p + p->property == base)
+c010859a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010859d:	8b 40 08             	mov    0x8(%eax),%eax
+c01085a0:	c1 e0 05             	shl    $0x5,%eax
+c01085a3:	89 c2                	mov    %eax,%edx
+c01085a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085a8:	01 d0                	add    %edx,%eax
+c01085aa:	39 45 08             	cmp    %eax,0x8(%ebp)
+c01085ad:	75 5e                	jne    c010860d <default_free_pages+0x222>
+        {
+            p->property += base->property;
+c01085af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085b2:	8b 50 08             	mov    0x8(%eax),%edx
+c01085b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085b8:	8b 40 08             	mov    0x8(%eax),%eax
+c01085bb:	01 c2                	add    %eax,%edx
+c01085bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085c0:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c01085c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085c6:	83 c0 04             	add    $0x4,%eax
+c01085c9:	c7 45 a4 01 00 00 00 	movl   $0x1,-0x5c(%ebp)
+c01085d0:	89 45 a0             	mov    %eax,-0x60(%ebp)
+c01085d3:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c01085d6:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+c01085d9:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c01085dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085df:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c01085e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01085e5:	83 c0 0c             	add    $0xc,%eax
+c01085e8:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c01085eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01085ee:	8b 40 04             	mov    0x4(%eax),%eax
+c01085f1:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01085f4:	8b 12                	mov    (%edx),%edx
+c01085f6:	89 55 ac             	mov    %edx,-0x54(%ebp)
+c01085f9:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    prev->next = next;
+c01085fc:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01085ff:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0108602:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0108605:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0108608:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c010860b:	89 10                	mov    %edx,(%eax)
+    while (le != &free_list)
+c010860d:	81 7d f0 c4 71 1b c0 	cmpl   $0xc01b71c4,-0x10(%ebp)
+c0108614:	0f 85 f9 fe ff ff    	jne    c0108513 <default_free_pages+0x128>
+        }
+    }
+    nr_free += n;
+c010861a:	8b 15 cc 71 1b c0    	mov    0xc01b71cc,%edx
+c0108620:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108623:	01 d0                	add    %edx,%eax
+c0108625:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+c010862a:	c7 45 9c c4 71 1b c0 	movl   $0xc01b71c4,-0x64(%ebp)
+    return listelm->next;
+c0108631:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0108634:	8b 40 04             	mov    0x4(%eax),%eax
+    for (le = list_next(&free_list); le != &free_list; le = list_next(le))
+c0108637:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010863a:	eb 2d                	jmp    c0108669 <default_free_pages+0x27e>
+    {
+        p = le2page(le, page_link);
+c010863c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010863f:	83 e8 0c             	sub    $0xc,%eax
+c0108642:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (base + base->property <= p)
+c0108645:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108648:	8b 40 08             	mov    0x8(%eax),%eax
+c010864b:	c1 e0 05             	shl    $0x5,%eax
+c010864e:	89 c2                	mov    %eax,%edx
+c0108650:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108653:	01 d0                	add    %edx,%eax
+c0108655:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0108658:	73 1a                	jae    c0108674 <default_free_pages+0x289>
+c010865a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010865d:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0108660:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0108663:	8b 40 04             	mov    0x4(%eax),%eax
+    for (le = list_next(&free_list); le != &free_list; le = list_next(le))
+c0108666:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108669:	81 7d f0 c4 71 1b c0 	cmpl   $0xc01b71c4,-0x10(%ebp)
+c0108670:	75 ca                	jne    c010863c <default_free_pages+0x251>
+c0108672:	eb 01                	jmp    c0108675 <default_free_pages+0x28a>
+            break;
+c0108674:	90                   	nop
+    }
+    list_add_before(le, &(base->page_link));
+c0108675:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108678:	8d 50 0c             	lea    0xc(%eax),%edx
+c010867b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010867e:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0108681:	89 55 90             	mov    %edx,-0x70(%ebp)
+    __list_add(elm, listelm->prev, listelm);
+c0108684:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0108687:	8b 00                	mov    (%eax),%eax
+c0108689:	8b 55 90             	mov    -0x70(%ebp),%edx
+c010868c:	89 55 8c             	mov    %edx,-0x74(%ebp)
+c010868f:	89 45 88             	mov    %eax,-0x78(%ebp)
+c0108692:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0108695:	89 45 84             	mov    %eax,-0x7c(%ebp)
+    prev->next = next->prev = elm;
+c0108698:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c010869b:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c010869e:	89 10                	mov    %edx,(%eax)
+c01086a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
+c01086a3:	8b 10                	mov    (%eax),%edx
+c01086a5:	8b 45 88             	mov    -0x78(%ebp),%eax
+c01086a8:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01086ab:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c01086ae:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01086b1:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c01086b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c01086b7:	8b 55 88             	mov    -0x78(%ebp),%edx
+c01086ba:	89 10                	mov    %edx,(%eax)
+}
+c01086bc:	90                   	nop
+c01086bd:	c9                   	leave  
+c01086be:	c3                   	ret    
+
+c01086bf <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void)
+{
+c01086bf:	55                   	push   %ebp
+c01086c0:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c01086c2:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+}
+c01086c7:	5d                   	pop    %ebp
+c01086c8:	c3                   	ret    
+
+c01086c9 <basic_check>:
+
+static void
+basic_check(void)
+{
+c01086c9:	55                   	push   %ebp
+c01086ca:	89 e5                	mov    %esp,%ebp
+c01086cc:	83 ec 48             	sub    $0x48,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c01086cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01086d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01086d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01086dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01086df:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c01086e2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01086e9:	e8 ed b2 ff ff       	call   c01039db <alloc_pages>
+c01086ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01086f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01086f5:	75 24                	jne    c010871b <basic_check+0x52>
+c01086f7:	c7 44 24 0c a9 e3 10 	movl   $0xc010e3a9,0xc(%esp)
+c01086fe:	c0 
+c01086ff:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108706:	c0 
+c0108707:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
+c010870e:	00 
+c010870f:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108716:	e8 ea 7c ff ff       	call   c0100405 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c010871b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108722:	e8 b4 b2 ff ff       	call   c01039db <alloc_pages>
+c0108727:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010872a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010872e:	75 24                	jne    c0108754 <basic_check+0x8b>
+c0108730:	c7 44 24 0c c5 e3 10 	movl   $0xc010e3c5,0xc(%esp)
+c0108737:	c0 
+c0108738:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c010873f:	c0 
+c0108740:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
+c0108747:	00 
+c0108748:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c010874f:	e8 b1 7c ff ff       	call   c0100405 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0108754:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010875b:	e8 7b b2 ff ff       	call   c01039db <alloc_pages>
+c0108760:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108763:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108767:	75 24                	jne    c010878d <basic_check+0xc4>
+c0108769:	c7 44 24 0c e1 e3 10 	movl   $0xc010e3e1,0xc(%esp)
+c0108770:	c0 
+c0108771:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108778:	c0 
+c0108779:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
+c0108780:	00 
+c0108781:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108788:	e8 78 7c ff ff       	call   c0100405 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c010878d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108790:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0108793:	74 10                	je     c01087a5 <basic_check+0xdc>
+c0108795:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108798:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010879b:	74 08                	je     c01087a5 <basic_check+0xdc>
+c010879d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01087a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01087a3:	75 24                	jne    c01087c9 <basic_check+0x100>
+c01087a5:	c7 44 24 0c 00 e4 10 	movl   $0xc010e400,0xc(%esp)
+c01087ac:	c0 
+c01087ad:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c01087b4:	c0 
+c01087b5:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
+c01087bc:	00 
+c01087bd:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c01087c4:	e8 3c 7c ff ff       	call   c0100405 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c01087c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01087cc:	89 04 24             	mov    %eax,(%esp)
+c01087cf:	e8 00 f9 ff ff       	call   c01080d4 <page_ref>
+c01087d4:	85 c0                	test   %eax,%eax
+c01087d6:	75 1e                	jne    c01087f6 <basic_check+0x12d>
+c01087d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01087db:	89 04 24             	mov    %eax,(%esp)
+c01087de:	e8 f1 f8 ff ff       	call   c01080d4 <page_ref>
+c01087e3:	85 c0                	test   %eax,%eax
+c01087e5:	75 0f                	jne    c01087f6 <basic_check+0x12d>
+c01087e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01087ea:	89 04 24             	mov    %eax,(%esp)
+c01087ed:	e8 e2 f8 ff ff       	call   c01080d4 <page_ref>
+c01087f2:	85 c0                	test   %eax,%eax
+c01087f4:	74 24                	je     c010881a <basic_check+0x151>
+c01087f6:	c7 44 24 0c 24 e4 10 	movl   $0xc010e424,0xc(%esp)
+c01087fd:	c0 
+c01087fe:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108805:	c0 
+c0108806:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
+c010880d:	00 
+c010880e:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108815:	e8 eb 7b ff ff       	call   c0100405 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c010881a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010881d:	89 04 24             	mov    %eax,(%esp)
+c0108820:	e8 99 f8 ff ff       	call   c01080be <page2pa>
+c0108825:	8b 15 80 4f 1b c0    	mov    0xc01b4f80,%edx
+c010882b:	c1 e2 0c             	shl    $0xc,%edx
+c010882e:	39 d0                	cmp    %edx,%eax
+c0108830:	72 24                	jb     c0108856 <basic_check+0x18d>
+c0108832:	c7 44 24 0c 60 e4 10 	movl   $0xc010e460,0xc(%esp)
+c0108839:	c0 
+c010883a:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108841:	c0 
+c0108842:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
+c0108849:	00 
+c010884a:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108851:	e8 af 7b ff ff       	call   c0100405 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0108856:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108859:	89 04 24             	mov    %eax,(%esp)
+c010885c:	e8 5d f8 ff ff       	call   c01080be <page2pa>
+c0108861:	8b 15 80 4f 1b c0    	mov    0xc01b4f80,%edx
+c0108867:	c1 e2 0c             	shl    $0xc,%edx
+c010886a:	39 d0                	cmp    %edx,%eax
+c010886c:	72 24                	jb     c0108892 <basic_check+0x1c9>
+c010886e:	c7 44 24 0c 7d e4 10 	movl   $0xc010e47d,0xc(%esp)
+c0108875:	c0 
+c0108876:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c010887d:	c0 
+c010887e:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
+c0108885:	00 
+c0108886:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c010888d:	e8 73 7b ff ff       	call   c0100405 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0108892:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108895:	89 04 24             	mov    %eax,(%esp)
+c0108898:	e8 21 f8 ff ff       	call   c01080be <page2pa>
+c010889d:	8b 15 80 4f 1b c0    	mov    0xc01b4f80,%edx
+c01088a3:	c1 e2 0c             	shl    $0xc,%edx
+c01088a6:	39 d0                	cmp    %edx,%eax
+c01088a8:	72 24                	jb     c01088ce <basic_check+0x205>
+c01088aa:	c7 44 24 0c 9a e4 10 	movl   $0xc010e49a,0xc(%esp)
+c01088b1:	c0 
+c01088b2:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c01088b9:	c0 
+c01088ba:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
+c01088c1:	00 
+c01088c2:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c01088c9:	e8 37 7b ff ff       	call   c0100405 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c01088ce:	a1 c4 71 1b c0       	mov    0xc01b71c4,%eax
+c01088d3:	8b 15 c8 71 1b c0    	mov    0xc01b71c8,%edx
+c01088d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01088dc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01088df:	c7 45 dc c4 71 1b c0 	movl   $0xc01b71c4,-0x24(%ebp)
+    elm->prev = elm->next = elm;
+c01088e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01088e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01088ec:	89 50 04             	mov    %edx,0x4(%eax)
+c01088ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01088f2:	8b 50 04             	mov    0x4(%eax),%edx
+c01088f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01088f8:	89 10                	mov    %edx,(%eax)
+c01088fa:	c7 45 e0 c4 71 1b c0 	movl   $0xc01b71c4,-0x20(%ebp)
+    return list->next == list;
+c0108901:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108904:	8b 40 04             	mov    0x4(%eax),%eax
+c0108907:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c010890a:	0f 94 c0             	sete   %al
+c010890d:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0108910:	85 c0                	test   %eax,%eax
+c0108912:	75 24                	jne    c0108938 <basic_check+0x26f>
+c0108914:	c7 44 24 0c b7 e4 10 	movl   $0xc010e4b7,0xc(%esp)
+c010891b:	c0 
+c010891c:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108923:	c0 
+c0108924:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
+c010892b:	00 
+c010892c:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108933:	e8 cd 7a ff ff       	call   c0100405 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0108938:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c010893d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    nr_free = 0;
+c0108940:	c7 05 cc 71 1b c0 00 	movl   $0x0,0xc01b71cc
+c0108947:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c010894a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108951:	e8 85 b0 ff ff       	call   c01039db <alloc_pages>
+c0108956:	85 c0                	test   %eax,%eax
+c0108958:	74 24                	je     c010897e <basic_check+0x2b5>
+c010895a:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c0108961:	c0 
+c0108962:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108969:	c0 
+c010896a:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
+c0108971:	00 
+c0108972:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108979:	e8 87 7a ff ff       	call   c0100405 <__panic>
+
+    free_page(p0);
+c010897e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108985:	00 
+c0108986:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108989:	89 04 24             	mov    %eax,(%esp)
+c010898c:	e8 b5 b0 ff ff       	call   c0103a46 <free_pages>
+    free_page(p1);
+c0108991:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108998:	00 
+c0108999:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010899c:	89 04 24             	mov    %eax,(%esp)
+c010899f:	e8 a2 b0 ff ff       	call   c0103a46 <free_pages>
+    free_page(p2);
+c01089a4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01089ab:	00 
+c01089ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089af:	89 04 24             	mov    %eax,(%esp)
+c01089b2:	e8 8f b0 ff ff       	call   c0103a46 <free_pages>
+    assert(nr_free == 3);
+c01089b7:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c01089bc:	83 f8 03             	cmp    $0x3,%eax
+c01089bf:	74 24                	je     c01089e5 <basic_check+0x31c>
+c01089c1:	c7 44 24 0c e3 e4 10 	movl   $0xc010e4e3,0xc(%esp)
+c01089c8:	c0 
+c01089c9:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c01089d0:	c0 
+c01089d1:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
+c01089d8:	00 
+c01089d9:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c01089e0:	e8 20 7a ff ff       	call   c0100405 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c01089e5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01089ec:	e8 ea af ff ff       	call   c01039db <alloc_pages>
+c01089f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01089f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01089f8:	75 24                	jne    c0108a1e <basic_check+0x355>
+c01089fa:	c7 44 24 0c a9 e3 10 	movl   $0xc010e3a9,0xc(%esp)
+c0108a01:	c0 
+c0108a02:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108a09:	c0 
+c0108a0a:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
+c0108a11:	00 
+c0108a12:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108a19:	e8 e7 79 ff ff       	call   c0100405 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0108a1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108a25:	e8 b1 af ff ff       	call   c01039db <alloc_pages>
+c0108a2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108a2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108a31:	75 24                	jne    c0108a57 <basic_check+0x38e>
+c0108a33:	c7 44 24 0c c5 e3 10 	movl   $0xc010e3c5,0xc(%esp)
+c0108a3a:	c0 
+c0108a3b:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108a42:	c0 
+c0108a43:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
+c0108a4a:	00 
+c0108a4b:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108a52:	e8 ae 79 ff ff       	call   c0100405 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0108a57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108a5e:	e8 78 af ff ff       	call   c01039db <alloc_pages>
+c0108a63:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108a66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108a6a:	75 24                	jne    c0108a90 <basic_check+0x3c7>
+c0108a6c:	c7 44 24 0c e1 e3 10 	movl   $0xc010e3e1,0xc(%esp)
+c0108a73:	c0 
+c0108a74:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108a7b:	c0 
+c0108a7c:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
+c0108a83:	00 
+c0108a84:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108a8b:	e8 75 79 ff ff       	call   c0100405 <__panic>
+
+    assert(alloc_page() == NULL);
+c0108a90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108a97:	e8 3f af ff ff       	call   c01039db <alloc_pages>
+c0108a9c:	85 c0                	test   %eax,%eax
+c0108a9e:	74 24                	je     c0108ac4 <basic_check+0x3fb>
+c0108aa0:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c0108aa7:	c0 
+c0108aa8:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108aaf:	c0 
+c0108ab0:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
+c0108ab7:	00 
+c0108ab8:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108abf:	e8 41 79 ff ff       	call   c0100405 <__panic>
+
+    free_page(p0);
+c0108ac4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108acb:	00 
+c0108acc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108acf:	89 04 24             	mov    %eax,(%esp)
+c0108ad2:	e8 6f af ff ff       	call   c0103a46 <free_pages>
+c0108ad7:	c7 45 d8 c4 71 1b c0 	movl   $0xc01b71c4,-0x28(%ebp)
+c0108ade:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108ae1:	8b 40 04             	mov    0x4(%eax),%eax
+c0108ae4:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0108ae7:	0f 94 c0             	sete   %al
+c0108aea:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0108aed:	85 c0                	test   %eax,%eax
+c0108aef:	74 24                	je     c0108b15 <basic_check+0x44c>
+c0108af1:	c7 44 24 0c f0 e4 10 	movl   $0xc010e4f0,0xc(%esp)
+c0108af8:	c0 
+c0108af9:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108b00:	c0 
+c0108b01:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
+c0108b08:	00 
+c0108b09:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108b10:	e8 f0 78 ff ff       	call   c0100405 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c0108b15:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108b1c:	e8 ba ae ff ff       	call   c01039db <alloc_pages>
+c0108b21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108b24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108b27:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108b2a:	74 24                	je     c0108b50 <basic_check+0x487>
+c0108b2c:	c7 44 24 0c 08 e5 10 	movl   $0xc010e508,0xc(%esp)
+c0108b33:	c0 
+c0108b34:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108b3b:	c0 
+c0108b3c:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
+c0108b43:	00 
+c0108b44:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108b4b:	e8 b5 78 ff ff       	call   c0100405 <__panic>
+    assert(alloc_page() == NULL);
+c0108b50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108b57:	e8 7f ae ff ff       	call   c01039db <alloc_pages>
+c0108b5c:	85 c0                	test   %eax,%eax
+c0108b5e:	74 24                	je     c0108b84 <basic_check+0x4bb>
+c0108b60:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c0108b67:	c0 
+c0108b68:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108b6f:	c0 
+c0108b70:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
+c0108b77:	00 
+c0108b78:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108b7f:	e8 81 78 ff ff       	call   c0100405 <__panic>
+
+    assert(nr_free == 0);
+c0108b84:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c0108b89:	85 c0                	test   %eax,%eax
+c0108b8b:	74 24                	je     c0108bb1 <basic_check+0x4e8>
+c0108b8d:	c7 44 24 0c 21 e5 10 	movl   $0xc010e521,0xc(%esp)
+c0108b94:	c0 
+c0108b95:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108b9c:	c0 
+c0108b9d:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
+c0108ba4:	00 
+c0108ba5:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108bac:	e8 54 78 ff ff       	call   c0100405 <__panic>
+    free_list = free_list_store;
+c0108bb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108bb4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108bb7:	a3 c4 71 1b c0       	mov    %eax,0xc01b71c4
+c0108bbc:	89 15 c8 71 1b c0    	mov    %edx,0xc01b71c8
+    nr_free = nr_free_store;
+c0108bc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108bc5:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+
+    free_page(p);
+c0108bca:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108bd1:	00 
+c0108bd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108bd5:	89 04 24             	mov    %eax,(%esp)
+c0108bd8:	e8 69 ae ff ff       	call   c0103a46 <free_pages>
+    free_page(p1);
+c0108bdd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108be4:	00 
+c0108be5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108be8:	89 04 24             	mov    %eax,(%esp)
+c0108beb:	e8 56 ae ff ff       	call   c0103a46 <free_pages>
+    free_page(p2);
+c0108bf0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108bf7:	00 
+c0108bf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108bfb:	89 04 24             	mov    %eax,(%esp)
+c0108bfe:	e8 43 ae ff ff       	call   c0103a46 <free_pages>
+}
+c0108c03:	90                   	nop
+c0108c04:	c9                   	leave  
+c0108c05:	c3                   	ret    
+
+c0108c06 <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1)
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void)
+{
+c0108c06:	55                   	push   %ebp
+c0108c07:	89 e5                	mov    %esp,%ebp
+c0108c09:	81 ec 98 00 00 00    	sub    $0x98,%esp
+    int count = 0, total = 0;
+c0108c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108c16:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c0108c1d:	c7 45 ec c4 71 1b c0 	movl   $0xc01b71c4,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list)
+c0108c24:	eb 6a                	jmp    c0108c90 <default_check+0x8a>
+    {
+        struct Page *p = le2page(le, page_link);
+c0108c26:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108c29:	83 e8 0c             	sub    $0xc,%eax
+c0108c2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        assert(PageProperty(p));
+c0108c2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108c32:	83 c0 04             	add    $0x4,%eax
+c0108c35:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
+c0108c3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108c3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0108c42:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0108c45:	0f a3 10             	bt     %edx,(%eax)
+c0108c48:	19 c0                	sbb    %eax,%eax
+c0108c4a:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    return oldbit != 0;
+c0108c4d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0108c51:	0f 95 c0             	setne  %al
+c0108c54:	0f b6 c0             	movzbl %al,%eax
+c0108c57:	85 c0                	test   %eax,%eax
+c0108c59:	75 24                	jne    c0108c7f <default_check+0x79>
+c0108c5b:	c7 44 24 0c 2e e5 10 	movl   $0xc010e52e,0xc(%esp)
+c0108c62:	c0 
+c0108c63:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108c6a:	c0 
+c0108c6b:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
+c0108c72:	00 
+c0108c73:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108c7a:	e8 86 77 ff ff       	call   c0100405 <__panic>
+        count++, total += p->property;
+c0108c7f:	ff 45 f4             	incl   -0xc(%ebp)
+c0108c82:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0108c85:	8b 50 08             	mov    0x8(%eax),%edx
+c0108c88:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108c8b:	01 d0                	add    %edx,%eax
+c0108c8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108c93:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return listelm->next;
+c0108c96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0108c99:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != &free_list)
+c0108c9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108c9f:	81 7d ec c4 71 1b c0 	cmpl   $0xc01b71c4,-0x14(%ebp)
+c0108ca6:	0f 85 7a ff ff ff    	jne    c0108c26 <default_check+0x20>
+    }
+    assert(total == nr_free_pages());
+c0108cac:	e8 c8 ad ff ff       	call   c0103a79 <nr_free_pages>
+c0108cb1:	89 c2                	mov    %eax,%edx
+c0108cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108cb6:	39 c2                	cmp    %eax,%edx
+c0108cb8:	74 24                	je     c0108cde <default_check+0xd8>
+c0108cba:	c7 44 24 0c 3e e5 10 	movl   $0xc010e53e,0xc(%esp)
+c0108cc1:	c0 
+c0108cc2:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108cc9:	c0 
+c0108cca:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
+c0108cd1:	00 
+c0108cd2:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108cd9:	e8 27 77 ff ff       	call   c0100405 <__panic>
+
+    basic_check();
+c0108cde:	e8 e6 f9 ff ff       	call   c01086c9 <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c0108ce3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c0108cea:	e8 ec ac ff ff       	call   c01039db <alloc_pages>
+c0108cef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(p0 != NULL);
+c0108cf2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0108cf6:	75 24                	jne    c0108d1c <default_check+0x116>
+c0108cf8:	c7 44 24 0c 57 e5 10 	movl   $0xc010e557,0xc(%esp)
+c0108cff:	c0 
+c0108d00:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108d07:	c0 
+c0108d08:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
+c0108d0f:	00 
+c0108d10:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108d17:	e8 e9 76 ff ff       	call   c0100405 <__panic>
+    assert(!PageProperty(p0));
+c0108d1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108d1f:	83 c0 04             	add    $0x4,%eax
+c0108d22:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+c0108d29:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108d2c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0108d2f:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0108d32:	0f a3 10             	bt     %edx,(%eax)
+c0108d35:	19 c0                	sbb    %eax,%eax
+c0108d37:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    return oldbit != 0;
+c0108d3a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0108d3e:	0f 95 c0             	setne  %al
+c0108d41:	0f b6 c0             	movzbl %al,%eax
+c0108d44:	85 c0                	test   %eax,%eax
+c0108d46:	74 24                	je     c0108d6c <default_check+0x166>
+c0108d48:	c7 44 24 0c 62 e5 10 	movl   $0xc010e562,0xc(%esp)
+c0108d4f:	c0 
+c0108d50:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108d57:	c0 
+c0108d58:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
+c0108d5f:	00 
+c0108d60:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108d67:	e8 99 76 ff ff       	call   c0100405 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0108d6c:	a1 c4 71 1b c0       	mov    0xc01b71c4,%eax
+c0108d71:	8b 15 c8 71 1b c0    	mov    0xc01b71c8,%edx
+c0108d77:	89 45 80             	mov    %eax,-0x80(%ebp)
+c0108d7a:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c0108d7d:	c7 45 b0 c4 71 1b c0 	movl   $0xc01b71c4,-0x50(%ebp)
+    elm->prev = elm->next = elm;
+c0108d84:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0108d87:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0108d8a:	89 50 04             	mov    %edx,0x4(%eax)
+c0108d8d:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0108d90:	8b 50 04             	mov    0x4(%eax),%edx
+c0108d93:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0108d96:	89 10                	mov    %edx,(%eax)
+c0108d98:	c7 45 b4 c4 71 1b c0 	movl   $0xc01b71c4,-0x4c(%ebp)
+    return list->next == list;
+c0108d9f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0108da2:	8b 40 04             	mov    0x4(%eax),%eax
+c0108da5:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
+c0108da8:	0f 94 c0             	sete   %al
+c0108dab:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0108dae:	85 c0                	test   %eax,%eax
+c0108db0:	75 24                	jne    c0108dd6 <default_check+0x1d0>
+c0108db2:	c7 44 24 0c b7 e4 10 	movl   $0xc010e4b7,0xc(%esp)
+c0108db9:	c0 
+c0108dba:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108dc1:	c0 
+c0108dc2:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
+c0108dc9:	00 
+c0108dca:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108dd1:	e8 2f 76 ff ff       	call   c0100405 <__panic>
+    assert(alloc_page() == NULL);
+c0108dd6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108ddd:	e8 f9 ab ff ff       	call   c01039db <alloc_pages>
+c0108de2:	85 c0                	test   %eax,%eax
+c0108de4:	74 24                	je     c0108e0a <default_check+0x204>
+c0108de6:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c0108ded:	c0 
+c0108dee:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108df5:	c0 
+c0108df6:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
+c0108dfd:	00 
+c0108dfe:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108e05:	e8 fb 75 ff ff       	call   c0100405 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0108e0a:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c0108e0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    nr_free = 0;
+c0108e12:	c7 05 cc 71 1b c0 00 	movl   $0x0,0xc01b71cc
+c0108e19:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c0108e1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e1f:	83 c0 40             	add    $0x40,%eax
+c0108e22:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c0108e29:	00 
+c0108e2a:	89 04 24             	mov    %eax,(%esp)
+c0108e2d:	e8 14 ac ff ff       	call   c0103a46 <free_pages>
+    assert(alloc_pages(4) == NULL);
+c0108e32:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+c0108e39:	e8 9d ab ff ff       	call   c01039db <alloc_pages>
+c0108e3e:	85 c0                	test   %eax,%eax
+c0108e40:	74 24                	je     c0108e66 <default_check+0x260>
+c0108e42:	c7 44 24 0c 74 e5 10 	movl   $0xc010e574,0xc(%esp)
+c0108e49:	c0 
+c0108e4a:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108e51:	c0 
+c0108e52:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
+c0108e59:	00 
+c0108e5a:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108e61:	e8 9f 75 ff ff       	call   c0100405 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c0108e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e69:	83 c0 40             	add    $0x40,%eax
+c0108e6c:	83 c0 04             	add    $0x4,%eax
+c0108e6f:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
+c0108e76:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108e79:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0108e7c:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0108e7f:	0f a3 10             	bt     %edx,(%eax)
+c0108e82:	19 c0                	sbb    %eax,%eax
+c0108e84:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    return oldbit != 0;
+c0108e87:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
+c0108e8b:	0f 95 c0             	setne  %al
+c0108e8e:	0f b6 c0             	movzbl %al,%eax
+c0108e91:	85 c0                	test   %eax,%eax
+c0108e93:	74 0e                	je     c0108ea3 <default_check+0x29d>
+c0108e95:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e98:	83 c0 40             	add    $0x40,%eax
+c0108e9b:	8b 40 08             	mov    0x8(%eax),%eax
+c0108e9e:	83 f8 03             	cmp    $0x3,%eax
+c0108ea1:	74 24                	je     c0108ec7 <default_check+0x2c1>
+c0108ea3:	c7 44 24 0c 8c e5 10 	movl   $0xc010e58c,0xc(%esp)
+c0108eaa:	c0 
+c0108eab:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108eb2:	c0 
+c0108eb3:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
+c0108eba:	00 
+c0108ebb:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108ec2:	e8 3e 75 ff ff       	call   c0100405 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c0108ec7:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+c0108ece:	e8 08 ab ff ff       	call   c01039db <alloc_pages>
+c0108ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0108ed6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0108eda:	75 24                	jne    c0108f00 <default_check+0x2fa>
+c0108edc:	c7 44 24 0c b8 e5 10 	movl   $0xc010e5b8,0xc(%esp)
+c0108ee3:	c0 
+c0108ee4:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108eeb:	c0 
+c0108eec:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
+c0108ef3:	00 
+c0108ef4:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108efb:	e8 05 75 ff ff       	call   c0100405 <__panic>
+    assert(alloc_page() == NULL);
+c0108f00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0108f07:	e8 cf aa ff ff       	call   c01039db <alloc_pages>
+c0108f0c:	85 c0                	test   %eax,%eax
+c0108f0e:	74 24                	je     c0108f34 <default_check+0x32e>
+c0108f10:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c0108f17:	c0 
+c0108f18:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108f1f:	c0 
+c0108f20:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
+c0108f27:	00 
+c0108f28:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108f2f:	e8 d1 74 ff ff       	call   c0100405 <__panic>
+    assert(p0 + 2 == p1);
+c0108f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f37:	83 c0 40             	add    $0x40,%eax
+c0108f3a:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c0108f3d:	74 24                	je     c0108f63 <default_check+0x35d>
+c0108f3f:	c7 44 24 0c d6 e5 10 	movl   $0xc010e5d6,0xc(%esp)
+c0108f46:	c0 
+c0108f47:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108f4e:	c0 
+c0108f4f:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
+c0108f56:	00 
+c0108f57:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108f5e:	e8 a2 74 ff ff       	call   c0100405 <__panic>
+
+    p2 = p0 + 1;
+c0108f63:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f66:	83 c0 20             	add    $0x20,%eax
+c0108f69:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    free_page(p0);
+c0108f6c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0108f73:	00 
+c0108f74:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f77:	89 04 24             	mov    %eax,(%esp)
+c0108f7a:	e8 c7 aa ff ff       	call   c0103a46 <free_pages>
+    free_pages(p1, 3);
+c0108f7f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+c0108f86:	00 
+c0108f87:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108f8a:	89 04 24             	mov    %eax,(%esp)
+c0108f8d:	e8 b4 aa ff ff       	call   c0103a46 <free_pages>
+    assert(PageProperty(p0) && p0->property == 1);
+c0108f92:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108f95:	83 c0 04             	add    $0x4,%eax
+c0108f98:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
+c0108f9f:	89 45 9c             	mov    %eax,-0x64(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108fa2:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0108fa5:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0108fa8:	0f a3 10             	bt     %edx,(%eax)
+c0108fab:	19 c0                	sbb    %eax,%eax
+c0108fad:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c0108fb0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c0108fb4:	0f 95 c0             	setne  %al
+c0108fb7:	0f b6 c0             	movzbl %al,%eax
+c0108fba:	85 c0                	test   %eax,%eax
+c0108fbc:	74 0b                	je     c0108fc9 <default_check+0x3c3>
+c0108fbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108fc1:	8b 40 08             	mov    0x8(%eax),%eax
+c0108fc4:	83 f8 01             	cmp    $0x1,%eax
+c0108fc7:	74 24                	je     c0108fed <default_check+0x3e7>
+c0108fc9:	c7 44 24 0c e4 e5 10 	movl   $0xc010e5e4,0xc(%esp)
+c0108fd0:	c0 
+c0108fd1:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0108fd8:	c0 
+c0108fd9:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
+c0108fe0:	00 
+c0108fe1:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0108fe8:	e8 18 74 ff ff       	call   c0100405 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c0108fed:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108ff0:	83 c0 04             	add    $0x4,%eax
+c0108ff3:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
+c0108ffa:	89 45 90             	mov    %eax,-0x70(%ebp)
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108ffd:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0109000:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c0109003:	0f a3 10             	bt     %edx,(%eax)
+c0109006:	19 c0                	sbb    %eax,%eax
+c0109008:	89 45 8c             	mov    %eax,-0x74(%ebp)
+    return oldbit != 0;
+c010900b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
+c010900f:	0f 95 c0             	setne  %al
+c0109012:	0f b6 c0             	movzbl %al,%eax
+c0109015:	85 c0                	test   %eax,%eax
+c0109017:	74 0b                	je     c0109024 <default_check+0x41e>
+c0109019:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010901c:	8b 40 08             	mov    0x8(%eax),%eax
+c010901f:	83 f8 03             	cmp    $0x3,%eax
+c0109022:	74 24                	je     c0109048 <default_check+0x442>
+c0109024:	c7 44 24 0c 0c e6 10 	movl   $0xc010e60c,0xc(%esp)
+c010902b:	c0 
+c010902c:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109033:	c0 
+c0109034:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
+c010903b:	00 
+c010903c:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109043:	e8 bd 73 ff ff       	call   c0100405 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c0109048:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010904f:	e8 87 a9 ff ff       	call   c01039db <alloc_pages>
+c0109054:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109057:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010905a:	83 e8 20             	sub    $0x20,%eax
+c010905d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0109060:	74 24                	je     c0109086 <default_check+0x480>
+c0109062:	c7 44 24 0c 32 e6 10 	movl   $0xc010e632,0xc(%esp)
+c0109069:	c0 
+c010906a:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109071:	c0 
+c0109072:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
+c0109079:	00 
+c010907a:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109081:	e8 7f 73 ff ff       	call   c0100405 <__panic>
+    free_page(p0);
+c0109086:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c010908d:	00 
+c010908e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109091:	89 04 24             	mov    %eax,(%esp)
+c0109094:	e8 ad a9 ff ff       	call   c0103a46 <free_pages>
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c0109099:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c01090a0:	e8 36 a9 ff ff       	call   c01039db <alloc_pages>
+c01090a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01090a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01090ab:	83 c0 20             	add    $0x20,%eax
+c01090ae:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c01090b1:	74 24                	je     c01090d7 <default_check+0x4d1>
+c01090b3:	c7 44 24 0c 50 e6 10 	movl   $0xc010e650,0xc(%esp)
+c01090ba:	c0 
+c01090bb:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c01090c2:	c0 
+c01090c3:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
+c01090ca:	00 
+c01090cb:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c01090d2:	e8 2e 73 ff ff       	call   c0100405 <__panic>
+
+    free_pages(p0, 2);
+c01090d7:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c01090de:	00 
+c01090df:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01090e2:	89 04 24             	mov    %eax,(%esp)
+c01090e5:	e8 5c a9 ff ff       	call   c0103a46 <free_pages>
+    free_page(p2);
+c01090ea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c01090f1:	00 
+c01090f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01090f5:	89 04 24             	mov    %eax,(%esp)
+c01090f8:	e8 49 a9 ff ff       	call   c0103a46 <free_pages>
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c01090fd:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+c0109104:	e8 d2 a8 ff ff       	call   c01039db <alloc_pages>
+c0109109:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010910c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0109110:	75 24                	jne    c0109136 <default_check+0x530>
+c0109112:	c7 44 24 0c 70 e6 10 	movl   $0xc010e670,0xc(%esp)
+c0109119:	c0 
+c010911a:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109121:	c0 
+c0109122:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
+c0109129:	00 
+c010912a:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109131:	e8 cf 72 ff ff       	call   c0100405 <__panic>
+    assert(alloc_page() == NULL);
+c0109136:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010913d:	e8 99 a8 ff ff       	call   c01039db <alloc_pages>
+c0109142:	85 c0                	test   %eax,%eax
+c0109144:	74 24                	je     c010916a <default_check+0x564>
+c0109146:	c7 44 24 0c ce e4 10 	movl   $0xc010e4ce,0xc(%esp)
+c010914d:	c0 
+c010914e:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109155:	c0 
+c0109156:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
+c010915d:	00 
+c010915e:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109165:	e8 9b 72 ff ff       	call   c0100405 <__panic>
+
+    assert(nr_free == 0);
+c010916a:	a1 cc 71 1b c0       	mov    0xc01b71cc,%eax
+c010916f:	85 c0                	test   %eax,%eax
+c0109171:	74 24                	je     c0109197 <default_check+0x591>
+c0109173:	c7 44 24 0c 21 e5 10 	movl   $0xc010e521,0xc(%esp)
+c010917a:	c0 
+c010917b:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109182:	c0 
+c0109183:	c7 44 24 04 38 01 00 	movl   $0x138,0x4(%esp)
+c010918a:	00 
+c010918b:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109192:	e8 6e 72 ff ff       	call   c0100405 <__panic>
+    nr_free = nr_free_store;
+c0109197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010919a:	a3 cc 71 1b c0       	mov    %eax,0xc01b71cc
+
+    free_list = free_list_store;
+c010919f:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01091a2:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01091a5:	a3 c4 71 1b c0       	mov    %eax,0xc01b71c4
+c01091aa:	89 15 c8 71 1b c0    	mov    %edx,0xc01b71c8
+    free_pages(p0, 5);
+c01091b0:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+c01091b7:	00 
+c01091b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01091bb:	89 04 24             	mov    %eax,(%esp)
+c01091be:	e8 83 a8 ff ff       	call   c0103a46 <free_pages>
+
+    le = &free_list;
+c01091c3:	c7 45 ec c4 71 1b c0 	movl   $0xc01b71c4,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list)
+c01091ca:	eb 1c                	jmp    c01091e8 <default_check+0x5e2>
+    {
+        struct Page *p = le2page(le, page_link);
+c01091cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01091cf:	83 e8 0c             	sub    $0xc,%eax
+c01091d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        count--, total -= p->property;
+c01091d5:	ff 4d f4             	decl   -0xc(%ebp)
+c01091d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01091db:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01091de:	8b 40 08             	mov    0x8(%eax),%eax
+c01091e1:	29 c2                	sub    %eax,%edx
+c01091e3:	89 d0                	mov    %edx,%eax
+c01091e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01091e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01091eb:	89 45 88             	mov    %eax,-0x78(%ebp)
+    return listelm->next;
+c01091ee:	8b 45 88             	mov    -0x78(%ebp),%eax
+c01091f1:	8b 40 04             	mov    0x4(%eax),%eax
+    while ((le = list_next(le)) != &free_list)
+c01091f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01091f7:	81 7d ec c4 71 1b c0 	cmpl   $0xc01b71c4,-0x14(%ebp)
+c01091fe:	75 cc                	jne    c01091cc <default_check+0x5c6>
+    }
+    assert(count == 0);
+c0109200:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109204:	74 24                	je     c010922a <default_check+0x624>
+c0109206:	c7 44 24 0c 8e e6 10 	movl   $0xc010e68e,0xc(%esp)
+c010920d:	c0 
+c010920e:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c0109215:	c0 
+c0109216:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
+c010921d:	00 
+c010921e:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c0109225:	e8 db 71 ff ff       	call   c0100405 <__panic>
+    assert(total == 0);
+c010922a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010922e:	74 24                	je     c0109254 <default_check+0x64e>
+c0109230:	c7 44 24 0c 99 e6 10 	movl   $0xc010e699,0xc(%esp)
+c0109237:	c0 
+c0109238:	c7 44 24 08 46 e3 10 	movl   $0xc010e346,0x8(%esp)
+c010923f:	c0 
+c0109240:	c7 44 24 04 45 01 00 	movl   $0x145,0x4(%esp)
+c0109247:	00 
+c0109248:	c7 04 24 5b e3 10 c0 	movl   $0xc010e35b,(%esp)
+c010924f:	e8 b1 71 ff ff       	call   c0100405 <__panic>
+}
+c0109254:	90                   	nop
+c0109255:	c9                   	leave  
+c0109256:	c3                   	ret    
+
+c0109257 <page2ppn>:
+page2ppn(struct Page *page) {
+c0109257:	55                   	push   %ebp
+c0109258:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010925a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010925d:	8b 15 d8 70 1b c0    	mov    0xc01b70d8,%edx
+c0109263:	29 d0                	sub    %edx,%eax
+c0109265:	c1 f8 05             	sar    $0x5,%eax
+}
+c0109268:	5d                   	pop    %ebp
+c0109269:	c3                   	ret    
+
+c010926a <page2pa>:
+page2pa(struct Page *page) {
+c010926a:	55                   	push   %ebp
+c010926b:	89 e5                	mov    %esp,%ebp
+c010926d:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0109270:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109273:	89 04 24             	mov    %eax,(%esp)
+c0109276:	e8 dc ff ff ff       	call   c0109257 <page2ppn>
+c010927b:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010927e:	c9                   	leave  
+c010927f:	c3                   	ret    
+
+c0109280 <page2kva>:
+page2kva(struct Page *page) {
+c0109280:	55                   	push   %ebp
+c0109281:	89 e5                	mov    %esp,%ebp
+c0109283:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c0109286:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109289:	89 04 24             	mov    %eax,(%esp)
+c010928c:	e8 d9 ff ff ff       	call   c010926a <page2pa>
+c0109291:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109294:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109297:	c1 e8 0c             	shr    $0xc,%eax
+c010929a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010929d:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c01092a2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01092a5:	72 23                	jb     c01092ca <page2kva+0x4a>
+c01092a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01092aa:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01092ae:	c7 44 24 08 d4 e6 10 	movl   $0xc010e6d4,0x8(%esp)
+c01092b5:	c0 
+c01092b6:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01092bd:	00 
+c01092be:	c7 04 24 f7 e6 10 c0 	movl   $0xc010e6f7,(%esp)
+c01092c5:	e8 3b 71 ff ff       	call   c0100405 <__panic>
+c01092ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01092cd:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01092d2:	c9                   	leave  
+c01092d3:	c3                   	ret    
+
+c01092d4 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c01092d4:	55                   	push   %ebp
+c01092d5:	89 e5                	mov    %esp,%ebp
+c01092d7:	83 ec 18             	sub    $0x18,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c01092da:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01092e1:	e8 1c 7f ff ff       	call   c0101202 <ide_device_valid>
+c01092e6:	85 c0                	test   %eax,%eax
+c01092e8:	75 1c                	jne    c0109306 <swapfs_init+0x32>
+        panic("swap fs isn't available.\n");
+c01092ea:	c7 44 24 08 05 e7 10 	movl   $0xc010e705,0x8(%esp)
+c01092f1:	c0 
+c01092f2:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
+c01092f9:	00 
+c01092fa:	c7 04 24 1f e7 10 c0 	movl   $0xc010e71f,(%esp)
+c0109301:	e8 ff 70 ff ff       	call   c0100405 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c0109306:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c010930d:	e8 2e 7f ff ff       	call   c0101240 <ide_device_size>
+c0109312:	c1 e8 03             	shr    $0x3,%eax
+c0109315:	a3 9c 71 1b c0       	mov    %eax,0xc01b719c
+}
+c010931a:	90                   	nop
+c010931b:	c9                   	leave  
+c010931c:	c3                   	ret    
+
+c010931d <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c010931d:	55                   	push   %ebp
+c010931e:	89 e5                	mov    %esp,%ebp
+c0109320:	83 ec 28             	sub    $0x28,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109323:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109326:	89 04 24             	mov    %eax,(%esp)
+c0109329:	e8 52 ff ff ff       	call   c0109280 <page2kva>
+c010932e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109331:	c1 ea 08             	shr    $0x8,%edx
+c0109334:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0109337:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010933b:	74 0b                	je     c0109348 <swapfs_read+0x2b>
+c010933d:	8b 15 9c 71 1b c0    	mov    0xc01b719c,%edx
+c0109343:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c0109346:	72 23                	jb     c010936b <swapfs_read+0x4e>
+c0109348:	8b 45 08             	mov    0x8(%ebp),%eax
+c010934b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010934f:	c7 44 24 08 30 e7 10 	movl   $0xc010e730,0x8(%esp)
+c0109356:	c0 
+c0109357:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+c010935e:	00 
+c010935f:	c7 04 24 1f e7 10 c0 	movl   $0xc010e71f,(%esp)
+c0109366:	e8 9a 70 ff ff       	call   c0100405 <__panic>
+c010936b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010936e:	c1 e2 03             	shl    $0x3,%edx
+c0109371:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c0109378:	00 
+c0109379:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010937d:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109381:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109388:	e8 ee 7e ff ff       	call   c010127b <ide_read_secs>
+}
+c010938d:	c9                   	leave  
+c010938e:	c3                   	ret    
+
+c010938f <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c010938f:	55                   	push   %ebp
+c0109390:	89 e5                	mov    %esp,%ebp
+c0109392:	83 ec 28             	sub    $0x28,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0109395:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109398:	89 04 24             	mov    %eax,(%esp)
+c010939b:	e8 e0 fe ff ff       	call   c0109280 <page2kva>
+c01093a0:	8b 55 08             	mov    0x8(%ebp),%edx
+c01093a3:	c1 ea 08             	shr    $0x8,%edx
+c01093a6:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01093a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01093ad:	74 0b                	je     c01093ba <swapfs_write+0x2b>
+c01093af:	8b 15 9c 71 1b c0    	mov    0xc01b719c,%edx
+c01093b5:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+c01093b8:	72 23                	jb     c01093dd <swapfs_write+0x4e>
+c01093ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01093c1:	c7 44 24 08 30 e7 10 	movl   $0xc010e730,0x8(%esp)
+c01093c8:	c0 
+c01093c9:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
+c01093d0:	00 
+c01093d1:	c7 04 24 1f e7 10 c0 	movl   $0xc010e71f,(%esp)
+c01093d8:	e8 28 70 ff ff       	call   c0100405 <__panic>
+c01093dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01093e0:	c1 e2 03             	shl    $0x3,%edx
+c01093e3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
+c01093ea:	00 
+c01093eb:	89 44 24 08          	mov    %eax,0x8(%esp)
+c01093ef:	89 54 24 04          	mov    %edx,0x4(%esp)
+c01093f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c01093fa:	e8 b5 80 ff ff       	call   c01014b4 <ide_write_secs>
+}
+c01093ff:	c9                   	leave  
+c0109400:	c3                   	ret    
+
+c0109401 <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c0109401:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c0109405:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c0109407:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c010940a:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c010940d:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c0109410:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c0109413:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c0109416:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c0109419:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c010941c:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c0109420:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c0109423:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c0109426:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c0109429:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c010942c:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c010942f:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c0109432:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c0109435:	ff 30                	pushl  (%eax)
+
+    ret
+c0109437:	c3                   	ret    
+
+c0109438 <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c0109438:	52                   	push   %edx
+    call *%ebx              # call fn
+c0109439:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c010943b:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c010943c:	e8 05 0d 00 00       	call   c010a146 <do_exit>
+
+c0109441 <test_and_set_bit>:
+ * test_and_set_bit - Atomically set a bit and return its old value
+ * @nr:     the bit to set
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_set_bit(int nr, volatile void *addr) {
+c0109441:	55                   	push   %ebp
+c0109442:	89 e5                	mov    %esp,%ebp
+c0109444:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0109447:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010944a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010944d:	0f ab 02             	bts    %eax,(%edx)
+c0109450:	19 c0                	sbb    %eax,%eax
+c0109452:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0109455:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0109459:	0f 95 c0             	setne  %al
+c010945c:	0f b6 c0             	movzbl %al,%eax
+}
+c010945f:	c9                   	leave  
+c0109460:	c3                   	ret    
+
+c0109461 <test_and_clear_bit>:
+ * test_and_clear_bit - Atomically clear a bit and return its old value
+ * @nr:     the bit to clear
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_clear_bit(int nr, volatile void *addr) {
+c0109461:	55                   	push   %ebp
+c0109462:	89 e5                	mov    %esp,%ebp
+c0109464:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0109467:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010946a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010946d:	0f b3 02             	btr    %eax,(%edx)
+c0109470:	19 c0                	sbb    %eax,%eax
+c0109472:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0109475:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0109479:	0f 95 c0             	setne  %al
+c010947c:	0f b6 c0             	movzbl %al,%eax
+}
+c010947f:	c9                   	leave  
+c0109480:	c3                   	ret    
+
+c0109481 <__intr_save>:
+__intr_save(void) {
+c0109481:	55                   	push   %ebp
+c0109482:	89 e5                	mov    %esp,%ebp
+c0109484:	83 ec 18             	sub    $0x18,%esp
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0109487:	9c                   	pushf  
+c0109488:	58                   	pop    %eax
+c0109489:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010948c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010948f:	25 00 02 00 00       	and    $0x200,%eax
+c0109494:	85 c0                	test   %eax,%eax
+c0109496:	74 0c                	je     c01094a4 <__intr_save+0x23>
+        intr_disable();
+c0109498:	e8 53 8d ff ff       	call   c01021f0 <intr_disable>
+        return 1;
+c010949d:	b8 01 00 00 00       	mov    $0x1,%eax
+c01094a2:	eb 05                	jmp    c01094a9 <__intr_save+0x28>
+    return 0;
+c01094a4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01094a9:	c9                   	leave  
+c01094aa:	c3                   	ret    
+
+c01094ab <__intr_restore>:
+__intr_restore(bool flag) {
+c01094ab:	55                   	push   %ebp
+c01094ac:	89 e5                	mov    %esp,%ebp
+c01094ae:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01094b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01094b5:	74 05                	je     c01094bc <__intr_restore+0x11>
+        intr_enable();
+c01094b7:	e8 2d 8d ff ff       	call   c01021e9 <intr_enable>
+}
+c01094bc:	90                   	nop
+c01094bd:	c9                   	leave  
+c01094be:	c3                   	ret    
+
+c01094bf <try_lock>:
+
+static inline bool
+try_lock(lock_t *lock) {
+c01094bf:	55                   	push   %ebp
+c01094c0:	89 e5                	mov    %esp,%ebp
+c01094c2:	83 ec 08             	sub    $0x8,%esp
+    return !test_and_set_bit(0, lock);
+c01094c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094c8:	89 44 24 04          	mov    %eax,0x4(%esp)
+c01094cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c01094d3:	e8 69 ff ff ff       	call   c0109441 <test_and_set_bit>
+c01094d8:	85 c0                	test   %eax,%eax
+c01094da:	0f 94 c0             	sete   %al
+c01094dd:	0f b6 c0             	movzbl %al,%eax
+}
+c01094e0:	c9                   	leave  
+c01094e1:	c3                   	ret    
+
+c01094e2 <lock>:
+
+static inline void
+lock(lock_t *lock) {
+c01094e2:	55                   	push   %ebp
+c01094e3:	89 e5                	mov    %esp,%ebp
+c01094e5:	83 ec 18             	sub    $0x18,%esp
+    while (!try_lock(lock)) {
+c01094e8:	eb 05                	jmp    c01094ef <lock+0xd>
+        schedule();
+c01094ea:	e8 e7 1d 00 00       	call   c010b2d6 <schedule>
+    while (!try_lock(lock)) {
+c01094ef:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094f2:	89 04 24             	mov    %eax,(%esp)
+c01094f5:	e8 c5 ff ff ff       	call   c01094bf <try_lock>
+c01094fa:	85 c0                	test   %eax,%eax
+c01094fc:	74 ec                	je     c01094ea <lock+0x8>
+    }
+}
+c01094fe:	90                   	nop
+c01094ff:	c9                   	leave  
+c0109500:	c3                   	ret    
+
+c0109501 <unlock>:
+
+static inline void
+unlock(lock_t *lock) {
+c0109501:	55                   	push   %ebp
+c0109502:	89 e5                	mov    %esp,%ebp
+c0109504:	83 ec 18             	sub    $0x18,%esp
+    if (!test_and_clear_bit(0, lock)) {
+c0109507:	8b 45 08             	mov    0x8(%ebp),%eax
+c010950a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010950e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c0109515:	e8 47 ff ff ff       	call   c0109461 <test_and_clear_bit>
+c010951a:	85 c0                	test   %eax,%eax
+c010951c:	75 1c                	jne    c010953a <unlock+0x39>
+        panic("Unlock failed.\n");
+c010951e:	c7 44 24 08 50 e7 10 	movl   $0xc010e750,0x8(%esp)
+c0109525:	c0 
+c0109526:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+c010952d:	00 
+c010952e:	c7 04 24 60 e7 10 c0 	movl   $0xc010e760,(%esp)
+c0109535:	e8 cb 6e ff ff       	call   c0100405 <__panic>
+    }
+}
+c010953a:	90                   	nop
+c010953b:	c9                   	leave  
+c010953c:	c3                   	ret    
+
+c010953d <page2ppn>:
+page2ppn(struct Page *page) {
+c010953d:	55                   	push   %ebp
+c010953e:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0109540:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109543:	8b 15 d8 70 1b c0    	mov    0xc01b70d8,%edx
+c0109549:	29 d0                	sub    %edx,%eax
+c010954b:	c1 f8 05             	sar    $0x5,%eax
+}
+c010954e:	5d                   	pop    %ebp
+c010954f:	c3                   	ret    
+
+c0109550 <page2pa>:
+page2pa(struct Page *page) {
+c0109550:	55                   	push   %ebp
+c0109551:	89 e5                	mov    %esp,%ebp
+c0109553:	83 ec 04             	sub    $0x4,%esp
+    return page2ppn(page) << PGSHIFT;
+c0109556:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109559:	89 04 24             	mov    %eax,(%esp)
+c010955c:	e8 dc ff ff ff       	call   c010953d <page2ppn>
+c0109561:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0109564:	c9                   	leave  
+c0109565:	c3                   	ret    
+
+c0109566 <pa2page>:
+pa2page(uintptr_t pa) {
+c0109566:	55                   	push   %ebp
+c0109567:	89 e5                	mov    %esp,%ebp
+c0109569:	83 ec 18             	sub    $0x18,%esp
+    if (PPN(pa) >= npage) {
+c010956c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010956f:	c1 e8 0c             	shr    $0xc,%eax
+c0109572:	89 c2                	mov    %eax,%edx
+c0109574:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c0109579:	39 c2                	cmp    %eax,%edx
+c010957b:	72 1c                	jb     c0109599 <pa2page+0x33>
+        panic("pa2page called with invalid pa");
+c010957d:	c7 44 24 08 74 e7 10 	movl   $0xc010e774,0x8(%esp)
+c0109584:	c0 
+c0109585:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
+c010958c:	00 
+c010958d:	c7 04 24 93 e7 10 c0 	movl   $0xc010e793,(%esp)
+c0109594:	e8 6c 6e ff ff       	call   c0100405 <__panic>
+    return &pages[PPN(pa)];
+c0109599:	a1 d8 70 1b c0       	mov    0xc01b70d8,%eax
+c010959e:	8b 55 08             	mov    0x8(%ebp),%edx
+c01095a1:	c1 ea 0c             	shr    $0xc,%edx
+c01095a4:	c1 e2 05             	shl    $0x5,%edx
+c01095a7:	01 d0                	add    %edx,%eax
+}
+c01095a9:	c9                   	leave  
+c01095aa:	c3                   	ret    
+
+c01095ab <page2kva>:
+page2kva(struct Page *page) {
+c01095ab:	55                   	push   %ebp
+c01095ac:	89 e5                	mov    %esp,%ebp
+c01095ae:	83 ec 28             	sub    $0x28,%esp
+    return KADDR(page2pa(page));
+c01095b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095b4:	89 04 24             	mov    %eax,(%esp)
+c01095b7:	e8 94 ff ff ff       	call   c0109550 <page2pa>
+c01095bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01095bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095c2:	c1 e8 0c             	shr    $0xc,%eax
+c01095c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01095c8:	a1 80 4f 1b c0       	mov    0xc01b4f80,%eax
+c01095cd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01095d0:	72 23                	jb     c01095f5 <page2kva+0x4a>
+c01095d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c01095d9:	c7 44 24 08 a4 e7 10 	movl   $0xc010e7a4,0x8(%esp)
+c01095e0:	c0 
+c01095e1:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
+c01095e8:	00 
+c01095e9:	c7 04 24 93 e7 10 c0 	movl   $0xc010e793,(%esp)
+c01095f0:	e8 10 6e ff ff       	call   c0100405 <__panic>
+c01095f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01095f8:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01095fd:	c9                   	leave  
+c01095fe:	c3                   	ret    
+
+c01095ff <kva2page>:
+kva2page(void *kva) {
+c01095ff:	55                   	push   %ebp
+c0109600:	89 e5                	mov    %esp,%ebp
+c0109602:	83 ec 28             	sub    $0x28,%esp
+    return pa2page(PADDR(kva));
+c0109605:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109608:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010960b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0109612:	77 23                	ja     c0109637 <kva2page+0x38>
+c0109614:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109617:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010961b:	c7 44 24 08 c8 e7 10 	movl   $0xc010e7c8,0x8(%esp)
+c0109622:	c0 
+c0109623:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
+c010962a:	00 
+c010962b:	c7 04 24 93 e7 10 c0 	movl   $0xc010e793,(%esp)
+c0109632:	e8 ce 6d ff ff       	call   c0100405 <__panic>
+c0109637:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010963a:	05 00 00 00 40       	add    $0x40000000,%eax
+c010963f:	89 04 24             	mov    %eax,(%esp)
+c0109642:	e8 1f ff ff ff       	call   c0109566 <pa2page>
+}
+c0109647:	c9                   	leave  
+c0109648:	c3                   	ret    
+
+c0109649 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c0109649:	55                   	push   %ebp
+c010964a:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c010964c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010964f:	8b 40 18             	mov    0x18(%eax),%eax
+c0109652:	8d 50 01             	lea    0x1(%eax),%edx
+c0109655:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109658:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c010965b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010965e:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0109661:	5d                   	pop    %ebp
+c0109662:	c3                   	ret    
+
+c0109663 <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c0109663:	55                   	push   %ebp
+c0109664:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c0109666:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109669:	8b 40 18             	mov    0x18(%eax),%eax
+c010966c:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010966f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109672:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109675:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109678:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c010967b:	5d                   	pop    %ebp
+c010967c:	c3                   	ret    
+
+c010967d <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c010967d:	55                   	push   %ebp
+c010967e:	89 e5                	mov    %esp,%ebp
+c0109680:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c0109683:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109687:	74 0e                	je     c0109697 <lock_mm+0x1a>
+        lock(&(mm->mm_lock));
+c0109689:	8b 45 08             	mov    0x8(%ebp),%eax
+c010968c:	83 c0 1c             	add    $0x1c,%eax
+c010968f:	89 04 24             	mov    %eax,(%esp)
+c0109692:	e8 4b fe ff ff       	call   c01094e2 <lock>
+    }
+}
+c0109697:	90                   	nop
+c0109698:	c9                   	leave  
+c0109699:	c3                   	ret    
+
+c010969a <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c010969a:	55                   	push   %ebp
+c010969b:	89 e5                	mov    %esp,%ebp
+c010969d:	83 ec 18             	sub    $0x18,%esp
+    if (mm != NULL) {
+c01096a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01096a4:	74 0e                	je     c01096b4 <unlock_mm+0x1a>
+        unlock(&(mm->mm_lock));
+c01096a6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096a9:	83 c0 1c             	add    $0x1c,%eax
+c01096ac:	89 04 24             	mov    %eax,(%esp)
+c01096af:	e8 4d fe ff ff       	call   c0109501 <unlock>
+    }
+}
+c01096b4:	90                   	nop
+c01096b5:	c9                   	leave  
+c01096b6:	c3                   	ret    
+
+c01096b7 <alloc_proc>:
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void)
+{
+c01096b7:	55                   	push   %ebp
+c01096b8:	89 e5                	mov    %esp,%ebp
+c01096ba:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c01096bd:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
+c01096c4:	e8 2c dc ff ff       	call   c01072f5 <kmalloc>
+c01096c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (proc != NULL)
+c01096cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01096d0:	0f 84 48 01 00 00    	je     c010981e <alloc_proc+0x167>
+     *       struct trapframe *tf;                       // Trap frame for current interrupt
+     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+     *       uint32_t flags;                             // Process flag
+     *       char name[PROC_NAME_LEN + 1];               // Process name
+     */
+        proc->state = PROC_UNINIT;
+c01096d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        proc->pid = -1;
+c01096df:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096e2:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+        proc->runs = 0;
+c01096e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096ec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        proc->kstack = 0;
+c01096f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        proc->need_resched = 0;
+c01096fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109700:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        proc->parent = NULL;
+c0109707:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010970a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        proc->mm = NULL;
+c0109711:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109714:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+        memset(&(proc->context), 0, sizeof(struct context));
+c010971b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010971e:	83 c0 1c             	add    $0x1c,%eax
+c0109721:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
+c0109728:	00 
+c0109729:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109730:	00 
+c0109731:	89 04 24             	mov    %eax,(%esp)
+c0109734:	e8 02 27 00 00       	call   c010be3b <memset>
+        proc->tf = NULL;
+c0109739:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010973c:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+        proc->cr3 = boot_cr3;
+c0109743:	8b 15 d4 70 1b c0    	mov    0xc01b70d4,%edx
+c0109749:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010974c:	89 50 40             	mov    %edx,0x40(%eax)
+        proc->flags = 0;
+c010974f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109752:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+        memset(proc->name, 0, PROC_NAME_LEN);
+c0109759:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010975c:	83 c0 48             	add    $0x48,%eax
+c010975f:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c0109766:	00 
+c0109767:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010976e:	00 
+c010976f:	89 04 24             	mov    %eax,(%esp)
+c0109772:	e8 c4 26 00 00       	call   c010be3b <memset>
+        /*
+     * below fields(add in LAB5) in proc_struct need to be initialized	
+     *       uint32_t wait_state;                        // waiting state
+     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+	 */
+        proc->wait_state = 0;
+c0109777:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010977a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+        proc->cptr = NULL;
+c0109781:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109784:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
+        proc->optr = NULL;
+c010978b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010978e:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
+        proc->yptr = NULL;
+c0109795:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109798:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+     *     int time_slice;                             // time slice for occupying the CPU
+     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+     */
+        proc->rq = NULL;
+c010979f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097a2:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
+        list_init(&(proc->run_link));
+c01097a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097ac:	83 e8 80             	sub    $0xffffff80,%eax
+c01097af:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    elm->prev = elm->next = elm;
+c01097b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01097b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01097b8:	89 50 04             	mov    %edx,0x4(%eax)
+c01097bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01097be:	8b 50 04             	mov    0x4(%eax),%edx
+c01097c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01097c4:	89 10                	mov    %edx,(%eax)
+        proc->time_slice = 0;
+c01097c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097c9:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
+c01097d0:	00 00 00 
+        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+c01097d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097d6:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
+c01097dd:	00 00 00 
+c01097e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097e3:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+c01097e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097ec:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+c01097f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097f5:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c01097fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01097fe:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
+        proc->lab6_priority = 0;
+c0109804:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109807:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
+c010980e:	00 00 00 
+        proc->lab6_stride = 0;
+c0109811:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109814:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c010981b:	00 00 00 
+    }
+    return proc;
+c010981e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0109821:	c9                   	leave  
+c0109822:	c3                   	ret    
+
+c0109823 <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name)
+{
+c0109823:	55                   	push   %ebp
+c0109824:	89 e5                	mov    %esp,%ebp
+c0109826:	83 ec 18             	sub    $0x18,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c0109829:	8b 45 08             	mov    0x8(%ebp),%eax
+c010982c:	83 c0 48             	add    $0x48,%eax
+c010982f:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c0109836:	00 
+c0109837:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010983e:	00 
+c010983f:	89 04 24             	mov    %eax,(%esp)
+c0109842:	e8 f4 25 00 00       	call   c010be3b <memset>
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c0109847:	8b 45 08             	mov    0x8(%ebp),%eax
+c010984a:	8d 50 48             	lea    0x48(%eax),%edx
+c010984d:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c0109854:	00 
+c0109855:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109858:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010985c:	89 14 24             	mov    %edx,(%esp)
+c010985f:	e8 ba 26 00 00       	call   c010bf1e <memcpy>
+}
+c0109864:	c9                   	leave  
+c0109865:	c3                   	ret    
+
+c0109866 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc)
+{
+c0109866:	55                   	push   %ebp
+c0109867:	89 e5                	mov    %esp,%ebp
+c0109869:	83 ec 18             	sub    $0x18,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c010986c:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c0109873:	00 
+c0109874:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010987b:	00 
+c010987c:	c7 04 24 44 70 1b c0 	movl   $0xc01b7044,(%esp)
+c0109883:	e8 b3 25 00 00       	call   c010be3b <memset>
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c0109888:	8b 45 08             	mov    0x8(%ebp),%eax
+c010988b:	83 c0 48             	add    $0x48,%eax
+c010988e:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
+c0109895:	00 
+c0109896:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010989a:	c7 04 24 44 70 1b c0 	movl   $0xc01b7044,(%esp)
+c01098a1:	e8 78 26 00 00       	call   c010bf1e <memcpy>
+}
+c01098a6:	c9                   	leave  
+c01098a7:	c3                   	ret    
+
+c01098a8 <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc)
+{
+c01098a8:	55                   	push   %ebp
+c01098a9:	89 e5                	mov    %esp,%ebp
+c01098ab:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c01098ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098b1:	83 c0 58             	add    $0x58,%eax
+c01098b4:	c7 45 fc d0 71 1b c0 	movl   $0xc01b71d0,-0x4(%ebp)
+c01098bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01098be:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01098c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01098c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01098c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    __list_add(elm, listelm, listelm->next);
+c01098ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098cd:	8b 40 04             	mov    0x4(%eax),%eax
+c01098d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01098d3:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c01098d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01098d9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c01098dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    prev->next = next->prev = elm;
+c01098df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01098e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01098e5:	89 10                	mov    %edx,(%eax)
+c01098e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01098ea:	8b 10                	mov    (%eax),%edx
+c01098ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01098ef:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c01098f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01098f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01098f8:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c01098fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01098fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109901:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c0109903:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109906:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+    if ((proc->optr = proc->parent->cptr) != NULL)
+c010990d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109910:	8b 40 14             	mov    0x14(%eax),%eax
+c0109913:	8b 50 70             	mov    0x70(%eax),%edx
+c0109916:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109919:	89 50 78             	mov    %edx,0x78(%eax)
+c010991c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010991f:	8b 40 78             	mov    0x78(%eax),%eax
+c0109922:	85 c0                	test   %eax,%eax
+c0109924:	74 0c                	je     c0109932 <set_links+0x8a>
+    {
+        proc->optr->yptr = proc;
+c0109926:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109929:	8b 40 78             	mov    0x78(%eax),%eax
+c010992c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010992f:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    proc->parent->cptr = proc;
+c0109932:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109935:	8b 40 14             	mov    0x14(%eax),%eax
+c0109938:	8b 55 08             	mov    0x8(%ebp),%edx
+c010993b:	89 50 70             	mov    %edx,0x70(%eax)
+    nr_process++;
+c010993e:	a1 40 70 1b c0       	mov    0xc01b7040,%eax
+c0109943:	40                   	inc    %eax
+c0109944:	a3 40 70 1b c0       	mov    %eax,0xc01b7040
+}
+c0109949:	90                   	nop
+c010994a:	c9                   	leave  
+c010994b:	c3                   	ret    
+
+c010994c <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc)
+{
+c010994c:	55                   	push   %ebp
+c010994d:	89 e5                	mov    %esp,%ebp
+c010994f:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c0109952:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109955:	83 c0 58             	add    $0x58,%eax
+c0109958:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c010995b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010995e:	8b 40 04             	mov    0x4(%eax),%eax
+c0109961:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109964:	8b 12                	mov    (%edx),%edx
+c0109966:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0109969:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    prev->next = next;
+c010996c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010996f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109972:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109975:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109978:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010997b:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL)
+c010997d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109980:	8b 40 78             	mov    0x78(%eax),%eax
+c0109983:	85 c0                	test   %eax,%eax
+c0109985:	74 0f                	je     c0109996 <remove_links+0x4a>
+    {
+        proc->optr->yptr = proc->yptr;
+c0109987:	8b 45 08             	mov    0x8(%ebp),%eax
+c010998a:	8b 40 78             	mov    0x78(%eax),%eax
+c010998d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109990:	8b 52 74             	mov    0x74(%edx),%edx
+c0109993:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    if (proc->yptr != NULL)
+c0109996:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109999:	8b 40 74             	mov    0x74(%eax),%eax
+c010999c:	85 c0                	test   %eax,%eax
+c010999e:	74 11                	je     c01099b1 <remove_links+0x65>
+    {
+        proc->yptr->optr = proc->optr;
+c01099a0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099a3:	8b 40 74             	mov    0x74(%eax),%eax
+c01099a6:	8b 55 08             	mov    0x8(%ebp),%edx
+c01099a9:	8b 52 78             	mov    0x78(%edx),%edx
+c01099ac:	89 50 78             	mov    %edx,0x78(%eax)
+c01099af:	eb 0f                	jmp    c01099c0 <remove_links+0x74>
+    }
+    else
+    {
+        proc->parent->cptr = proc->optr;
+c01099b1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099b4:	8b 40 14             	mov    0x14(%eax),%eax
+c01099b7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01099ba:	8b 52 78             	mov    0x78(%edx),%edx
+c01099bd:	89 50 70             	mov    %edx,0x70(%eax)
+    }
+    nr_process--;
+c01099c0:	a1 40 70 1b c0       	mov    0xc01b7040,%eax
+c01099c5:	48                   	dec    %eax
+c01099c6:	a3 40 70 1b c0       	mov    %eax,0xc01b7040
+}
+c01099cb:	90                   	nop
+c01099cc:	c9                   	leave  
+c01099cd:	c3                   	ret    
+
+c01099ce <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void)
+{
+c01099ce:	55                   	push   %ebp
+c01099cf:	89 e5                	mov    %esp,%ebp
+c01099d1:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c01099d4:	c7 45 f8 d0 71 1b c0 	movl   $0xc01b71d0,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++last_pid >= MAX_PID)
+c01099db:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c01099e0:	40                   	inc    %eax
+c01099e1:	a3 6c ea 12 c0       	mov    %eax,0xc012ea6c
+c01099e6:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c01099eb:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c01099f0:	7e 0c                	jle    c01099fe <get_pid+0x30>
+    {
+        last_pid = 1;
+c01099f2:	c7 05 6c ea 12 c0 01 	movl   $0x1,0xc012ea6c
+c01099f9:	00 00 00 
+        goto inside;
+c01099fc:	eb 14                	jmp    c0109a12 <get_pid+0x44>
+    }
+    if (last_pid >= next_safe)
+c01099fe:	8b 15 6c ea 12 c0    	mov    0xc012ea6c,%edx
+c0109a04:	a1 70 ea 12 c0       	mov    0xc012ea70,%eax
+c0109a09:	39 c2                	cmp    %eax,%edx
+c0109a0b:	0f 8c ab 00 00 00    	jl     c0109abc <get_pid+0xee>
+    {
+    inside:
+c0109a11:	90                   	nop
+        next_safe = MAX_PID;
+c0109a12:	c7 05 70 ea 12 c0 00 	movl   $0x2000,0xc012ea70
+c0109a19:	20 00 00 
+    repeat:
+        le = list;
+c0109a1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109a1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list)
+c0109a22:	eb 7d                	jmp    c0109aa1 <get_pid+0xd3>
+        {
+            proc = le2proc(le, list_link);
+c0109a24:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109a27:	83 e8 58             	sub    $0x58,%eax
+c0109a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid)
+c0109a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a30:	8b 50 04             	mov    0x4(%eax),%edx
+c0109a33:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c0109a38:	39 c2                	cmp    %eax,%edx
+c0109a3a:	75 3c                	jne    c0109a78 <get_pid+0xaa>
+            {
+                if (++last_pid >= next_safe)
+c0109a3c:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c0109a41:	40                   	inc    %eax
+c0109a42:	a3 6c ea 12 c0       	mov    %eax,0xc012ea6c
+c0109a47:	8b 15 6c ea 12 c0    	mov    0xc012ea6c,%edx
+c0109a4d:	a1 70 ea 12 c0       	mov    0xc012ea70,%eax
+c0109a52:	39 c2                	cmp    %eax,%edx
+c0109a54:	7c 4b                	jl     c0109aa1 <get_pid+0xd3>
+                {
+                    if (last_pid >= MAX_PID)
+c0109a56:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c0109a5b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0109a60:	7e 0a                	jle    c0109a6c <get_pid+0x9e>
+                    {
+                        last_pid = 1;
+c0109a62:	c7 05 6c ea 12 c0 01 	movl   $0x1,0xc012ea6c
+c0109a69:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c0109a6c:	c7 05 70 ea 12 c0 00 	movl   $0x2000,0xc012ea70
+c0109a73:	20 00 00 
+                    goto repeat;
+c0109a76:	eb a4                	jmp    c0109a1c <get_pid+0x4e>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid)
+c0109a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a7b:	8b 50 04             	mov    0x4(%eax),%edx
+c0109a7e:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+c0109a83:	39 c2                	cmp    %eax,%edx
+c0109a85:	7e 1a                	jle    c0109aa1 <get_pid+0xd3>
+c0109a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a8a:	8b 50 04             	mov    0x4(%eax),%edx
+c0109a8d:	a1 70 ea 12 c0       	mov    0xc012ea70,%eax
+c0109a92:	39 c2                	cmp    %eax,%edx
+c0109a94:	7d 0b                	jge    c0109aa1 <get_pid+0xd3>
+            {
+                next_safe = proc->pid;
+c0109a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a99:	8b 40 04             	mov    0x4(%eax),%eax
+c0109a9c:	a3 70 ea 12 c0       	mov    %eax,0xc012ea70
+c0109aa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109aa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return listelm->next;
+c0109aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109aaa:	8b 40 04             	mov    0x4(%eax),%eax
+        while ((le = list_next(le)) != list)
+c0109aad:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0109ab0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109ab3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0109ab6:	0f 85 68 ff ff ff    	jne    c0109a24 <get_pid+0x56>
+            }
+        }
+    }
+    return last_pid;
+c0109abc:	a1 6c ea 12 c0       	mov    0xc012ea6c,%eax
+}
+c0109ac1:	c9                   	leave  
+c0109ac2:	c3                   	ret    
+
+c0109ac3 <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void proc_run(struct proc_struct *proc)
+{
+c0109ac3:	55                   	push   %ebp
+c0109ac4:	89 e5                	mov    %esp,%ebp
+c0109ac6:	83 ec 28             	sub    $0x28,%esp
+    if (proc != current)
+c0109ac9:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0109ace:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0109ad1:	74 63                	je     c0109b36 <proc_run+0x73>
+    {
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c0109ad3:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0109ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109adb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ade:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c0109ae1:	e8 9b f9 ff ff       	call   c0109481 <__intr_save>
+c0109ae6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c0109ae9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109aec:	a3 28 50 1b c0       	mov    %eax,0xc01b5028
+            load_esp0(next->kstack + KSTACKSIZE);
+c0109af1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109af4:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109af7:	05 00 20 00 00       	add    $0x2000,%eax
+c0109afc:	89 04 24             	mov    %eax,(%esp)
+c0109aff:	e8 8c 9d ff ff       	call   c0103890 <load_esp0>
+            lcr3(next->cr3);
+c0109b04:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b07:	8b 40 40             	mov    0x40(%eax),%eax
+c0109b0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0109b0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109b10:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c0109b13:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b16:	8d 50 1c             	lea    0x1c(%eax),%edx
+c0109b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b1c:	83 c0 1c             	add    $0x1c,%eax
+c0109b1f:	89 54 24 04          	mov    %edx,0x4(%esp)
+c0109b23:	89 04 24             	mov    %eax,(%esp)
+c0109b26:	e8 d6 f8 ff ff       	call   c0109401 <switch_to>
+        }
+        local_intr_restore(intr_flag);
+c0109b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109b2e:	89 04 24             	mov    %eax,(%esp)
+c0109b31:	e8 75 f9 ff ff       	call   c01094ab <__intr_restore>
+    }
+}
+c0109b36:	90                   	nop
+c0109b37:	c9                   	leave  
+c0109b38:	c3                   	ret    
+
+c0109b39 <forkret>:
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void)
+{
+c0109b39:	55                   	push   %ebp
+c0109b3a:	89 e5                	mov    %esp,%ebp
+c0109b3c:	83 ec 18             	sub    $0x18,%esp
+    forkrets(current->tf);
+c0109b3f:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0109b44:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109b47:	89 04 24             	mov    %eax,(%esp)
+c0109b4a:	e8 69 9b ff ff       	call   c01036b8 <forkrets>
+}
+c0109b4f:	90                   	nop
+c0109b50:	c9                   	leave  
+c0109b51:	c3                   	ret    
+
+c0109b52 <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc)
+{
+c0109b52:	55                   	push   %ebp
+c0109b53:	89 e5                	mov    %esp,%ebp
+c0109b55:	53                   	push   %ebx
+c0109b56:	83 ec 34             	sub    $0x34,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c0109b59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b5c:	8d 58 60             	lea    0x60(%eax),%ebx
+c0109b5f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b62:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b65:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c0109b6c:	00 
+c0109b6d:	89 04 24             	mov    %eax,(%esp)
+c0109b70:	e8 c0 2a 00 00       	call   c010c635 <hash32>
+c0109b75:	c1 e0 03             	shl    $0x3,%eax
+c0109b78:	05 40 50 1b c0       	add    $0xc01b5040,%eax
+c0109b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109b80:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c0109b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b86:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109b89:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109b8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    __list_add(elm, listelm, listelm->next);
+c0109b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109b92:	8b 40 04             	mov    0x4(%eax),%eax
+c0109b95:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109b98:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0109b9b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109b9e:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0109ba1:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    prev->next = next->prev = elm;
+c0109ba4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109ba7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109baa:	89 10                	mov    %edx,(%eax)
+c0109bac:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109baf:	8b 10                	mov    (%eax),%edx
+c0109bb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109bb4:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109bb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109bba:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0109bbd:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109bc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109bc3:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109bc6:	89 10                	mov    %edx,(%eax)
+}
+c0109bc8:	90                   	nop
+c0109bc9:	83 c4 34             	add    $0x34,%esp
+c0109bcc:	5b                   	pop    %ebx
+c0109bcd:	5d                   	pop    %ebp
+c0109bce:	c3                   	ret    
+
+c0109bcf <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc)
+{
+c0109bcf:	55                   	push   %ebp
+c0109bd0:	89 e5                	mov    %esp,%ebp
+c0109bd2:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c0109bd5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109bd8:	83 c0 60             	add    $0x60,%eax
+c0109bdb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c0109bde:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109be1:	8b 40 04             	mov    0x4(%eax),%eax
+c0109be4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109be7:	8b 12                	mov    (%edx),%edx
+c0109be9:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0109bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    prev->next = next;
+c0109bef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109bf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109bf5:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109bf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bfb:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0109bfe:	89 10                	mov    %edx,(%eax)
+}
+c0109c00:	90                   	nop
+c0109c01:	c9                   	leave  
+c0109c02:	c3                   	ret    
+
+c0109c03 <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid)
+{
+c0109c03:	55                   	push   %ebp
+c0109c04:	89 e5                	mov    %esp,%ebp
+c0109c06:	83 ec 28             	sub    $0x28,%esp
+    if (0 < pid && pid < MAX_PID)
+c0109c09:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109c0d:	7e 5f                	jle    c0109c6e <find_proc+0x6b>
+c0109c0f:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c0109c16:	7f 56                	jg     c0109c6e <find_proc+0x6b>
+    {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109c1b:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
+c0109c22:	00 
+c0109c23:	89 04 24             	mov    %eax,(%esp)
+c0109c26:	e8 0a 2a 00 00       	call   c010c635 <hash32>
+c0109c2b:	c1 e0 03             	shl    $0x3,%eax
+c0109c2e:	05 40 50 1b c0       	add    $0xc01b5040,%eax
+c0109c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109c36:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109c39:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list)
+c0109c3c:	eb 19                	jmp    c0109c57 <find_proc+0x54>
+        {
+            struct proc_struct *proc = le2proc(le, hash_link);
+c0109c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c41:	83 e8 60             	sub    $0x60,%eax
+c0109c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid)
+c0109c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109c4a:	8b 40 04             	mov    0x4(%eax),%eax
+c0109c4d:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0109c50:	75 05                	jne    c0109c57 <find_proc+0x54>
+            {
+                return proc;
+c0109c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109c55:	eb 1c                	jmp    c0109c73 <find_proc+0x70>
+c0109c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return listelm->next;
+c0109c5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109c60:	8b 40 04             	mov    0x4(%eax),%eax
+        while ((le = list_next(le)) != list)
+c0109c63:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c69:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0109c6c:	75 d0                	jne    c0109c3e <find_proc+0x3b>
+            }
+        }
+    }
+    return NULL;
+c0109c6e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109c73:	c9                   	leave  
+c0109c74:	c3                   	ret    
+
+c0109c75 <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to
+//       proc->tf in do_fork-->copy_thread function
+int kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags)
+{
+c0109c75:	55                   	push   %ebp
+c0109c76:	89 e5                	mov    %esp,%ebp
+c0109c78:	83 ec 68             	sub    $0x68,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c0109c7b:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c0109c82:	00 
+c0109c83:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109c8a:	00 
+c0109c8b:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109c8e:	89 04 24             	mov    %eax,(%esp)
+c0109c91:	e8 a5 21 00 00       	call   c010be3b <memset>
+    tf.tf_cs = KERNEL_CS;
+c0109c96:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c0109c9c:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c0109ca2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0109ca6:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c0109caa:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c0109cae:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c0109cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109cb5:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c0109cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109cbb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c0109cbe:	b8 38 94 10 c0       	mov    $0xc0109438,%eax
+c0109cc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c0109cc6:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109cc9:	0d 00 01 00 00       	or     $0x100,%eax
+c0109cce:	89 c2                	mov    %eax,%edx
+c0109cd0:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109cd3:	89 44 24 08          	mov    %eax,0x8(%esp)
+c0109cd7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c0109cde:	00 
+c0109cdf:	89 14 24             	mov    %edx,(%esp)
+c0109ce2:	e8 38 03 00 00       	call   c010a01f <do_fork>
+}
+c0109ce7:	c9                   	leave  
+c0109ce8:	c3                   	ret    
+
+c0109ce9 <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc)
+{
+c0109ce9:	55                   	push   %ebp
+c0109cea:	89 e5                	mov    %esp,%ebp
+c0109cec:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c0109cef:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+c0109cf6:	e8 e0 9c ff ff       	call   c01039db <alloc_pages>
+c0109cfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL)
+c0109cfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109d02:	74 1a                	je     c0109d1e <setup_kstack+0x35>
+    {
+        proc->kstack = (uintptr_t)page2kva(page);
+c0109d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d07:	89 04 24             	mov    %eax,(%esp)
+c0109d0a:	e8 9c f8 ff ff       	call   c01095ab <page2kva>
+c0109d0f:	89 c2                	mov    %eax,%edx
+c0109d11:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d14:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c0109d17:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109d1c:	eb 05                	jmp    c0109d23 <setup_kstack+0x3a>
+    }
+    return -E_NO_MEM;
+c0109d1e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c0109d23:	c9                   	leave  
+c0109d24:	c3                   	ret    
+
+c0109d25 <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc)
+{
+c0109d25:	55                   	push   %ebp
+c0109d26:	89 e5                	mov    %esp,%ebp
+c0109d28:	83 ec 18             	sub    $0x18,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c0109d2b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d2e:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109d31:	89 04 24             	mov    %eax,(%esp)
+c0109d34:	e8 c6 f8 ff ff       	call   c01095ff <kva2page>
+c0109d39:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+c0109d40:	00 
+c0109d41:	89 04 24             	mov    %eax,(%esp)
+c0109d44:	e8 fd 9c ff ff       	call   c0103a46 <free_pages>
+}
+c0109d49:	90                   	nop
+c0109d4a:	c9                   	leave  
+c0109d4b:	c3                   	ret    
+
+c0109d4c <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm)
+{
+c0109d4c:	55                   	push   %ebp
+c0109d4d:	89 e5                	mov    %esp,%ebp
+c0109d4f:	83 ec 28             	sub    $0x28,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL)
+c0109d52:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+c0109d59:	e8 7d 9c ff ff       	call   c01039db <alloc_pages>
+c0109d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109d61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109d65:	75 0a                	jne    c0109d71 <setup_pgdir+0x25>
+    {
+        return -E_NO_MEM;
+c0109d67:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0109d6c:	e9 80 00 00 00       	jmp    c0109df1 <setup_pgdir+0xa5>
+    }
+    pde_t *pgdir = page2kva(page);
+c0109d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d74:	89 04 24             	mov    %eax,(%esp)
+c0109d77:	e8 2f f8 ff ff       	call   c01095ab <page2kva>
+c0109d7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c0109d7f:	a1 e0 e9 12 c0       	mov    0xc012e9e0,%eax
+c0109d84:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+c0109d8b:	00 
+c0109d8c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109d93:	89 04 24             	mov    %eax,(%esp)
+c0109d96:	e8 83 21 00 00       	call   c010bf1e <memcpy>
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c0109d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109d9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109da1:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c0109da8:	77 23                	ja     c0109dcd <setup_pgdir+0x81>
+c0109daa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dad:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109db1:	c7 44 24 08 c8 e7 10 	movl   $0xc010e7c8,0x8(%esp)
+c0109db8:	c0 
+c0109db9:	c7 44 24 04 6a 01 00 	movl   $0x16a,0x4(%esp)
+c0109dc0:	00 
+c0109dc1:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c0109dc8:	e8 38 66 ff ff       	call   c0100405 <__panic>
+c0109dcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dd0:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c0109dd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109dd9:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0109dde:	83 ca 03             	or     $0x3,%edx
+c0109de1:	89 10                	mov    %edx,(%eax)
+    mm->pgdir = pgdir;
+c0109de3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109de6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109de9:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c0109dec:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109df1:	c9                   	leave  
+c0109df2:	c3                   	ret    
+
+c0109df3 <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm)
+{
+c0109df3:	55                   	push   %ebp
+c0109df4:	89 e5                	mov    %esp,%ebp
+c0109df6:	83 ec 18             	sub    $0x18,%esp
+    free_page(kva2page(mm->pgdir));
+c0109df9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109dfc:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109dff:	89 04 24             	mov    %eax,(%esp)
+c0109e02:	e8 f8 f7 ff ff       	call   c01095ff <kva2page>
+c0109e07:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+c0109e0e:	00 
+c0109e0f:	89 04 24             	mov    %eax,(%esp)
+c0109e12:	e8 2f 9c ff ff       	call   c0103a46 <free_pages>
+}
+c0109e17:	90                   	nop
+c0109e18:	c9                   	leave  
+c0109e19:	c3                   	ret    
+
+c0109e1a <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc)
+{
+c0109e1a:	55                   	push   %ebp
+c0109e1b:	89 e5                	mov    %esp,%ebp
+c0109e1d:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c0109e20:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c0109e25:	8b 40 18             	mov    0x18(%eax),%eax
+c0109e28:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL)
+c0109e2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0109e2f:	75 0a                	jne    c0109e3b <copy_mm+0x21>
+    {
+        return 0;
+c0109e31:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109e36:	e9 fc 00 00 00       	jmp    c0109f37 <copy_mm+0x11d>
+    }
+    if (clone_flags & CLONE_VM)
+c0109e3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e3e:	25 00 01 00 00       	and    $0x100,%eax
+c0109e43:	85 c0                	test   %eax,%eax
+c0109e45:	74 08                	je     c0109e4f <copy_mm+0x35>
+    {
+        mm = oldmm;
+c0109e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c0109e4d:	eb 5e                	jmp    c0109ead <copy_mm+0x93>
+    }
+
+    int ret = -E_NO_MEM;
+c0109e4f:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL)
+c0109e56:	e8 bb bc ff ff       	call   c0105b16 <mm_create>
+c0109e5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109e5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109e62:	0f 84 cb 00 00 00    	je     c0109f33 <copy_mm+0x119>
+    {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0)
+c0109e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e6b:	89 04 24             	mov    %eax,(%esp)
+c0109e6e:	e8 d9 fe ff ff       	call   c0109d4c <setup_pgdir>
+c0109e73:	85 c0                	test   %eax,%eax
+c0109e75:	0f 85 aa 00 00 00    	jne    c0109f25 <copy_mm+0x10b>
+    {
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+c0109e7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e7e:	89 04 24             	mov    %eax,(%esp)
+c0109e81:	e8 f7 f7 ff ff       	call   c010967d <lock_mm>
+    {
+        ret = dup_mmap(mm, oldmm);
+c0109e86:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e89:	89 44 24 04          	mov    %eax,0x4(%esp)
+c0109e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e90:	89 04 24             	mov    %eax,(%esp)
+c0109e93:	e8 95 c1 ff ff       	call   c010602d <dup_mmap>
+c0109e98:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c0109e9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109e9e:	89 04 24             	mov    %eax,(%esp)
+c0109ea1:	e8 f4 f7 ff ff       	call   c010969a <unlock_mm>
+
+    if (ret != 0)
+c0109ea6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109eaa:	75 60                	jne    c0109f0c <copy_mm+0xf2>
+    {
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+c0109eac:	90                   	nop
+    mm_count_inc(mm);
+c0109ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109eb0:	89 04 24             	mov    %eax,(%esp)
+c0109eb3:	e8 91 f7 ff ff       	call   c0109649 <mm_count_inc>
+    proc->mm = mm;
+c0109eb8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109ebb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109ebe:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c0109ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ec4:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109ec7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109eca:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c0109ed1:	77 23                	ja     c0109ef6 <copy_mm+0xdc>
+c0109ed3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109ed6:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c0109eda:	c7 44 24 08 c8 e7 10 	movl   $0xc010e7c8,0x8(%esp)
+c0109ee1:	c0 
+c0109ee2:	c7 44 24 04 a0 01 00 	movl   $0x1a0,0x4(%esp)
+c0109ee9:	00 
+c0109eea:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c0109ef1:	e8 0f 65 ff ff       	call   c0100405 <__panic>
+c0109ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109ef9:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c0109eff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109f02:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c0109f05:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109f0a:	eb 2b                	jmp    c0109f37 <copy_mm+0x11d>
+        goto bad_dup_cleanup_mmap;
+c0109f0c:	90                   	nop
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c0109f0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f10:	89 04 24             	mov    %eax,(%esp)
+c0109f13:	e8 16 c2 ff ff       	call   c010612e <exit_mmap>
+    put_pgdir(mm);
+c0109f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f1b:	89 04 24             	mov    %eax,(%esp)
+c0109f1e:	e8 d0 fe ff ff       	call   c0109df3 <put_pgdir>
+c0109f23:	eb 01                	jmp    c0109f26 <copy_mm+0x10c>
+        goto bad_pgdir_cleanup_mm;
+c0109f25:	90                   	nop
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c0109f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f29:	89 04 24             	mov    %eax,(%esp)
+c0109f2c:	e8 41 bf ff ff       	call   c0105e72 <mm_destroy>
+c0109f31:	eb 01                	jmp    c0109f34 <copy_mm+0x11a>
+        goto bad_mm;
+c0109f33:	90                   	nop
+bad_mm:
+    return ret;
+c0109f34:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0109f37:	c9                   	leave  
+c0109f38:	c3                   	ret    
+
+c0109f39 <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)
+{
+c0109f39:	55                   	push   %ebp
+c0109f3a:	89 e5                	mov    %esp,%ebp
+c0109f3c:	57                   	push   %edi
+c0109f3d:	56                   	push   %esi
+c0109f3e:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c0109f3f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f42:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109f45:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c0109f4a:	89 c2                	mov    %eax,%edx
+c0109f4c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f4f:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c0109f52:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109f55:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109f58:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109f5b:	bb 4c 00 00 00       	mov    $0x4c,%ebx
+c0109f60:	89 c1                	mov    %eax,%ecx
+c0109f62:	83 e1 01             	and    $0x1,%ecx
+c0109f65:	85 c9                	test   %ecx,%ecx
+c0109f67:	74 0c                	je     c0109f75 <copy_thread+0x3c>
+c0109f69:	0f b6 0a             	movzbl (%edx),%ecx
+c0109f6c:	88 08                	mov    %cl,(%eax)
+c0109f6e:	8d 40 01             	lea    0x1(%eax),%eax
+c0109f71:	8d 52 01             	lea    0x1(%edx),%edx
+c0109f74:	4b                   	dec    %ebx
+c0109f75:	89 c1                	mov    %eax,%ecx
+c0109f77:	83 e1 02             	and    $0x2,%ecx
+c0109f7a:	85 c9                	test   %ecx,%ecx
+c0109f7c:	74 0f                	je     c0109f8d <copy_thread+0x54>
+c0109f7e:	0f b7 0a             	movzwl (%edx),%ecx
+c0109f81:	66 89 08             	mov    %cx,(%eax)
+c0109f84:	8d 40 02             	lea    0x2(%eax),%eax
+c0109f87:	8d 52 02             	lea    0x2(%edx),%edx
+c0109f8a:	83 eb 02             	sub    $0x2,%ebx
+c0109f8d:	89 df                	mov    %ebx,%edi
+c0109f8f:	83 e7 fc             	and    $0xfffffffc,%edi
+c0109f92:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0109f97:	8b 34 0a             	mov    (%edx,%ecx,1),%esi
+c0109f9a:	89 34 08             	mov    %esi,(%eax,%ecx,1)
+c0109f9d:	83 c1 04             	add    $0x4,%ecx
+c0109fa0:	39 f9                	cmp    %edi,%ecx
+c0109fa2:	72 f3                	jb     c0109f97 <copy_thread+0x5e>
+c0109fa4:	01 c8                	add    %ecx,%eax
+c0109fa6:	01 ca                	add    %ecx,%edx
+c0109fa8:	b9 00 00 00 00       	mov    $0x0,%ecx
+c0109fad:	89 de                	mov    %ebx,%esi
+c0109faf:	83 e6 02             	and    $0x2,%esi
+c0109fb2:	85 f6                	test   %esi,%esi
+c0109fb4:	74 0b                	je     c0109fc1 <copy_thread+0x88>
+c0109fb6:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
+c0109fba:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
+c0109fbe:	83 c1 02             	add    $0x2,%ecx
+c0109fc1:	83 e3 01             	and    $0x1,%ebx
+c0109fc4:	85 db                	test   %ebx,%ebx
+c0109fc6:	74 07                	je     c0109fcf <copy_thread+0x96>
+c0109fc8:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
+c0109fcc:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+    proc->tf->tf_regs.reg_eax = 0;
+c0109fcf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109fd2:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109fd5:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c0109fdc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109fdf:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109fe2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109fe5:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c0109fe8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109feb:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109fee:	8b 50 40             	mov    0x40(%eax),%edx
+c0109ff1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ff4:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109ff7:	81 ca 00 02 00 00    	or     $0x200,%edx
+c0109ffd:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c010a000:	ba 39 9b 10 c0       	mov    $0xc0109b39,%edx
+c010a005:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a008:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c010a00b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a00e:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a011:	89 c2                	mov    %eax,%edx
+c010a013:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a016:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c010a019:	90                   	nop
+c010a01a:	5b                   	pop    %ebx
+c010a01b:	5e                   	pop    %esi
+c010a01c:	5f                   	pop    %edi
+c010a01d:	5d                   	pop    %ebp
+c010a01e:	c3                   	ret    
+
+c010a01f <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf)
+{
+c010a01f:	55                   	push   %ebp
+c010a020:	89 e5                	mov    %esp,%ebp
+c010a022:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_NO_FREE_PROC;
+c010a025:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS)
+c010a02c:	a1 40 70 1b c0       	mov    0xc01b7040,%eax
+c010a031:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c010a036:	0f 8f e3 00 00 00    	jg     c010a11f <do_fork+0x100>
+    {
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+c010a03c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    //    3. call copy_mm to dup OR share mm according clone_flag
+    //    4. call copy_thread to setup tf & context in proc_struct
+    //    5. insert proc_struct into hash_list && proc_list
+    //    6. call wakeup_proc to make the new child process RUNNABLE
+    //    7. set ret vaule using child proc's pid
+    if ((proc = alloc_proc()) == NULL)
+c010a043:	e8 6f f6 ff ff       	call   c01096b7 <alloc_proc>
+c010a048:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a04b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a04f:	0f 84 cd 00 00 00    	je     c010a122 <do_fork+0x103>
+    {
+        goto fork_out;
+    }
+    proc->parent = current;
+c010a055:	8b 15 28 50 1b c0    	mov    0xc01b5028,%edx
+c010a05b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a05e:	89 50 14             	mov    %edx,0x14(%eax)
+    // *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+    assert(current->wait_state == 0);
+c010a061:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a066:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a069:	85 c0                	test   %eax,%eax
+c010a06b:	74 24                	je     c010a091 <do_fork+0x72>
+c010a06d:	c7 44 24 0c 00 e8 10 	movl   $0xc010e800,0xc(%esp)
+c010a074:	c0 
+c010a075:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a07c:	c0 
+c010a07d:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
+c010a084:	00 
+c010a085:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a08c:	e8 74 63 ff ff       	call   c0100405 <__panic>
+    if (setup_kstack(proc) != 0)
+c010a091:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a094:	89 04 24             	mov    %eax,(%esp)
+c010a097:	e8 4d fc ff ff       	call   c0109ce9 <setup_kstack>
+c010a09c:	85 c0                	test   %eax,%eax
+c010a09e:	0f 85 92 00 00 00    	jne    c010a136 <do_fork+0x117>
+    {
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0)
+c010a0a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0a7:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a0ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a0ae:	89 04 24             	mov    %eax,(%esp)
+c010a0b1:	e8 64 fd ff ff       	call   c0109e1a <copy_mm>
+c010a0b6:	85 c0                	test   %eax,%eax
+c010a0b8:	75 6e                	jne    c010a128 <do_fork+0x109>
+    {
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack, tf);
+c010a0ba:	8b 45 10             	mov    0x10(%ebp),%eax
+c010a0bd:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a0c1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a0c4:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a0c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0cb:	89 04 24             	mov    %eax,(%esp)
+c010a0ce:	e8 66 fe ff ff       	call   c0109f39 <copy_thread>
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010a0d3:	e8 a9 f3 ff ff       	call   c0109481 <__intr_save>
+c010a0d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    static int lock = 0;
+    // __Lock(lock);
+    {
+        proc->pid = get_pid();
+c010a0db:	e8 ee f8 ff ff       	call   c01099ce <get_pid>
+c010a0e0:	89 c2                	mov    %eax,%edx
+c010a0e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0e5:	89 50 04             	mov    %edx,0x4(%eax)
+        hash_proc(proc);
+c010a0e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0eb:	89 04 24             	mov    %eax,(%esp)
+c010a0ee:	e8 5f fa ff ff       	call   c0109b52 <hash_proc>
+        // *    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+        set_links(proc);
+c010a0f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0f6:	89 04 24             	mov    %eax,(%esp)
+c010a0f9:	e8 aa f7 ff ff       	call   c01098a8 <set_links>
+    }
+    // __UnLock(lock);
+    local_intr_restore(intr_flag);
+c010a0fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a101:	89 04 24             	mov    %eax,(%esp)
+c010a104:	e8 a2 f3 ff ff       	call   c01094ab <__intr_restore>
+    wakeup_proc(proc);
+c010a109:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a10c:	89 04 24             	mov    %eax,(%esp)
+c010a10f:	e8 28 11 00 00       	call   c010b23c <wakeup_proc>
+    ret = proc->pid;
+c010a114:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a117:	8b 40 04             	mov    0x4(%eax),%eax
+c010a11a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a11d:	eb 04                	jmp    c010a123 <do_fork+0x104>
+        goto fork_out;
+c010a11f:	90                   	nop
+c010a120:	eb 01                	jmp    c010a123 <do_fork+0x104>
+        goto fork_out;
+c010a122:	90                   	nop
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+    */
+
+fork_out:
+    return ret;
+c010a123:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a126:	eb 1c                	jmp    c010a144 <do_fork+0x125>
+        goto bad_fork_cleanup_kstack;
+c010a128:	90                   	nop
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c010a129:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a12c:	89 04 24             	mov    %eax,(%esp)
+c010a12f:	e8 f1 fb ff ff       	call   c0109d25 <put_kstack>
+c010a134:	eb 01                	jmp    c010a137 <do_fork+0x118>
+        goto bad_fork_cleanup_proc;
+c010a136:	90                   	nop
+bad_fork_cleanup_proc:
+    kfree(proc);
+c010a137:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a13a:	89 04 24             	mov    %eax,(%esp)
+c010a13d:	e8 ce d1 ff ff       	call   c0107310 <kfree>
+    goto fork_out;
+c010a142:	eb df                	jmp    c010a123 <do_fork+0x104>
+}
+c010a144:	c9                   	leave  
+c010a145:	c3                   	ret    
+
+c010a146 <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int do_exit(int error_code)
+{
+c010a146:	55                   	push   %ebp
+c010a147:	89 e5                	mov    %esp,%ebp
+c010a149:	83 ec 28             	sub    $0x28,%esp
+    if (current == idleproc)
+c010a14c:	8b 15 28 50 1b c0    	mov    0xc01b5028,%edx
+c010a152:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010a157:	39 c2                	cmp    %eax,%edx
+c010a159:	75 1c                	jne    c010a177 <do_exit+0x31>
+    {
+        panic("idleproc exit.\n");
+c010a15b:	c7 44 24 08 2e e8 10 	movl   $0xc010e82e,0x8(%esp)
+c010a162:	c0 
+c010a163:	c7 44 24 04 19 02 00 	movl   $0x219,0x4(%esp)
+c010a16a:	00 
+c010a16b:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a172:	e8 8e 62 ff ff       	call   c0100405 <__panic>
+    }
+    if (current == initproc)
+c010a177:	8b 15 28 50 1b c0    	mov    0xc01b5028,%edx
+c010a17d:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a182:	39 c2                	cmp    %eax,%edx
+c010a184:	75 1c                	jne    c010a1a2 <do_exit+0x5c>
+    {
+        panic("initproc exit.\n");
+c010a186:	c7 44 24 08 3e e8 10 	movl   $0xc010e83e,0x8(%esp)
+c010a18d:	c0 
+c010a18e:	c7 44 24 04 1d 02 00 	movl   $0x21d,0x4(%esp)
+c010a195:	00 
+c010a196:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a19d:	e8 63 62 ff ff       	call   c0100405 <__panic>
+    }
+
+    struct mm_struct *mm = current->mm;
+c010a1a2:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a1a7:	8b 40 18             	mov    0x18(%eax),%eax
+c010a1aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL)
+c010a1ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a1b1:	74 4a                	je     c010a1fd <do_exit+0xb7>
+    {
+        lcr3(boot_cr3);
+c010a1b3:	a1 d4 70 1b c0       	mov    0xc01b70d4,%eax
+c010a1b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010a1bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a1be:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0)
+c010a1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a1c4:	89 04 24             	mov    %eax,(%esp)
+c010a1c7:	e8 97 f4 ff ff       	call   c0109663 <mm_count_dec>
+c010a1cc:	85 c0                	test   %eax,%eax
+c010a1ce:	75 21                	jne    c010a1f1 <do_exit+0xab>
+        {
+            exit_mmap(mm);
+c010a1d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a1d3:	89 04 24             	mov    %eax,(%esp)
+c010a1d6:	e8 53 bf ff ff       	call   c010612e <exit_mmap>
+            put_pgdir(mm);
+c010a1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a1de:	89 04 24             	mov    %eax,(%esp)
+c010a1e1:	e8 0d fc ff ff       	call   c0109df3 <put_pgdir>
+            mm_destroy(mm);
+c010a1e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a1e9:	89 04 24             	mov    %eax,(%esp)
+c010a1ec:	e8 81 bc ff ff       	call   c0105e72 <mm_destroy>
+        }
+        current->mm = NULL;
+c010a1f1:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a1f6:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c010a1fd:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a202:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c010a208:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a20d:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a210:	89 50 68             	mov    %edx,0x68(%eax)
+
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c010a213:	e8 69 f2 ff ff       	call   c0109481 <__intr_save>
+c010a218:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010a21b:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a220:	8b 40 14             	mov    0x14(%eax),%eax
+c010a223:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD)
+c010a226:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a229:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a22c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a231:	0f 85 96 00 00 00    	jne    c010a2cd <do_exit+0x187>
+        {
+            wakeup_proc(proc);
+c010a237:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a23a:	89 04 24             	mov    %eax,(%esp)
+c010a23d:	e8 fa 0f 00 00       	call   c010b23c <wakeup_proc>
+        }
+        while (current->cptr != NULL)
+c010a242:	e9 86 00 00 00       	jmp    c010a2cd <do_exit+0x187>
+        {
+            proc = current->cptr;
+c010a247:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a24c:	8b 40 70             	mov    0x70(%eax),%eax
+c010a24f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c010a252:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a257:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a25a:	8b 52 78             	mov    0x78(%edx),%edx
+c010a25d:	89 50 70             	mov    %edx,0x70(%eax)
+
+            proc->yptr = NULL;
+c010a260:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a263:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+            if ((proc->optr = initproc->cptr) != NULL)
+c010a26a:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a26f:	8b 50 70             	mov    0x70(%eax),%edx
+c010a272:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a275:	89 50 78             	mov    %edx,0x78(%eax)
+c010a278:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a27b:	8b 40 78             	mov    0x78(%eax),%eax
+c010a27e:	85 c0                	test   %eax,%eax
+c010a280:	74 0e                	je     c010a290 <do_exit+0x14a>
+            {
+                initproc->cptr->yptr = proc;
+c010a282:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a287:	8b 40 70             	mov    0x70(%eax),%eax
+c010a28a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a28d:	89 50 74             	mov    %edx,0x74(%eax)
+            }
+            proc->parent = initproc;
+c010a290:	8b 15 24 50 1b c0    	mov    0xc01b5024,%edx
+c010a296:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a299:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c010a29c:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a2a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a2a4:	89 50 70             	mov    %edx,0x70(%eax)
+            if (proc->state == PROC_ZOMBIE)
+c010a2a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2aa:	8b 00                	mov    (%eax),%eax
+c010a2ac:	83 f8 03             	cmp    $0x3,%eax
+c010a2af:	75 1c                	jne    c010a2cd <do_exit+0x187>
+            {
+                if (initproc->wait_state == WT_CHILD)
+c010a2b1:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a2b6:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a2b9:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a2be:	75 0d                	jne    c010a2cd <do_exit+0x187>
+                {
+                    wakeup_proc(initproc);
+c010a2c0:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010a2c5:	89 04 24             	mov    %eax,(%esp)
+c010a2c8:	e8 6f 0f 00 00       	call   c010b23c <wakeup_proc>
+        while (current->cptr != NULL)
+c010a2cd:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a2d2:	8b 40 70             	mov    0x70(%eax),%eax
+c010a2d5:	85 c0                	test   %eax,%eax
+c010a2d7:	0f 85 6a ff ff ff    	jne    c010a247 <do_exit+0x101>
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a2dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a2e0:	89 04 24             	mov    %eax,(%esp)
+c010a2e3:	e8 c3 f1 ff ff       	call   c01094ab <__intr_restore>
+
+    schedule();
+c010a2e8:	e8 e9 0f 00 00       	call   c010b2d6 <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c010a2ed:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a2f2:	8b 40 04             	mov    0x4(%eax),%eax
+c010a2f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a2f9:	c7 44 24 08 50 e8 10 	movl   $0xc010e850,0x8(%esp)
+c010a300:	c0 
+c010a301:	c7 44 24 04 50 02 00 	movl   $0x250,0x4(%esp)
+c010a308:	00 
+c010a309:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a310:	e8 f0 60 ff ff       	call   c0100405 <__panic>
+
+c010a315 <load_icode>:
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size)
+{
+c010a315:	55                   	push   %ebp
+c010a316:	89 e5                	mov    %esp,%ebp
+c010a318:	83 ec 78             	sub    $0x78,%esp
+    if (current->mm != NULL)
+c010a31b:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a320:	8b 40 18             	mov    0x18(%eax),%eax
+c010a323:	85 c0                	test   %eax,%eax
+c010a325:	74 1c                	je     c010a343 <load_icode+0x2e>
+    {
+        panic("load_icode: current->mm must be empty.\n");
+c010a327:	c7 44 24 08 70 e8 10 	movl   $0xc010e870,0x8(%esp)
+c010a32e:	c0 
+c010a32f:	c7 44 24 04 5c 02 00 	movl   $0x25c,0x4(%esp)
+c010a336:	00 
+c010a337:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a33e:	e8 c2 60 ff ff       	call   c0100405 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010a343:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL)
+c010a34a:	e8 c7 b7 ff ff       	call   c0105b16 <mm_create>
+c010a34f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010a352:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010a356:	0f 84 2d 06 00 00    	je     c010a989 <load_icode+0x674>
+    {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0)
+c010a35c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a35f:	89 04 24             	mov    %eax,(%esp)
+c010a362:	e8 e5 f9 ff ff       	call   c0109d4c <setup_pgdir>
+c010a367:	85 c0                	test   %eax,%eax
+c010a369:	0f 85 0c 06 00 00    	jne    c010a97b <load_icode+0x666>
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c010a36f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a372:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c010a375:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a378:	8b 50 1c             	mov    0x1c(%eax),%edx
+c010a37b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a37e:	01 d0                	add    %edx,%eax
+c010a380:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC)
+c010a383:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a386:	8b 00                	mov    (%eax),%eax
+c010a388:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c010a38d:	74 0c                	je     c010a39b <load_icode+0x86>
+    {
+        ret = -E_INVAL_ELF;
+c010a38f:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c010a396:	e9 d3 05 00 00       	jmp    c010a96e <load_icode+0x659>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c010a39b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a39e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c010a3a2:	c1 e0 05             	shl    $0x5,%eax
+c010a3a5:	89 c2                	mov    %eax,%edx
+c010a3a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3aa:	01 d0                	add    %edx,%eax
+c010a3ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph++)
+c010a3af:	e9 07 03 00 00       	jmp    c010a6bb <load_icode+0x3a6>
+    {
+        //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD)
+c010a3b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3b7:	8b 00                	mov    (%eax),%eax
+c010a3b9:	83 f8 01             	cmp    $0x1,%eax
+c010a3bc:	0f 85 ee 02 00 00    	jne    c010a6b0 <load_icode+0x39b>
+        {
+            continue;
+        }
+        if (ph->p_filesz > ph->p_memsz)
+c010a3c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3c5:	8b 50 10             	mov    0x10(%eax),%edx
+c010a3c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3cb:	8b 40 14             	mov    0x14(%eax),%eax
+c010a3ce:	39 c2                	cmp    %eax,%edx
+c010a3d0:	76 0c                	jbe    c010a3de <load_icode+0xc9>
+        {
+            ret = -E_INVAL_ELF;
+c010a3d2:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010a3d9:	e9 85 05 00 00       	jmp    c010a963 <load_icode+0x64e>
+        }
+        if (ph->p_filesz == 0)
+c010a3de:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3e1:	8b 40 10             	mov    0x10(%eax),%eax
+c010a3e4:	85 c0                	test   %eax,%eax
+c010a3e6:	0f 84 c7 02 00 00    	je     c010a6b3 <load_icode+0x39e>
+        {
+            continue;
+        }
+        //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010a3ec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010a3f3:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X)
+c010a3fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a3fd:	8b 40 18             	mov    0x18(%eax),%eax
+c010a400:	83 e0 01             	and    $0x1,%eax
+c010a403:	85 c0                	test   %eax,%eax
+c010a405:	74 04                	je     c010a40b <load_icode+0xf6>
+            vm_flags |= VM_EXEC;
+c010a407:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W)
+c010a40b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a40e:	8b 40 18             	mov    0x18(%eax),%eax
+c010a411:	83 e0 02             	and    $0x2,%eax
+c010a414:	85 c0                	test   %eax,%eax
+c010a416:	74 04                	je     c010a41c <load_icode+0x107>
+            vm_flags |= VM_WRITE;
+c010a418:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R)
+c010a41c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a41f:	8b 40 18             	mov    0x18(%eax),%eax
+c010a422:	83 e0 04             	and    $0x4,%eax
+c010a425:	85 c0                	test   %eax,%eax
+c010a427:	74 04                	je     c010a42d <load_icode+0x118>
+            vm_flags |= VM_READ;
+c010a429:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE)
+c010a42d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a430:	83 e0 02             	and    $0x2,%eax
+c010a433:	85 c0                	test   %eax,%eax
+c010a435:	74 04                	je     c010a43b <load_icode+0x126>
+            perm |= PTE_W;
+c010a437:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0)
+c010a43b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a43e:	8b 50 14             	mov    0x14(%eax),%edx
+c010a441:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a444:	8b 40 08             	mov    0x8(%eax),%eax
+c010a447:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a44e:	00 
+c010a44f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c010a452:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+c010a456:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a45a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a45e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a461:	89 04 24             	mov    %eax,(%esp)
+c010a464:	e8 ac ba ff ff       	call   c0105f15 <mm_map>
+c010a469:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a46c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a470:	0f 85 e3 04 00 00    	jne    c010a959 <load_icode+0x644>
+        {
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+c010a476:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a479:	8b 50 04             	mov    0x4(%eax),%edx
+c010a47c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a47f:	01 d0                	add    %edx,%eax
+c010a481:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c010a484:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a487:	8b 40 08             	mov    0x8(%eax),%eax
+c010a48a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010a48d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a490:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c010a493:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010a496:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010a49b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c010a49e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+        //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c010a4a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a4a8:	8b 50 08             	mov    0x8(%eax),%edx
+c010a4ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a4ae:	8b 40 10             	mov    0x10(%eax),%eax
+c010a4b1:	01 d0                	add    %edx,%eax
+c010a4b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+        //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end)
+c010a4b6:	e9 89 00 00 00       	jmp    c010a544 <load_icode+0x22f>
+        {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL)
+c010a4bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a4be:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a4c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a4c4:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a4c8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a4cb:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a4cf:	89 04 24             	mov    %eax,(%esp)
+c010a4d2:	e8 4d a3 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a4d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a4da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a4de:	0f 84 78 04 00 00    	je     c010a95c <load_icode+0x647>
+            {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a4e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a4e7:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a4ea:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c010a4ed:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a4f2:	2b 45 b0             	sub    -0x50(%ebp),%eax
+c010a4f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a4f8:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la)
+c010a4ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a502:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a505:	73 09                	jae    c010a510 <load_icode+0x1fb>
+            {
+                size -= la - end;
+c010a507:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a50a:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a50d:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c010a510:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a513:	89 04 24             	mov    %eax,(%esp)
+c010a516:	e8 90 f0 ff ff       	call   c01095ab <page2kva>
+c010a51b:	89 c2                	mov    %eax,%edx
+c010a51d:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a520:	01 c2                	add    %eax,%edx
+c010a522:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a525:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a529:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010a52c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a530:	89 14 24             	mov    %edx,(%esp)
+c010a533:	e8 e6 19 00 00       	call   c010bf1e <memcpy>
+            start += size, from += size;
+c010a538:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a53b:	01 45 d8             	add    %eax,-0x28(%ebp)
+c010a53e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a541:	01 45 e0             	add    %eax,-0x20(%ebp)
+        while (start < end)
+c010a544:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a547:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
+c010a54a:	0f 82 6b ff ff ff    	jb     c010a4bb <load_icode+0x1a6>
+        }
+
+        //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c010a550:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a553:	8b 50 08             	mov    0x8(%eax),%edx
+c010a556:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a559:	8b 40 14             	mov    0x14(%eax),%eax
+c010a55c:	01 d0                	add    %edx,%eax
+c010a55e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+        if (start < la)
+c010a561:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a564:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a567:	0f 83 35 01 00 00    	jae    c010a6a2 <load_icode+0x38d>
+        {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end)
+c010a56d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a570:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
+c010a573:	0f 84 3d 01 00 00    	je     c010a6b6 <load_icode+0x3a1>
+            {
+                continue;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c010a579:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a57c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a57f:	05 00 10 00 00       	add    $0x1000,%eax
+c010a584:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c010a587:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a58c:	2b 45 b0             	sub    -0x50(%ebp),%eax
+c010a58f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la)
+c010a592:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a595:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a598:	73 09                	jae    c010a5a3 <load_icode+0x28e>
+            {
+                size -= la - end;
+c010a59a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a59d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a5a0:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a5a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5a6:	89 04 24             	mov    %eax,(%esp)
+c010a5a9:	e8 fd ef ff ff       	call   c01095ab <page2kva>
+c010a5ae:	89 c2                	mov    %eax,%edx
+c010a5b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a5b3:	01 c2                	add    %eax,%edx
+c010a5b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a5b8:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a5bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a5c3:	00 
+c010a5c4:	89 14 24             	mov    %edx,(%esp)
+c010a5c7:	e8 6f 18 00 00       	call   c010be3b <memset>
+            start += size;
+c010a5cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a5cf:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c010a5d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a5d5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a5d8:	73 0c                	jae    c010a5e6 <load_icode+0x2d1>
+c010a5da:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a5dd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
+c010a5e0:	0f 84 bc 00 00 00    	je     c010a6a2 <load_icode+0x38d>
+c010a5e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a5e9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a5ec:	72 0c                	jb     c010a5fa <load_icode+0x2e5>
+c010a5ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a5f1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a5f4:	0f 84 a8 00 00 00    	je     c010a6a2 <load_icode+0x38d>
+c010a5fa:	c7 44 24 0c 98 e8 10 	movl   $0xc010e898,0xc(%esp)
+c010a601:	c0 
+c010a602:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a609:	c0 
+c010a60a:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
+c010a611:	00 
+c010a612:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a619:	e8 e7 5d ff ff       	call   c0100405 <__panic>
+        }
+        while (start < end)
+        {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL)
+c010a61e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a621:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a624:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a627:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a62b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010a62e:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010a632:	89 04 24             	mov    %eax,(%esp)
+c010a635:	e8 ea a1 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a63a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a63d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a641:	0f 84 18 03 00 00    	je     c010a95f <load_icode+0x64a>
+            {
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a647:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a64a:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a64d:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c010a650:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a655:	2b 45 b0             	sub    -0x50(%ebp),%eax
+c010a658:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a65b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la)
+c010a662:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a665:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a668:	73 09                	jae    c010a673 <load_icode+0x35e>
+            {
+                size -= la - end;
+c010a66a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010a66d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a670:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010a673:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a676:	89 04 24             	mov    %eax,(%esp)
+c010a679:	e8 2d ef ff ff       	call   c01095ab <page2kva>
+c010a67e:	89 c2                	mov    %eax,%edx
+c010a680:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010a683:	01 c2                	add    %eax,%edx
+c010a685:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a688:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a68c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a693:	00 
+c010a694:	89 14 24             	mov    %edx,(%esp)
+c010a697:	e8 9f 17 00 00       	call   c010be3b <memset>
+            start += size;
+c010a69c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a69f:	01 45 d8             	add    %eax,-0x28(%ebp)
+        while (start < end)
+c010a6a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a6a5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
+c010a6a8:	0f 82 70 ff ff ff    	jb     c010a61e <load_icode+0x309>
+c010a6ae:	eb 07                	jmp    c010a6b7 <load_icode+0x3a2>
+            continue;
+c010a6b0:	90                   	nop
+c010a6b1:	eb 04                	jmp    c010a6b7 <load_icode+0x3a2>
+            continue;
+c010a6b3:	90                   	nop
+c010a6b4:	eb 01                	jmp    c010a6b7 <load_icode+0x3a2>
+                continue;
+c010a6b6:	90                   	nop
+    for (; ph < ph_end; ph++)
+c010a6b7:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c010a6bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a6be:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010a6c1:	0f 82 ed fc ff ff    	jb     c010a3b4 <load_icode+0x9f>
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c010a6c7:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0)
+c010a6ce:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+c010a6d5:	00 
+c010a6d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a6d9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a6dd:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
+c010a6e4:	00 
+c010a6e5:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
+c010a6ec:	af 
+c010a6ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a6f0:	89 04 24             	mov    %eax,(%esp)
+c010a6f3:	e8 1d b8 ff ff       	call   c0105f15 <mm_map>
+c010a6f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a6fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a6ff:	0f 85 5d 02 00 00    	jne    c010a962 <load_icode+0x64d>
+    {
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - PGSIZE, PTE_USER) != NULL);
+c010a705:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a708:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a70b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a712:	00 
+c010a713:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
+c010a71a:	af 
+c010a71b:	89 04 24             	mov    %eax,(%esp)
+c010a71e:	e8 01 a1 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a723:	85 c0                	test   %eax,%eax
+c010a725:	75 24                	jne    c010a74b <load_icode+0x436>
+c010a727:	c7 44 24 0c d4 e8 10 	movl   $0xc010e8d4,0xc(%esp)
+c010a72e:	c0 
+c010a72f:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a736:	c0 
+c010a737:	c7 44 24 04 d7 02 00 	movl   $0x2d7,0x4(%esp)
+c010a73e:	00 
+c010a73f:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a746:	e8 ba 5c ff ff       	call   c0100405 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 2 * PGSIZE, PTE_USER) != NULL);
+c010a74b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a74e:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a751:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a758:	00 
+c010a759:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
+c010a760:	af 
+c010a761:	89 04 24             	mov    %eax,(%esp)
+c010a764:	e8 bb a0 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a769:	85 c0                	test   %eax,%eax
+c010a76b:	75 24                	jne    c010a791 <load_icode+0x47c>
+c010a76d:	c7 44 24 0c 18 e9 10 	movl   $0xc010e918,0xc(%esp)
+c010a774:	c0 
+c010a775:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a77c:	c0 
+c010a77d:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
+c010a784:	00 
+c010a785:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a78c:	e8 74 5c ff ff       	call   c0100405 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 3 * PGSIZE, PTE_USER) != NULL);
+c010a791:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a794:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a797:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a79e:	00 
+c010a79f:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
+c010a7a6:	af 
+c010a7a7:	89 04 24             	mov    %eax,(%esp)
+c010a7aa:	e8 75 a0 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a7af:	85 c0                	test   %eax,%eax
+c010a7b1:	75 24                	jne    c010a7d7 <load_icode+0x4c2>
+c010a7b3:	c7 44 24 0c 60 e9 10 	movl   $0xc010e960,0xc(%esp)
+c010a7ba:	c0 
+c010a7bb:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a7c2:	c0 
+c010a7c3:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
+c010a7ca:	00 
+c010a7cb:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a7d2:	e8 2e 5c ff ff       	call   c0100405 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP - 4 * PGSIZE, PTE_USER) != NULL);
+c010a7d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a7da:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a7dd:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
+c010a7e4:	00 
+c010a7e5:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
+c010a7ec:	af 
+c010a7ed:	89 04 24             	mov    %eax,(%esp)
+c010a7f0:	e8 2f a0 ff ff       	call   c0104824 <pgdir_alloc_page>
+c010a7f5:	85 c0                	test   %eax,%eax
+c010a7f7:	75 24                	jne    c010a81d <load_icode+0x508>
+c010a7f9:	c7 44 24 0c a8 e9 10 	movl   $0xc010e9a8,0xc(%esp)
+c010a800:	c0 
+c010a801:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010a808:	c0 
+c010a809:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
+c010a810:	00 
+c010a811:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a818:	e8 e8 5b ff ff       	call   c0100405 <__panic>
+
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c010a81d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a820:	89 04 24             	mov    %eax,(%esp)
+c010a823:	e8 21 ee ff ff       	call   c0109649 <mm_count_inc>
+    current->mm = mm;
+c010a828:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a82d:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010a830:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c010a833:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a836:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a839:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010a83c:	81 7d c4 ff ff ff bf 	cmpl   $0xbfffffff,-0x3c(%ebp)
+c010a843:	77 23                	ja     c010a868 <load_icode+0x553>
+c010a845:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010a848:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a84c:	c7 44 24 08 c8 e7 10 	movl   $0xc010e7c8,0x8(%esp)
+c010a853:	c0 
+c010a854:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
+c010a85b:	00 
+c010a85c:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a863:	e8 9d 5b ff ff       	call   c0100405 <__panic>
+c010a868:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010a86b:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c010a871:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a876:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c010a879:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a87c:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a87f:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c010a882:	81 7d c0 ff ff ff bf 	cmpl   $0xbfffffff,-0x40(%ebp)
+c010a889:	77 23                	ja     c010a8ae <load_icode+0x599>
+c010a88b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a88e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010a892:	c7 44 24 08 c8 e7 10 	movl   $0xc010e7c8,0x8(%esp)
+c010a899:	c0 
+c010a89a:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
+c010a8a1:	00 
+c010a8a2:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010a8a9:	e8 57 5b ff ff       	call   c0100405 <__panic>
+c010a8ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a8b1:	05 00 00 00 40       	add    $0x40000000,%eax
+c010a8b6:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c010a8b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010a8bc:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c010a8bf:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a8c4:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a8c7:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c010a8ca:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
+c010a8d1:	00 
+c010a8d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a8d9:	00 
+c010a8da:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a8dd:	89 04 24             	mov    %eax,(%esp)
+c010a8e0:	e8 56 15 00 00       	call   c010be3b <memset>
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c010a8e5:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a8e8:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010a8ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a8f1:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c010a8f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a8fa:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010a8fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a901:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010a905:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a908:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c010a90c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a90f:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c010a913:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a916:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c010a91d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a920:	8b 50 18             	mov    0x18(%eax),%edx
+c010a923:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a926:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags |= FL_IF;
+c010a929:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a92c:	8b 40 40             	mov    0x40(%eax),%eax
+c010a92f:	0d 00 02 00 00       	or     $0x200,%eax
+c010a934:	89 c2                	mov    %eax,%edx
+c010a936:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a939:	89 50 40             	mov    %edx,0x40(%eax)
+    tf->tf_eflags |= 0x2;
+c010a93c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a93f:	8b 40 40             	mov    0x40(%eax),%eax
+c010a942:	83 c8 02             	or     $0x2,%eax
+c010a945:	89 c2                	mov    %eax,%edx
+c010a947:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010a94a:	89 50 40             	mov    %edx,0x40(%eax)
+    ret = 0;
+c010a94d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c010a954:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a957:	eb 33                	jmp    c010a98c <load_icode+0x677>
+            goto bad_cleanup_mmap;
+c010a959:	90                   	nop
+c010a95a:	eb 07                	jmp    c010a963 <load_icode+0x64e>
+                goto bad_cleanup_mmap;
+c010a95c:	90                   	nop
+c010a95d:	eb 04                	jmp    c010a963 <load_icode+0x64e>
+                goto bad_cleanup_mmap;
+c010a95f:	90                   	nop
+c010a960:	eb 01                	jmp    c010a963 <load_icode+0x64e>
+        goto bad_cleanup_mmap;
+c010a962:	90                   	nop
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c010a963:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a966:	89 04 24             	mov    %eax,(%esp)
+c010a969:	e8 c0 b7 ff ff       	call   c010612e <exit_mmap>
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c010a96e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a971:	89 04 24             	mov    %eax,(%esp)
+c010a974:	e8 7a f4 ff ff       	call   c0109df3 <put_pgdir>
+c010a979:	eb 01                	jmp    c010a97c <load_icode+0x667>
+        goto bad_pgdir_cleanup_mm;
+c010a97b:	90                   	nop
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010a97c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a97f:	89 04 24             	mov    %eax,(%esp)
+c010a982:	e8 eb b4 ff ff       	call   c0105e72 <mm_destroy>
+bad_mm:
+    goto out;
+c010a987:	eb cb                	jmp    c010a954 <load_icode+0x63f>
+        goto bad_mm;
+c010a989:	90                   	nop
+    goto out;
+c010a98a:	eb c8                	jmp    c010a954 <load_icode+0x63f>
+}
+c010a98c:	c9                   	leave  
+c010a98d:	c3                   	ret    
+
+c010a98e <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int do_execve(const char *name, size_t len, unsigned char *binary, size_t size)
+{
+c010a98e:	55                   	push   %ebp
+c010a98f:	89 e5                	mov    %esp,%ebp
+c010a991:	83 ec 38             	sub    $0x38,%esp
+    struct mm_struct *mm = current->mm;
+c010a994:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010a999:	8b 40 18             	mov    0x18(%eax),%eax
+c010a99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0))
+c010a99f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a9a2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+c010a9a9:	00 
+c010a9aa:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a9ad:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010a9b1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010a9b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a9b8:	89 04 24             	mov    %eax,(%esp)
+c010a9bb:	e8 0f c2 ff ff       	call   c0106bcf <user_mem_check>
+c010a9c0:	85 c0                	test   %eax,%eax
+c010a9c2:	75 0a                	jne    c010a9ce <do_execve+0x40>
+    {
+        return -E_INVAL;
+c010a9c4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010a9c9:	e9 f6 00 00 00       	jmp    c010aac4 <do_execve+0x136>
+    }
+    if (len > PROC_NAME_LEN)
+c010a9ce:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
+c010a9d2:	76 07                	jbe    c010a9db <do_execve+0x4d>
+    {
+        len = PROC_NAME_LEN;
+c010a9d4:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c010a9db:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+c010a9e2:	00 
+c010a9e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010a9ea:	00 
+c010a9eb:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010a9ee:	89 04 24             	mov    %eax,(%esp)
+c010a9f1:	e8 45 14 00 00       	call   c010be3b <memset>
+    memcpy(local_name, name, len);
+c010a9f6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a9f9:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010a9fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa00:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010aa04:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c010aa07:	89 04 24             	mov    %eax,(%esp)
+c010aa0a:	e8 0f 15 00 00       	call   c010bf1e <memcpy>
+
+    if (mm != NULL)
+c010aa0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010aa13:	74 4a                	je     c010aa5f <do_execve+0xd1>
+    {
+        lcr3(boot_cr3);
+c010aa15:	a1 d4 70 1b c0       	mov    0xc01b70d4,%eax
+c010aa1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010aa1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa20:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0)
+c010aa23:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa26:	89 04 24             	mov    %eax,(%esp)
+c010aa29:	e8 35 ec ff ff       	call   c0109663 <mm_count_dec>
+c010aa2e:	85 c0                	test   %eax,%eax
+c010aa30:	75 21                	jne    c010aa53 <do_execve+0xc5>
+        {
+            exit_mmap(mm);
+c010aa32:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa35:	89 04 24             	mov    %eax,(%esp)
+c010aa38:	e8 f1 b6 ff ff       	call   c010612e <exit_mmap>
+            put_pgdir(mm);
+c010aa3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa40:	89 04 24             	mov    %eax,(%esp)
+c010aa43:	e8 ab f3 ff ff       	call   c0109df3 <put_pgdir>
+            mm_destroy(mm);
+c010aa48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa4b:	89 04 24             	mov    %eax,(%esp)
+c010aa4e:	e8 1f b4 ff ff       	call   c0105e72 <mm_destroy>
+        }
+        current->mm = NULL;
+c010aa53:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010aa58:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0)
+c010aa5f:	8b 45 14             	mov    0x14(%ebp),%eax
+c010aa62:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010aa66:	8b 45 10             	mov    0x10(%ebp),%eax
+c010aa69:	89 04 24             	mov    %eax,(%esp)
+c010aa6c:	e8 a4 f8 ff ff       	call   c010a315 <load_icode>
+c010aa71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010aa74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010aa78:	75 1b                	jne    c010aa95 <do_execve+0x107>
+    {
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c010aa7a:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010aa7f:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010aa82:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010aa86:	89 04 24             	mov    %eax,(%esp)
+c010aa89:	e8 95 ed ff ff       	call   c0109823 <set_proc_name>
+    return 0;
+c010aa8e:	b8 00 00 00 00       	mov    $0x0,%eax
+c010aa93:	eb 2f                	jmp    c010aac4 <do_execve+0x136>
+        goto execve_exit;
+c010aa95:	90                   	nop
+
+execve_exit:
+    do_exit(ret);
+c010aa96:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aa99:	89 04 24             	mov    %eax,(%esp)
+c010aa9c:	e8 a5 f6 ff ff       	call   c010a146 <do_exit>
+    panic("already exit: %e.\n", ret);
+c010aaa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aaa4:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010aaa8:	c7 44 24 08 ee e9 10 	movl   $0xc010e9ee,0x8(%esp)
+c010aaaf:	c0 
+c010aab0:	c7 44 24 04 28 03 00 	movl   $0x328,0x4(%esp)
+c010aab7:	00 
+c010aab8:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010aabf:	e8 41 59 ff ff       	call   c0100405 <__panic>
+}
+c010aac4:	c9                   	leave  
+c010aac5:	c3                   	ret    
+
+c010aac6 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int do_yield(void)
+{
+c010aac6:	55                   	push   %ebp
+c010aac7:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c010aac9:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010aace:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c010aad5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aada:	5d                   	pop    %ebp
+c010aadb:	c3                   	ret    
+
+c010aadc <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int do_wait(int pid, int *code_store)
+{
+c010aadc:	55                   	push   %ebp
+c010aadd:	89 e5                	mov    %esp,%ebp
+c010aadf:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = current->mm;
+c010aae2:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010aae7:	8b 40 18             	mov    0x18(%eax),%eax
+c010aaea:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL)
+c010aaed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010aaf1:	74 30                	je     c010ab23 <do_wait+0x47>
+    {
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1))
+c010aaf3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aaf6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
+c010aafd:	00 
+c010aafe:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+c010ab05:	00 
+c010ab06:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ab0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ab0d:	89 04 24             	mov    %eax,(%esp)
+c010ab10:	e8 ba c0 ff ff       	call   c0106bcf <user_mem_check>
+c010ab15:	85 c0                	test   %eax,%eax
+c010ab17:	75 0a                	jne    c010ab23 <do_wait+0x47>
+        {
+            return -E_INVAL;
+c010ab19:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010ab1e:	e9 47 01 00 00       	jmp    c010ac6a <do_wait+0x18e>
+        }
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+c010ab23:	90                   	nop
+    haskid = 0;
+c010ab24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0)
+c010ab2b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010ab2f:	74 36                	je     c010ab67 <do_wait+0x8b>
+    {
+        proc = find_proc(pid);
+c010ab31:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab34:	89 04 24             	mov    %eax,(%esp)
+c010ab37:	e8 c7 f0 ff ff       	call   c0109c03 <find_proc>
+c010ab3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current)
+c010ab3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ab43:	74 4f                	je     c010ab94 <do_wait+0xb8>
+c010ab45:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab48:	8b 50 14             	mov    0x14(%eax),%edx
+c010ab4b:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010ab50:	39 c2                	cmp    %eax,%edx
+c010ab52:	75 40                	jne    c010ab94 <do_wait+0xb8>
+        {
+            haskid = 1;
+c010ab54:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE)
+c010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab5e:	8b 00                	mov    (%eax),%eax
+c010ab60:	83 f8 03             	cmp    $0x3,%eax
+c010ab63:	75 2f                	jne    c010ab94 <do_wait+0xb8>
+            {
+                goto found;
+c010ab65:	eb 7e                	jmp    c010abe5 <do_wait+0x109>
+            }
+        }
+    }
+    else
+    {
+        proc = current->cptr;
+c010ab67:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010ab6c:	8b 40 70             	mov    0x70(%eax),%eax
+c010ab6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr)
+c010ab72:	eb 1a                	jmp    c010ab8e <do_wait+0xb2>
+        {
+            haskid = 1;
+c010ab74:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE)
+c010ab7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab7e:	8b 00                	mov    (%eax),%eax
+c010ab80:	83 f8 03             	cmp    $0x3,%eax
+c010ab83:	74 5f                	je     c010abe4 <do_wait+0x108>
+        for (; proc != NULL; proc = proc->optr)
+c010ab85:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab88:	8b 40 78             	mov    0x78(%eax),%eax
+c010ab8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ab8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ab92:	75 e0                	jne    c010ab74 <do_wait+0x98>
+            {
+                goto found;
+            }
+        }
+    }
+    if (haskid)
+c010ab94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ab98:	74 40                	je     c010abda <do_wait+0xfe>
+    {
+        current->state = PROC_SLEEPING;
+c010ab9a:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010ab9f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010aba5:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010abaa:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
+        schedule();
+c010abb1:	e8 20 07 00 00       	call   c010b2d6 <schedule>
+        if (current->flags & PF_EXITING)
+c010abb6:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010abbb:	8b 40 44             	mov    0x44(%eax),%eax
+c010abbe:	83 e0 01             	and    $0x1,%eax
+c010abc1:	85 c0                	test   %eax,%eax
+c010abc3:	0f 84 5b ff ff ff    	je     c010ab24 <do_wait+0x48>
+        {
+            do_exit(-E_KILLED);
+c010abc9:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
+c010abd0:	e8 71 f5 ff ff       	call   c010a146 <do_exit>
+        }
+        goto repeat;
+c010abd5:	e9 4a ff ff ff       	jmp    c010ab24 <do_wait+0x48>
+    }
+    return -E_BAD_PROC;
+c010abda:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010abdf:	e9 86 00 00 00       	jmp    c010ac6a <do_wait+0x18e>
+                goto found;
+c010abe4:	90                   	nop
+
+found:
+    if (proc == idleproc || proc == initproc)
+c010abe5:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010abea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010abed:	74 0a                	je     c010abf9 <do_wait+0x11d>
+c010abef:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010abf4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010abf7:	75 1c                	jne    c010ac15 <do_wait+0x139>
+    {
+        panic("wait idleproc or initproc.\n");
+c010abf9:	c7 44 24 08 01 ea 10 	movl   $0xc010ea01,0x8(%esp)
+c010ac00:	c0 
+c010ac01:	c7 44 24 04 6c 03 00 	movl   $0x36c,0x4(%esp)
+c010ac08:	00 
+c010ac09:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010ac10:	e8 f0 57 ff ff       	call   c0100405 <__panic>
+    }
+    if (code_store != NULL)
+c010ac15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010ac19:	74 0b                	je     c010ac26 <do_wait+0x14a>
+    {
+        *code_store = proc->exit_code;
+c010ac1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac1e:	8b 50 68             	mov    0x68(%eax),%edx
+c010ac21:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ac24:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010ac26:	e8 56 e8 ff ff       	call   c0109481 <__intr_save>
+c010ac2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010ac2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac31:	89 04 24             	mov    %eax,(%esp)
+c010ac34:	e8 96 ef ff ff       	call   c0109bcf <unhash_proc>
+        remove_links(proc);
+c010ac39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac3c:	89 04 24             	mov    %eax,(%esp)
+c010ac3f:	e8 08 ed ff ff       	call   c010994c <remove_links>
+    }
+    local_intr_restore(intr_flag);
+c010ac44:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ac47:	89 04 24             	mov    %eax,(%esp)
+c010ac4a:	e8 5c e8 ff ff       	call   c01094ab <__intr_restore>
+    put_kstack(proc);
+c010ac4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac52:	89 04 24             	mov    %eax,(%esp)
+c010ac55:	e8 cb f0 ff ff       	call   c0109d25 <put_kstack>
+    kfree(proc);
+c010ac5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac5d:	89 04 24             	mov    %eax,(%esp)
+c010ac60:	e8 ab c6 ff ff       	call   c0107310 <kfree>
+    return 0;
+c010ac65:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ac6a:	c9                   	leave  
+c010ac6b:	c3                   	ret    
+
+c010ac6c <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int do_kill(int pid)
+{
+c010ac6c:	55                   	push   %ebp
+c010ac6d:	89 e5                	mov    %esp,%ebp
+c010ac6f:	83 ec 28             	sub    $0x28,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL)
+c010ac72:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac75:	89 04 24             	mov    %eax,(%esp)
+c010ac78:	e8 86 ef ff ff       	call   c0109c03 <find_proc>
+c010ac7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ac80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ac84:	74 41                	je     c010acc7 <do_kill+0x5b>
+    {
+        if (!(proc->flags & PF_EXITING))
+c010ac86:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac89:	8b 40 44             	mov    0x44(%eax),%eax
+c010ac8c:	83 e0 01             	and    $0x1,%eax
+c010ac8f:	85 c0                	test   %eax,%eax
+c010ac91:	75 2d                	jne    c010acc0 <do_kill+0x54>
+        {
+            proc->flags |= PF_EXITING;
+c010ac93:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac96:	8b 40 44             	mov    0x44(%eax),%eax
+c010ac99:	83 c8 01             	or     $0x1,%eax
+c010ac9c:	89 c2                	mov    %eax,%edx
+c010ac9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aca1:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED)
+c010aca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aca7:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010acaa:	85 c0                	test   %eax,%eax
+c010acac:	79 0b                	jns    c010acb9 <do_kill+0x4d>
+            {
+                wakeup_proc(proc);
+c010acae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acb1:	89 04 24             	mov    %eax,(%esp)
+c010acb4:	e8 83 05 00 00       	call   c010b23c <wakeup_proc>
+            }
+            return 0;
+c010acb9:	b8 00 00 00 00       	mov    $0x0,%eax
+c010acbe:	eb 0c                	jmp    c010accc <do_kill+0x60>
+        }
+        return -E_KILLED;
+c010acc0:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010acc5:	eb 05                	jmp    c010accc <do_kill+0x60>
+    }
+    return -E_INVAL;
+c010acc7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010accc:	c9                   	leave  
+c010accd:	c3                   	ret    
+
+c010acce <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size)
+{
+c010acce:	55                   	push   %ebp
+c010accf:	89 e5                	mov    %esp,%ebp
+c010acd1:	57                   	push   %edi
+c010acd2:	56                   	push   %esi
+c010acd3:	53                   	push   %ebx
+c010acd4:	83 ec 2c             	sub    $0x2c,%esp
+    int ret, len = strlen(name);
+c010acd7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010acda:	89 04 24             	mov    %eax,(%esp)
+c010acdd:	e8 39 0e 00 00       	call   c010bb1b <strlen>
+c010ace2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile(
+c010ace5:	b8 04 00 00 00       	mov    $0x4,%eax
+c010acea:	8b 55 08             	mov    0x8(%ebp),%edx
+c010aced:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010acf0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010acf3:	8b 75 10             	mov    0x10(%ebp),%esi
+c010acf6:	89 f7                	mov    %esi,%edi
+c010acf8:	cd 80                	int    $0x80
+c010acfa:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a"(ret)
+        : "i"(T_SYSCALL), "0"(SYS_exec), "d"(name), "c"(len), "b"(binary), "D"(size)
+        : "memory");
+    return ret;
+c010acfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010ad00:	83 c4 2c             	add    $0x2c,%esp
+c010ad03:	5b                   	pop    %ebx
+c010ad04:	5e                   	pop    %esi
+c010ad05:	5f                   	pop    %edi
+c010ad06:	5d                   	pop    %ebp
+c010ad07:	c3                   	ret    
+
+c010ad08 <user_main>:
+#define KERNEL_EXECVE2(x, xstart, xsize) __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg)
+{
+c010ad08:	55                   	push   %ebp
+c010ad09:	89 e5                	mov    %esp,%ebp
+c010ad0b:	83 ec 18             	sub    $0x18,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010ad0e:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010ad13:	8b 40 04             	mov    0x4(%eax),%eax
+c010ad16:	c7 44 24 08 1d ea 10 	movl   $0xc010ea1d,0x8(%esp)
+c010ad1d:	c0 
+c010ad1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010ad22:	c7 04 24 28 ea 10 c0 	movl   $0xc010ea28,(%esp)
+c010ad29:	e8 80 55 ff ff       	call   c01002ae <cprintf>
+c010ad2e:	b8 60 89 00 00       	mov    $0x8960,%eax
+c010ad33:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010ad37:	c7 44 24 04 e8 c3 15 	movl   $0xc015c3e8,0x4(%esp)
+c010ad3e:	c0 
+c010ad3f:	c7 04 24 1d ea 10 c0 	movl   $0xc010ea1d,(%esp)
+c010ad46:	e8 83 ff ff ff       	call   c010acce <kernel_execve>
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010ad4b:	c7 44 24 08 4f ea 10 	movl   $0xc010ea4f,0x8(%esp)
+c010ad52:	c0 
+c010ad53:	c7 44 24 04 bb 03 00 	movl   $0x3bb,0x4(%esp)
+c010ad5a:	00 
+c010ad5b:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010ad62:	e8 9e 56 ff ff       	call   c0100405 <__panic>
+
+c010ad67 <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg)
+{
+c010ad67:	55                   	push   %ebp
+c010ad68:	89 e5                	mov    %esp,%ebp
+c010ad6a:	83 ec 38             	sub    $0x38,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010ad6d:	e8 07 8d ff ff       	call   c0103a79 <nr_free_pages>
+c010ad72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010ad75:	e8 58 c4 ff ff       	call   c01071d2 <kallocated>
+c010ad7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010ad7d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010ad84:	00 
+c010ad85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010ad8c:	00 
+c010ad8d:	c7 04 24 08 ad 10 c0 	movl   $0xc010ad08,(%esp)
+c010ad94:	e8 dc ee ff ff       	call   c0109c75 <kernel_thread>
+c010ad99:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0)
+c010ad9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010ada0:	7f 21                	jg     c010adc3 <init_main+0x5c>
+    {
+        panic("create user_main failed.\n");
+c010ada2:	c7 44 24 08 69 ea 10 	movl   $0xc010ea69,0x8(%esp)
+c010ada9:	c0 
+c010adaa:	c7 44 24 04 c8 03 00 	movl   $0x3c8,0x4(%esp)
+c010adb1:	00 
+c010adb2:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010adb9:	e8 47 56 ff ff       	call   c0100405 <__panic>
+    }
+
+    while (do_wait(0, NULL) == 0)
+    {
+        schedule();
+c010adbe:	e8 13 05 00 00       	call   c010b2d6 <schedule>
+    while (do_wait(0, NULL) == 0)
+c010adc3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010adca:	00 
+c010adcb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010add2:	e8 05 fd ff ff       	call   c010aadc <do_wait>
+c010add7:	85 c0                	test   %eax,%eax
+c010add9:	74 e3                	je     c010adbe <init_main+0x57>
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010addb:	c7 04 24 84 ea 10 c0 	movl   $0xc010ea84,(%esp)
+c010ade2:	e8 c7 54 ff ff       	call   c01002ae <cprintf>
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010ade7:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010adec:	8b 40 70             	mov    0x70(%eax),%eax
+c010adef:	85 c0                	test   %eax,%eax
+c010adf1:	75 18                	jne    c010ae0b <init_main+0xa4>
+c010adf3:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010adf8:	8b 40 74             	mov    0x74(%eax),%eax
+c010adfb:	85 c0                	test   %eax,%eax
+c010adfd:	75 0c                	jne    c010ae0b <init_main+0xa4>
+c010adff:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010ae04:	8b 40 78             	mov    0x78(%eax),%eax
+c010ae07:	85 c0                	test   %eax,%eax
+c010ae09:	74 24                	je     c010ae2f <init_main+0xc8>
+c010ae0b:	c7 44 24 0c a8 ea 10 	movl   $0xc010eaa8,0xc(%esp)
+c010ae12:	c0 
+c010ae13:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010ae1a:	c0 
+c010ae1b:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
+c010ae22:	00 
+c010ae23:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010ae2a:	e8 d6 55 ff ff       	call   c0100405 <__panic>
+    assert(nr_process == 2);
+c010ae2f:	a1 40 70 1b c0       	mov    0xc01b7040,%eax
+c010ae34:	83 f8 02             	cmp    $0x2,%eax
+c010ae37:	74 24                	je     c010ae5d <init_main+0xf6>
+c010ae39:	c7 44 24 0c f3 ea 10 	movl   $0xc010eaf3,0xc(%esp)
+c010ae40:	c0 
+c010ae41:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010ae48:	c0 
+c010ae49:	c7 44 24 04 d2 03 00 	movl   $0x3d2,0x4(%esp)
+c010ae50:	00 
+c010ae51:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010ae58:	e8 a8 55 ff ff       	call   c0100405 <__panic>
+c010ae5d:	c7 45 e8 d0 71 1b c0 	movl   $0xc01b71d0,-0x18(%ebp)
+c010ae64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ae67:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010ae6a:	8b 15 24 50 1b c0    	mov    0xc01b5024,%edx
+c010ae70:	83 c2 58             	add    $0x58,%edx
+c010ae73:	39 d0                	cmp    %edx,%eax
+c010ae75:	74 24                	je     c010ae9b <init_main+0x134>
+c010ae77:	c7 44 24 0c 04 eb 10 	movl   $0xc010eb04,0xc(%esp)
+c010ae7e:	c0 
+c010ae7f:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010ae86:	c0 
+c010ae87:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
+c010ae8e:	00 
+c010ae8f:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010ae96:	e8 6a 55 ff ff       	call   c0100405 <__panic>
+c010ae9b:	c7 45 e4 d0 71 1b c0 	movl   $0xc01b71d0,-0x1c(%ebp)
+    return listelm->prev;
+c010aea2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010aea5:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010aea7:	8b 15 24 50 1b c0    	mov    0xc01b5024,%edx
+c010aead:	83 c2 58             	add    $0x58,%edx
+c010aeb0:	39 d0                	cmp    %edx,%eax
+c010aeb2:	74 24                	je     c010aed8 <init_main+0x171>
+c010aeb4:	c7 44 24 0c 34 eb 10 	movl   $0xc010eb34,0xc(%esp)
+c010aebb:	c0 
+c010aebc:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010aec3:	c0 
+c010aec4:	c7 44 24 04 d4 03 00 	movl   $0x3d4,0x4(%esp)
+c010aecb:	00 
+c010aecc:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010aed3:	e8 2d 55 ff ff       	call   c0100405 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010aed8:	c7 04 24 64 eb 10 c0 	movl   $0xc010eb64,(%esp)
+c010aedf:	e8 ca 53 ff ff       	call   c01002ae <cprintf>
+    return 0;
+c010aee4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aee9:	c9                   	leave  
+c010aeea:	c3                   	ret    
+
+c010aeeb <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and
+//           - create the second kernel thread init_main
+void proc_init(void)
+{
+c010aeeb:	55                   	push   %ebp
+c010aeec:	89 e5                	mov    %esp,%ebp
+c010aeee:	83 ec 28             	sub    $0x28,%esp
+c010aef1:	c7 45 ec d0 71 1b c0 	movl   $0xc01b71d0,-0x14(%ebp)
+    elm->prev = elm->next = elm;
+c010aef8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aefb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010aefe:	89 50 04             	mov    %edx,0x4(%eax)
+c010af01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010af04:	8b 50 04             	mov    0x4(%eax),%edx
+c010af07:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010af0a:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i++)
+c010af0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010af13:	eb 25                	jmp    c010af3a <proc_init+0x4f>
+    {
+        list_init(hash_list + i);
+c010af15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010af18:	c1 e0 03             	shl    $0x3,%eax
+c010af1b:	05 40 50 1b c0       	add    $0xc01b5040,%eax
+c010af20:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010af23:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010af26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010af29:	89 50 04             	mov    %edx,0x4(%eax)
+c010af2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010af2f:	8b 50 04             	mov    0x4(%eax),%edx
+c010af32:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010af35:	89 10                	mov    %edx,(%eax)
+    for (i = 0; i < HASH_LIST_SIZE; i++)
+c010af37:	ff 45 f4             	incl   -0xc(%ebp)
+c010af3a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010af41:	7e d2                	jle    c010af15 <proc_init+0x2a>
+    }
+
+    if ((idleproc = alloc_proc()) == NULL)
+c010af43:	e8 6f e7 ff ff       	call   c01096b7 <alloc_proc>
+c010af48:	a3 20 50 1b c0       	mov    %eax,0xc01b5020
+c010af4d:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010af52:	85 c0                	test   %eax,%eax
+c010af54:	75 1c                	jne    c010af72 <proc_init+0x87>
+    {
+        panic("cannot alloc idleproc.\n");
+c010af56:	c7 44 24 08 7d eb 10 	movl   $0xc010eb7d,0x8(%esp)
+c010af5d:	c0 
+c010af5e:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
+c010af65:	00 
+c010af66:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010af6d:	e8 93 54 ff ff       	call   c0100405 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010af72:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010af77:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010af7e:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010af83:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010af89:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010af8e:	ba 00 c0 12 c0       	mov    $0xc012c000,%edx
+c010af93:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010af96:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010af9b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010afa2:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010afa7:	c7 44 24 04 95 eb 10 	movl   $0xc010eb95,0x4(%esp)
+c010afae:	c0 
+c010afaf:	89 04 24             	mov    %eax,(%esp)
+c010afb2:	e8 6c e8 ff ff       	call   c0109823 <set_proc_name>
+    nr_process++;
+c010afb7:	a1 40 70 1b c0       	mov    0xc01b7040,%eax
+c010afbc:	40                   	inc    %eax
+c010afbd:	a3 40 70 1b c0       	mov    %eax,0xc01b7040
+
+    current = idleproc;
+c010afc2:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010afc7:	a3 28 50 1b c0       	mov    %eax,0xc01b5028
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010afcc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+c010afd3:	00 
+c010afd4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+c010afdb:	00 
+c010afdc:	c7 04 24 67 ad 10 c0 	movl   $0xc010ad67,(%esp)
+c010afe3:	e8 8d ec ff ff       	call   c0109c75 <kernel_thread>
+c010afe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (pid <= 0)
+c010afeb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010afef:	7f 1c                	jg     c010b00d <proc_init+0x122>
+    {
+        panic("create init_main failed.\n");
+c010aff1:	c7 44 24 08 9a eb 10 	movl   $0xc010eb9a,0x8(%esp)
+c010aff8:	c0 
+c010aff9:	c7 44 24 04 f7 03 00 	movl   $0x3f7,0x4(%esp)
+c010b000:	00 
+c010b001:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010b008:	e8 f8 53 ff ff       	call   c0100405 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010b00d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b010:	89 04 24             	mov    %eax,(%esp)
+c010b013:	e8 eb eb ff ff       	call   c0109c03 <find_proc>
+c010b018:	a3 24 50 1b c0       	mov    %eax,0xc01b5024
+    set_proc_name(initproc, "init");
+c010b01d:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010b022:	c7 44 24 04 b4 eb 10 	movl   $0xc010ebb4,0x4(%esp)
+c010b029:	c0 
+c010b02a:	89 04 24             	mov    %eax,(%esp)
+c010b02d:	e8 f1 e7 ff ff       	call   c0109823 <set_proc_name>
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010b032:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010b037:	85 c0                	test   %eax,%eax
+c010b039:	74 0c                	je     c010b047 <proc_init+0x15c>
+c010b03b:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010b040:	8b 40 04             	mov    0x4(%eax),%eax
+c010b043:	85 c0                	test   %eax,%eax
+c010b045:	74 24                	je     c010b06b <proc_init+0x180>
+c010b047:	c7 44 24 0c bc eb 10 	movl   $0xc010ebbc,0xc(%esp)
+c010b04e:	c0 
+c010b04f:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010b056:	c0 
+c010b057:	c7 44 24 04 fd 03 00 	movl   $0x3fd,0x4(%esp)
+c010b05e:	00 
+c010b05f:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010b066:	e8 9a 53 ff ff       	call   c0100405 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010b06b:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010b070:	85 c0                	test   %eax,%eax
+c010b072:	74 0d                	je     c010b081 <proc_init+0x196>
+c010b074:	a1 24 50 1b c0       	mov    0xc01b5024,%eax
+c010b079:	8b 40 04             	mov    0x4(%eax),%eax
+c010b07c:	83 f8 01             	cmp    $0x1,%eax
+c010b07f:	74 24                	je     c010b0a5 <proc_init+0x1ba>
+c010b081:	c7 44 24 0c e4 eb 10 	movl   $0xc010ebe4,0xc(%esp)
+c010b088:	c0 
+c010b089:	c7 44 24 08 19 e8 10 	movl   $0xc010e819,0x8(%esp)
+c010b090:	c0 
+c010b091:	c7 44 24 04 fe 03 00 	movl   $0x3fe,0x4(%esp)
+c010b098:	00 
+c010b099:	c7 04 24 ec e7 10 c0 	movl   $0xc010e7ec,(%esp)
+c010b0a0:	e8 60 53 ff ff       	call   c0100405 <__panic>
+}
+c010b0a5:	90                   	nop
+c010b0a6:	c9                   	leave  
+c010b0a7:	c3                   	ret    
+
+c010b0a8 <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void cpu_idle(void)
+{
+c010b0a8:	55                   	push   %ebp
+c010b0a9:	89 e5                	mov    %esp,%ebp
+c010b0ab:	83 ec 08             	sub    $0x8,%esp
+    while (1)
+    {
+        if (current->need_resched)
+c010b0ae:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b0b3:	8b 40 10             	mov    0x10(%eax),%eax
+c010b0b6:	85 c0                	test   %eax,%eax
+c010b0b8:	74 f4                	je     c010b0ae <cpu_idle+0x6>
+        {
+            schedule();
+c010b0ba:	e8 17 02 00 00       	call   c010b2d6 <schedule>
+        if (current->need_resched)
+c010b0bf:	eb ed                	jmp    c010b0ae <cpu_idle+0x6>
+
+c010b0c1 <lab6_set_priority>:
+    }
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time)
+void lab6_set_priority(uint32_t priority)
+{
+c010b0c1:	55                   	push   %ebp
+c010b0c2:	89 e5                	mov    %esp,%ebp
+    if (priority == 0)
+c010b0c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b0c8:	75 11                	jne    c010b0db <lab6_set_priority+0x1a>
+        current->lab6_priority = 1;
+c010b0ca:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b0cf:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
+c010b0d6:	00 00 00 
+    else
+        current->lab6_priority = priority;
+}
+c010b0d9:	eb 0e                	jmp    c010b0e9 <lab6_set_priority+0x28>
+        current->lab6_priority = priority;
+c010b0db:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b0e0:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b0e3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+}
+c010b0e9:	90                   	nop
+c010b0ea:	5d                   	pop    %ebp
+c010b0eb:	c3                   	ret    
+
+c010b0ec <__intr_save>:
+__intr_save(void) {
+c010b0ec:	55                   	push   %ebp
+c010b0ed:	89 e5                	mov    %esp,%ebp
+c010b0ef:	83 ec 18             	sub    $0x18,%esp
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010b0f2:	9c                   	pushf  
+c010b0f3:	58                   	pop    %eax
+c010b0f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010b0f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010b0fa:	25 00 02 00 00       	and    $0x200,%eax
+c010b0ff:	85 c0                	test   %eax,%eax
+c010b101:	74 0c                	je     c010b10f <__intr_save+0x23>
+        intr_disable();
+c010b103:	e8 e8 70 ff ff       	call   c01021f0 <intr_disable>
+        return 1;
+c010b108:	b8 01 00 00 00       	mov    $0x1,%eax
+c010b10d:	eb 05                	jmp    c010b114 <__intr_save+0x28>
+    return 0;
+c010b10f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b114:	c9                   	leave  
+c010b115:	c3                   	ret    
+
+c010b116 <__intr_restore>:
+__intr_restore(bool flag) {
+c010b116:	55                   	push   %ebp
+c010b117:	89 e5                	mov    %esp,%ebp
+c010b119:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010b11c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b120:	74 05                	je     c010b127 <__intr_restore+0x11>
+        intr_enable();
+c010b122:	e8 c2 70 ff ff       	call   c01021e9 <intr_enable>
+}
+c010b127:	90                   	nop
+c010b128:	c9                   	leave  
+c010b129:	c3                   	ret    
+
+c010b12a <sched_class_enqueue>:
+static struct sched_class *sched_class;
+
+static struct run_queue *rq;
+
+static inline void
+sched_class_enqueue(struct proc_struct *proc) {
+c010b12a:	55                   	push   %ebp
+c010b12b:	89 e5                	mov    %esp,%ebp
+c010b12d:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010b130:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010b135:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b138:	74 1a                	je     c010b154 <sched_class_enqueue+0x2a>
+        sched_class->enqueue(rq, proc);
+c010b13a:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b13f:	8b 40 08             	mov    0x8(%eax),%eax
+c010b142:	8b 15 64 70 1b c0    	mov    0xc01b7064,%edx
+c010b148:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b14b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b14f:	89 14 24             	mov    %edx,(%esp)
+c010b152:	ff d0                	call   *%eax
+    }
+}
+c010b154:	90                   	nop
+c010b155:	c9                   	leave  
+c010b156:	c3                   	ret    
+
+c010b157 <sched_class_dequeue>:
+
+static inline void
+sched_class_dequeue(struct proc_struct *proc) {
+c010b157:	55                   	push   %ebp
+c010b158:	89 e5                	mov    %esp,%ebp
+c010b15a:	83 ec 18             	sub    $0x18,%esp
+    sched_class->dequeue(rq, proc);
+c010b15d:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b162:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b165:	8b 15 64 70 1b c0    	mov    0xc01b7064,%edx
+c010b16b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b16e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b172:	89 14 24             	mov    %edx,(%esp)
+c010b175:	ff d0                	call   *%eax
+}
+c010b177:	90                   	nop
+c010b178:	c9                   	leave  
+c010b179:	c3                   	ret    
+
+c010b17a <sched_class_pick_next>:
+
+static inline struct proc_struct *
+sched_class_pick_next(void) {
+c010b17a:	55                   	push   %ebp
+c010b17b:	89 e5                	mov    %esp,%ebp
+c010b17d:	83 ec 18             	sub    $0x18,%esp
+    return sched_class->pick_next(rq);
+c010b180:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b185:	8b 40 10             	mov    0x10(%eax),%eax
+c010b188:	8b 15 64 70 1b c0    	mov    0xc01b7064,%edx
+c010b18e:	89 14 24             	mov    %edx,(%esp)
+c010b191:	ff d0                	call   *%eax
+}
+c010b193:	c9                   	leave  
+c010b194:	c3                   	ret    
+
+c010b195 <sched_class_proc_tick>:
+
+void
+sched_class_proc_tick(struct proc_struct *proc) {
+c010b195:	55                   	push   %ebp
+c010b196:	89 e5                	mov    %esp,%ebp
+c010b198:	83 ec 18             	sub    $0x18,%esp
+    if (proc != idleproc) {
+c010b19b:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010b1a0:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b1a3:	74 1c                	je     c010b1c1 <sched_class_proc_tick+0x2c>
+        sched_class->proc_tick(rq, proc);
+c010b1a5:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b1aa:	8b 40 14             	mov    0x14(%eax),%eax
+c010b1ad:	8b 15 64 70 1b c0    	mov    0xc01b7064,%edx
+c010b1b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+c010b1b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+c010b1ba:	89 14 24             	mov    %edx,(%esp)
+c010b1bd:	ff d0                	call   *%eax
+    }
+    else {
+        proc->need_resched = 1;
+    }
+}
+c010b1bf:	eb 0a                	jmp    c010b1cb <sched_class_proc_tick+0x36>
+        proc->need_resched = 1;
+c010b1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1c4:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+}
+c010b1cb:	90                   	nop
+c010b1cc:	c9                   	leave  
+c010b1cd:	c3                   	ret    
+
+c010b1ce <sched_init>:
+
+static struct run_queue __rq;
+
+void
+sched_init(void) {
+c010b1ce:	55                   	push   %ebp
+c010b1cf:	89 e5                	mov    %esp,%ebp
+c010b1d1:	83 ec 28             	sub    $0x28,%esp
+c010b1d4:	c7 45 f4 58 70 1b c0 	movl   $0xc01b7058,-0xc(%ebp)
+c010b1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1de:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b1e1:	89 50 04             	mov    %edx,0x4(%eax)
+c010b1e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1e7:	8b 50 04             	mov    0x4(%eax),%edx
+c010b1ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b1ed:	89 10                	mov    %edx,(%eax)
+    list_init(&timer_list);
+
+    sched_class = &default_sched_class;
+c010b1ef:	c7 05 60 70 1b c0 74 	movl   $0xc012ea74,0xc01b7060
+c010b1f6:	ea 12 c0 
+
+    rq = &__rq;
+c010b1f9:	c7 05 64 70 1b c0 68 	movl   $0xc01b7068,0xc01b7064
+c010b200:	70 1b c0 
+    rq->max_time_slice = MAX_TIME_SLICE;
+c010b203:	a1 64 70 1b c0       	mov    0xc01b7064,%eax
+c010b208:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+    sched_class->init(rq);
+c010b20f:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b214:	8b 40 04             	mov    0x4(%eax),%eax
+c010b217:	8b 15 64 70 1b c0    	mov    0xc01b7064,%edx
+c010b21d:	89 14 24             	mov    %edx,(%esp)
+c010b220:	ff d0                	call   *%eax
+
+    cprintf("sched class: %s\n", sched_class->name);
+c010b222:	a1 60 70 1b c0       	mov    0xc01b7060,%eax
+c010b227:	8b 00                	mov    (%eax),%eax
+c010b229:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b22d:	c7 04 24 0b ec 10 c0 	movl   $0xc010ec0b,(%esp)
+c010b234:	e8 75 50 ff ff       	call   c01002ae <cprintf>
+}
+c010b239:	90                   	nop
+c010b23a:	c9                   	leave  
+c010b23b:	c3                   	ret    
+
+c010b23c <wakeup_proc>:
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010b23c:	55                   	push   %ebp
+c010b23d:	89 e5                	mov    %esp,%ebp
+c010b23f:	83 ec 28             	sub    $0x28,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010b242:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b245:	8b 00                	mov    (%eax),%eax
+c010b247:	83 f8 03             	cmp    $0x3,%eax
+c010b24a:	75 24                	jne    c010b270 <wakeup_proc+0x34>
+c010b24c:	c7 44 24 0c 1c ec 10 	movl   $0xc010ec1c,0xc(%esp)
+c010b253:	c0 
+c010b254:	c7 44 24 08 37 ec 10 	movl   $0xc010ec37,0x8(%esp)
+c010b25b:	c0 
+c010b25c:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
+c010b263:	00 
+c010b264:	c7 04 24 4c ec 10 c0 	movl   $0xc010ec4c,(%esp)
+c010b26b:	e8 95 51 ff ff       	call   c0100405 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b270:	e8 77 fe ff ff       	call   c010b0ec <__intr_save>
+c010b275:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010b278:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b27b:	8b 00                	mov    (%eax),%eax
+c010b27d:	83 f8 02             	cmp    $0x2,%eax
+c010b280:	74 2a                	je     c010b2ac <wakeup_proc+0x70>
+            proc->state = PROC_RUNNABLE;
+c010b282:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b285:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010b28b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b28e:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+            if (proc != current) {
+c010b295:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b29a:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b29d:	74 29                	je     c010b2c8 <wakeup_proc+0x8c>
+                sched_class_enqueue(proc);
+c010b29f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b2a2:	89 04 24             	mov    %eax,(%esp)
+c010b2a5:	e8 80 fe ff ff       	call   c010b12a <sched_class_enqueue>
+c010b2aa:	eb 1c                	jmp    c010b2c8 <wakeup_proc+0x8c>
+            }
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010b2ac:	c7 44 24 08 62 ec 10 	movl   $0xc010ec62,0x8(%esp)
+c010b2b3:	c0 
+c010b2b4:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
+c010b2bb:	00 
+c010b2bc:	c7 04 24 4c ec 10 c0 	movl   $0xc010ec4c,(%esp)
+c010b2c3:	e8 bb 51 ff ff       	call   c0100483 <__warn>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b2c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b2cb:	89 04 24             	mov    %eax,(%esp)
+c010b2ce:	e8 43 fe ff ff       	call   c010b116 <__intr_restore>
+}
+c010b2d3:	90                   	nop
+c010b2d4:	c9                   	leave  
+c010b2d5:	c3                   	ret    
+
+c010b2d6 <schedule>:
+
+void
+schedule(void) {
+c010b2d6:	55                   	push   %ebp
+c010b2d7:	89 e5                	mov    %esp,%ebp
+c010b2d9:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    struct proc_struct *next;
+    local_intr_save(intr_flag);
+c010b2dc:	e8 0b fe ff ff       	call   c010b0ec <__intr_save>
+c010b2e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        current->need_resched = 0;
+c010b2e4:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b2e9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        if (current->state == PROC_RUNNABLE) {
+c010b2f0:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b2f5:	8b 00                	mov    (%eax),%eax
+c010b2f7:	83 f8 02             	cmp    $0x2,%eax
+c010b2fa:	75 0d                	jne    c010b309 <schedule+0x33>
+            sched_class_enqueue(current);
+c010b2fc:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b301:	89 04 24             	mov    %eax,(%esp)
+c010b304:	e8 21 fe ff ff       	call   c010b12a <sched_class_enqueue>
+        }
+        if ((next = sched_class_pick_next()) != NULL) {
+c010b309:	e8 6c fe ff ff       	call   c010b17a <sched_class_pick_next>
+c010b30e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b311:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b315:	74 0b                	je     c010b322 <schedule+0x4c>
+            sched_class_dequeue(next);
+c010b317:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b31a:	89 04 24             	mov    %eax,(%esp)
+c010b31d:	e8 35 fe ff ff       	call   c010b157 <sched_class_dequeue>
+        }
+        if (next == NULL) {
+c010b322:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b326:	75 08                	jne    c010b330 <schedule+0x5a>
+            next = idleproc;
+c010b328:	a1 20 50 1b c0       	mov    0xc01b5020,%eax
+c010b32d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        next->runs ++;
+c010b330:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b333:	8b 40 08             	mov    0x8(%eax),%eax
+c010b336:	8d 50 01             	lea    0x1(%eax),%edx
+c010b339:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b33c:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010b33f:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b344:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b347:	74 0b                	je     c010b354 <schedule+0x7e>
+            proc_run(next);
+c010b349:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b34c:	89 04 24             	mov    %eax,(%esp)
+c010b34f:	e8 6f e7 ff ff       	call   c0109ac3 <proc_run>
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b354:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b357:	89 04 24             	mov    %eax,(%esp)
+c010b35a:	e8 b7 fd ff ff       	call   c010b116 <__intr_restore>
+}
+c010b35f:	90                   	nop
+c010b360:	c9                   	leave  
+c010b361:	c3                   	ret    
+
+c010b362 <skew_heap_merge>:
+}
+
+static inline skew_heap_entry_t *
+skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                compare_f comp)
+{
+c010b362:	55                   	push   %ebp
+c010b363:	89 e5                	mov    %esp,%ebp
+c010b365:	83 ec 28             	sub    $0x28,%esp
+     if (a == NULL) return b;
+c010b368:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b36c:	75 08                	jne    c010b376 <skew_heap_merge+0x14>
+c010b36e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b371:	e9 bd 00 00 00       	jmp    c010b433 <skew_heap_merge+0xd1>
+     else if (b == NULL) return a;
+c010b376:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b37a:	75 08                	jne    c010b384 <skew_heap_merge+0x22>
+c010b37c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b37f:	e9 af 00 00 00       	jmp    c010b433 <skew_heap_merge+0xd1>
+     
+     skew_heap_entry_t *l, *r;
+     if (comp(a, b) == -1)
+c010b384:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b387:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b38b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b38e:	89 04 24             	mov    %eax,(%esp)
+c010b391:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b394:	ff d0                	call   *%eax
+c010b396:	83 f8 ff             	cmp    $0xffffffff,%eax
+c010b399:	75 4d                	jne    c010b3e8 <skew_heap_merge+0x86>
+     {
+          r = a->left;
+c010b39b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b39e:	8b 40 04             	mov    0x4(%eax),%eax
+c010b3a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a->right, b, comp);
+c010b3a4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3a7:	8b 40 08             	mov    0x8(%eax),%eax
+c010b3aa:	8b 55 10             	mov    0x10(%ebp),%edx
+c010b3ad:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b3b1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b3b4:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b3b8:	89 04 24             	mov    %eax,(%esp)
+c010b3bb:	e8 a2 ff ff ff       	call   c010b362 <skew_heap_merge>
+c010b3c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          a->left = l;
+c010b3c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b3c9:	89 50 04             	mov    %edx,0x4(%eax)
+          a->right = r;
+c010b3cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b3d2:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = a;
+c010b3d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b3d9:	74 08                	je     c010b3e3 <skew_heap_merge+0x81>
+c010b3db:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b3de:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b3e1:	89 10                	mov    %edx,(%eax)
+
+          return a;
+c010b3e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3e6:	eb 4b                	jmp    c010b433 <skew_heap_merge+0xd1>
+     }
+     else
+     {
+          r = b->left;
+c010b3e8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b3eb:	8b 40 04             	mov    0x4(%eax),%eax
+c010b3ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a, b->right, comp);
+c010b3f1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b3f4:	8b 40 08             	mov    0x8(%eax),%eax
+c010b3f7:	8b 55 10             	mov    0x10(%ebp),%edx
+c010b3fa:	89 54 24 08          	mov    %edx,0x8(%esp)
+c010b3fe:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b402:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b405:	89 04 24             	mov    %eax,(%esp)
+c010b408:	e8 55 ff ff ff       	call   c010b362 <skew_heap_merge>
+c010b40d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          b->left = l;
+c010b410:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b413:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b416:	89 50 04             	mov    %edx,0x4(%eax)
+          b->right = r;
+c010b419:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b41c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b41f:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = b;
+c010b422:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b426:	74 08                	je     c010b430 <skew_heap_merge+0xce>
+c010b428:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b42b:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b42e:	89 10                	mov    %edx,(%eax)
+
+          return b;
+c010b430:	8b 45 0c             	mov    0xc(%ebp),%eax
+     }
+}
+c010b433:	c9                   	leave  
+c010b434:	c3                   	ret    
+
+c010b435 <proc_stride_comp_f>:
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+c010b435:	55                   	push   %ebp
+c010b436:	89 e5                	mov    %esp,%ebp
+c010b438:	83 ec 10             	sub    $0x10,%esp
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+c010b43b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b43e:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010b443:	89 45 fc             	mov    %eax,-0x4(%ebp)
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+c010b446:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b449:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010b44e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+     int32_t c = p->lab6_stride - q->lab6_stride;
+c010b451:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b454:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
+c010b45a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b45d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010b463:	29 c2                	sub    %eax,%edx
+c010b465:	89 d0                	mov    %edx,%eax
+c010b467:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     if (c > 0)
+c010b46a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b46e:	7e 07                	jle    c010b477 <proc_stride_comp_f+0x42>
+          return 1;
+c010b470:	b8 01 00 00 00       	mov    $0x1,%eax
+c010b475:	eb 12                	jmp    c010b489 <proc_stride_comp_f+0x54>
+     else if (c == 0)
+c010b477:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b47b:	75 07                	jne    c010b484 <proc_stride_comp_f+0x4f>
+          return 0;
+c010b47d:	b8 00 00 00 00       	mov    $0x0,%eax
+c010b482:	eb 05                	jmp    c010b489 <proc_stride_comp_f+0x54>
+     else
+          return -1;
+c010b484:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+c010b489:	c9                   	leave  
+c010b48a:	c3                   	ret    
+
+c010b48b <stride_init>:
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq)
+{
+c010b48b:	55                   	push   %ebp
+c010b48c:	89 e5                	mov    %esp,%ebp
+c010b48e:	83 ec 10             	sub    $0x10,%esp
+     /* LAB6: YOUR CODE 
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+     list_init(&(rq->run_list));
+c010b491:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b494:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010b497:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b49a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b49d:	89 50 04             	mov    %edx,0x4(%eax)
+c010b4a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b4a3:	8b 50 04             	mov    0x4(%eax),%edx
+c010b4a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b4a9:	89 10                	mov    %edx,(%eax)
+     rq->lab6_run_pool = NULL;
+c010b4ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b4ae:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+     rq->proc_num = 0;
+c010b4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b4b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010b4bf:	90                   	nop
+c010b4c0:	c9                   	leave  
+c010b4c1:	c3                   	ret    
+
+c010b4c2 <stride_enqueue>:
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc)
+{
+c010b4c2:	55                   	push   %ebp
+c010b4c3:	89 e5                	mov    %esp,%ebp
+c010b4c5:	83 ec 28             	sub    $0x28,%esp
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+     rq->lab6_run_pool = skew_heap_insert(
+c010b4c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b4cb:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
+c010b4d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b4d4:	8b 40 10             	mov    0x10(%eax),%eax
+c010b4d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b4da:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010b4dd:	c7 45 ec 35 b4 10 c0 	movl   $0xc010b435,-0x14(%ebp)
+c010b4e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b4e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     a->left = a->right = a->parent = NULL;
+c010b4ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b4ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+c010b4f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b4f6:	8b 10                	mov    (%eax),%edx
+c010b4f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b4fb:	89 50 08             	mov    %edx,0x8(%eax)
+c010b4fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b501:	8b 50 08             	mov    0x8(%eax),%edx
+c010b504:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b507:	89 50 04             	mov    %edx,0x4(%eax)
+static inline skew_heap_entry_t *
+skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_init(b);
+     return skew_heap_merge(a, b, comp);
+c010b50a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b50d:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b511:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b514:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b518:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b51b:	89 04 24             	mov    %eax,(%esp)
+c010b51e:	e8 3f fe ff ff       	call   c010b362 <skew_heap_merge>
+c010b523:	89 c2                	mov    %eax,%edx
+c010b525:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b528:	89 50 10             	mov    %edx,0x10(%eax)
+         rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice)
+c010b52b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b52e:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b534:	85 c0                	test   %eax,%eax
+c010b536:	74 13                	je     c010b54b <stride_enqueue+0x89>
+c010b538:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b53b:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
+c010b541:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b544:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b547:	39 c2                	cmp    %eax,%edx
+c010b549:	7e 0f                	jle    c010b55a <stride_enqueue+0x98>
+     {
+          proc->time_slice = rq->max_time_slice;
+c010b54b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b54e:	8b 50 0c             	mov    0xc(%eax),%edx
+c010b551:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b554:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+     }
+     proc->rq = rq;
+c010b55a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b55d:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b560:	89 50 7c             	mov    %edx,0x7c(%eax)
+     rq->proc_num++;
+c010b563:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b566:	8b 40 08             	mov    0x8(%eax),%eax
+c010b569:	8d 50 01             	lea    0x1(%eax),%edx
+c010b56c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b56f:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b572:	90                   	nop
+c010b573:	c9                   	leave  
+c010b574:	c3                   	ret    
+
+c010b575 <stride_dequeue>:
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc)
+{
+c010b575:	55                   	push   %ebp
+c010b576:	89 e5                	mov    %esp,%ebp
+c010b578:	83 ec 38             	sub    $0x38,%esp
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+     rq->lab6_run_pool = skew_heap_remove(
+c010b57b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b57e:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
+c010b584:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b587:	8b 40 10             	mov    0x10(%eax),%eax
+c010b58a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b58d:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010b590:	c7 45 ec 35 b4 10 c0 	movl   $0xc010b435,-0x14(%ebp)
+
+static inline skew_heap_entry_t *
+skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_entry_t *p   = b->parent;
+c010b597:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b59a:	8b 00                	mov    (%eax),%eax
+c010b59c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
+c010b59f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b5a2:	8b 50 08             	mov    0x8(%eax),%edx
+c010b5a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b5a8:	8b 40 04             	mov    0x4(%eax),%eax
+c010b5ab:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010b5ae:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+c010b5b2:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010b5b6:	89 04 24             	mov    %eax,(%esp)
+c010b5b9:	e8 a4 fd ff ff       	call   c010b362 <skew_heap_merge>
+c010b5be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     if (rep) rep->parent = p;
+c010b5c1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010b5c5:	74 08                	je     c010b5cf <stride_dequeue+0x5a>
+c010b5c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b5ca:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b5cd:	89 10                	mov    %edx,(%eax)
+     
+     if (p)
+c010b5cf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b5d3:	74 24                	je     c010b5f9 <stride_dequeue+0x84>
+     {
+          if (p->left == b)
+c010b5d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b5d8:	8b 40 04             	mov    0x4(%eax),%eax
+c010b5db:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010b5de:	75 0b                	jne    c010b5eb <stride_dequeue+0x76>
+               p->left = rep;
+c010b5e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b5e3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b5e6:	89 50 04             	mov    %edx,0x4(%eax)
+c010b5e9:	eb 09                	jmp    c010b5f4 <stride_dequeue+0x7f>
+          else p->right = rep;
+c010b5eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b5ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b5f1:	89 50 08             	mov    %edx,0x8(%eax)
+          return a;
+c010b5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b5f7:	eb 03                	jmp    c010b5fc <stride_dequeue+0x87>
+     }
+     else return rep;
+c010b5f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b5fc:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b5ff:	89 42 10             	mov    %eax,0x10(%edx)
+         rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+     rq->proc_num--;
+c010b602:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b605:	8b 40 08             	mov    0x8(%eax),%eax
+c010b608:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b60b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b60e:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b611:	90                   	nop
+c010b612:	c9                   	leave  
+c010b613:	c3                   	ret    
+
+c010b614 <stride_pick_next>:
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq)
+{
+c010b614:	55                   	push   %ebp
+c010b615:	89 e5                	mov    %esp,%ebp
+c010b617:	53                   	push   %ebx
+c010b618:	83 ec 10             	sub    $0x10,%esp
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+     if (rq->lab6_run_pool == NULL)
+c010b61b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b61e:	8b 40 10             	mov    0x10(%eax),%eax
+c010b621:	85 c0                	test   %eax,%eax
+c010b623:	75 07                	jne    c010b62c <stride_pick_next+0x18>
+          return NULL;
+c010b625:	b8 00 00 00 00       	mov    $0x0,%eax
+c010b62a:	eb 62                	jmp    c010b68e <stride_pick_next+0x7a>
+     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
+c010b62c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b62f:	8b 40 10             	mov    0x10(%eax),%eax
+c010b632:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010b637:	89 45 f8             	mov    %eax,-0x8(%ebp)
+     if (p->lab6_priority == 0)
+c010b63a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b63d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010b643:	85 c0                	test   %eax,%eax
+c010b645:	75 1a                	jne    c010b661 <stride_pick_next+0x4d>
+          p->lab6_stride += BIG_STRIDE;
+c010b647:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b64a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010b650:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
+c010b656:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b659:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+c010b65f:	eb 2a                	jmp    c010b68b <stride_pick_next+0x77>
+     else
+          p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+c010b661:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b664:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
+c010b66a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b66d:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
+c010b673:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
+c010b678:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b67d:	f7 f3                	div    %ebx
+c010b67f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c010b682:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b685:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+     return p;
+c010b68b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010b68e:	83 c4 10             	add    $0x10,%esp
+c010b691:	5b                   	pop    %ebx
+c010b692:	5d                   	pop    %ebp
+c010b693:	c3                   	ret    
+
+c010b694 <stride_proc_tick>:
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc)
+{
+c010b694:	55                   	push   %ebp
+c010b695:	89 e5                	mov    %esp,%ebp
+     /* LAB6: YOUR CODE */
+     if (proc->time_slice > 0)
+c010b697:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b69a:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b6a0:	85 c0                	test   %eax,%eax
+c010b6a2:	7e 15                	jle    c010b6b9 <stride_proc_tick+0x25>
+     {
+          proc->time_slice--;
+c010b6a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b6a7:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b6ad:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b6b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b6b3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+     }
+     if (proc->time_slice == 0)
+c010b6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b6bc:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b6c2:	85 c0                	test   %eax,%eax
+c010b6c4:	75 0a                	jne    c010b6d0 <stride_proc_tick+0x3c>
+     {
+          proc->need_resched = 1;
+c010b6c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b6c9:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+     }
+}
+c010b6d0:	90                   	nop
+c010b6d1:	5d                   	pop    %ebp
+c010b6d2:	c3                   	ret    
+
+c010b6d3 <RR_init>:
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+static void
+RR_init(struct run_queue *rq) {
+c010b6d3:	55                   	push   %ebp
+c010b6d4:	89 e5                	mov    %esp,%ebp
+c010b6d6:	83 ec 10             	sub    $0x10,%esp
+    list_init(&(rq->run_list));
+c010b6d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010b6df:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b6e2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b6e5:	89 50 04             	mov    %edx,0x4(%eax)
+c010b6e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b6eb:	8b 50 04             	mov    0x4(%eax),%edx
+c010b6ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b6f1:	89 10                	mov    %edx,(%eax)
+    rq->proc_num = 0;
+c010b6f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010b6fd:	90                   	nop
+c010b6fe:	c9                   	leave  
+c010b6ff:	c3                   	ret    
+
+c010b700 <RR_enqueue>:
+
+static void
+RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+c010b700:	55                   	push   %ebp
+c010b701:	89 e5                	mov    %esp,%ebp
+c010b703:	83 ec 38             	sub    $0x38,%esp
+    assert(list_empty(&(proc->run_link)));
+c010b706:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b709:	83 e8 80             	sub    $0xffffff80,%eax
+c010b70c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return list->next == list;
+c010b70f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b712:	8b 40 04             	mov    0x4(%eax),%eax
+c010b715:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b718:	0f 94 c0             	sete   %al
+c010b71b:	0f b6 c0             	movzbl %al,%eax
+c010b71e:	85 c0                	test   %eax,%eax
+c010b720:	75 24                	jne    c010b746 <RR_enqueue+0x46>
+c010b722:	c7 44 24 0c 90 ec 10 	movl   $0xc010ec90,0xc(%esp)
+c010b729:	c0 
+c010b72a:	c7 44 24 08 ae ec 10 	movl   $0xc010ecae,0x8(%esp)
+c010b731:	c0 
+c010b732:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+c010b739:	00 
+c010b73a:	c7 04 24 c3 ec 10 c0 	movl   $0xc010ecc3,(%esp)
+c010b741:	e8 bf 4c ff ff       	call   c0100405 <__panic>
+    list_add_before(&(rq->run_list), &(proc->run_link));
+c010b746:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b749:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
+c010b74f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b752:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b755:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    __list_add(elm, listelm->prev, listelm);
+c010b758:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b75b:	8b 00                	mov    (%eax),%eax
+c010b75d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b760:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b763:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b766:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b769:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    prev->next = next->prev = elm;
+c010b76c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b76f:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b772:	89 10                	mov    %edx,(%eax)
+c010b774:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b777:	8b 10                	mov    (%eax),%edx
+c010b779:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b77c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010b77f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b782:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010b785:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010b788:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b78b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b78e:	89 10                	mov    %edx,(%eax)
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+c010b790:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b793:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b799:	85 c0                	test   %eax,%eax
+c010b79b:	74 13                	je     c010b7b0 <RR_enqueue+0xb0>
+c010b79d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7a0:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
+c010b7a6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7a9:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b7ac:	39 c2                	cmp    %eax,%edx
+c010b7ae:	7e 0f                	jle    c010b7bf <RR_enqueue+0xbf>
+        proc->time_slice = rq->max_time_slice;
+c010b7b0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7b3:	8b 50 0c             	mov    0xc(%eax),%edx
+c010b7b6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7b9:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+    }
+    proc->rq = rq;
+c010b7bf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7c2:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b7c5:	89 50 7c             	mov    %edx,0x7c(%eax)
+    rq->proc_num ++;
+c010b7c8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7cb:	8b 40 08             	mov    0x8(%eax),%eax
+c010b7ce:	8d 50 01             	lea    0x1(%eax),%edx
+c010b7d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7d4:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b7d7:	90                   	nop
+c010b7d8:	c9                   	leave  
+c010b7d9:	c3                   	ret    
+
+c010b7da <RR_dequeue>:
+
+static void
+RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+c010b7da:	55                   	push   %ebp
+c010b7db:	89 e5                	mov    %esp,%ebp
+c010b7dd:	83 ec 38             	sub    $0x38,%esp
+    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
+c010b7e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7e3:	83 e8 80             	sub    $0xffffff80,%eax
+c010b7e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return list->next == list;
+c010b7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b7ec:	8b 40 04             	mov    0x4(%eax),%eax
+c010b7ef:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b7f2:	0f 94 c0             	sete   %al
+c010b7f5:	0f b6 c0             	movzbl %al,%eax
+c010b7f8:	85 c0                	test   %eax,%eax
+c010b7fa:	75 0b                	jne    c010b807 <RR_dequeue+0x2d>
+c010b7fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7ff:	8b 40 7c             	mov    0x7c(%eax),%eax
+c010b802:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b805:	74 24                	je     c010b82b <RR_dequeue+0x51>
+c010b807:	c7 44 24 0c e4 ec 10 	movl   $0xc010ece4,0xc(%esp)
+c010b80e:	c0 
+c010b80f:	c7 44 24 08 ae ec 10 	movl   $0xc010ecae,0x8(%esp)
+c010b816:	c0 
+c010b817:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
+c010b81e:	00 
+c010b81f:	c7 04 24 c3 ec 10 c0 	movl   $0xc010ecc3,(%esp)
+c010b826:	e8 da 4b ff ff       	call   c0100405 <__panic>
+    list_del_init(&(proc->run_link));
+c010b82b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b82e:	83 e8 80             	sub    $0xffffff80,%eax
+c010b831:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b834:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b837:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    __list_del(listelm->prev, listelm->next);
+c010b83a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b83d:	8b 40 04             	mov    0x4(%eax),%eax
+c010b840:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b843:	8b 12                	mov    (%edx),%edx
+c010b845:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b848:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    prev->next = next;
+c010b84b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b84e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b851:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010b854:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b857:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b85a:	89 10                	mov    %edx,(%eax)
+c010b85c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b85f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    elm->prev = elm->next = elm;
+c010b862:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b865:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010b868:	89 50 04             	mov    %edx,0x4(%eax)
+c010b86b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b86e:	8b 50 04             	mov    0x4(%eax),%edx
+c010b871:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b874:	89 10                	mov    %edx,(%eax)
+    rq->proc_num --;
+c010b876:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b879:	8b 40 08             	mov    0x8(%eax),%eax
+c010b87c:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b87f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b882:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010b885:	90                   	nop
+c010b886:	c9                   	leave  
+c010b887:	c3                   	ret    
+
+c010b888 <RR_pick_next>:
+
+static struct proc_struct *
+RR_pick_next(struct run_queue *rq) {
+c010b888:	55                   	push   %ebp
+c010b889:	89 e5                	mov    %esp,%ebp
+c010b88b:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_next(&(rq->run_list));
+c010b88e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b891:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    return listelm->next;
+c010b894:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b897:	8b 40 04             	mov    0x4(%eax),%eax
+c010b89a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(rq->run_list)) {
+c010b89d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8a0:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c010b8a3:	74 08                	je     c010b8ad <RR_pick_next+0x25>
+        return le2proc(le, run_link);
+c010b8a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b8a8:	83 c0 80             	add    $0xffffff80,%eax
+c010b8ab:	eb 05                	jmp    c010b8b2 <RR_pick_next+0x2a>
+    }
+    return NULL;
+c010b8ad:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b8b2:	c9                   	leave  
+c010b8b3:	c3                   	ret    
+
+c010b8b4 <RR_proc_tick>:
+
+static void
+RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+c010b8b4:	55                   	push   %ebp
+c010b8b5:	89 e5                	mov    %esp,%ebp
+    if (proc->time_slice > 0) {
+c010b8b7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8ba:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b8c0:	85 c0                	test   %eax,%eax
+c010b8c2:	7e 15                	jle    c010b8d9 <RR_proc_tick+0x25>
+        proc->time_slice --;
+c010b8c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8c7:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b8cd:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b8d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8d3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+    }
+    if (proc->time_slice == 0) {
+c010b8d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8dc:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010b8e2:	85 c0                	test   %eax,%eax
+c010b8e4:	75 0a                	jne    c010b8f0 <RR_proc_tick+0x3c>
+        proc->need_resched = 1;
+c010b8e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b8e9:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010b8f0:	90                   	nop
+c010b8f1:	5d                   	pop    %ebp
+c010b8f2:	c3                   	ret    
+
+c010b8f3 <sys_exit>:
+#include <pmm.h>
+#include <assert.h>
+#include <clock.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010b8f3:	55                   	push   %ebp
+c010b8f4:	89 e5                	mov    %esp,%ebp
+c010b8f6:	83 ec 28             	sub    $0x28,%esp
+    int error_code = (int)arg[0];
+c010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8fc:	8b 00                	mov    (%eax),%eax
+c010b8fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010b901:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b904:	89 04 24             	mov    %eax,(%esp)
+c010b907:	e8 3a e8 ff ff       	call   c010a146 <do_exit>
+}
+c010b90c:	c9                   	leave  
+c010b90d:	c3                   	ret    
+
+c010b90e <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010b90e:	55                   	push   %ebp
+c010b90f:	89 e5                	mov    %esp,%ebp
+c010b911:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010b914:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b919:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010b91c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010b91f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b922:	8b 40 44             	mov    0x44(%eax),%eax
+c010b925:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010b928:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b92b:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b92f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b932:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b936:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+c010b93d:	e8 dd e6 ff ff       	call   c010a01f <do_fork>
+}
+c010b942:	c9                   	leave  
+c010b943:	c3                   	ret    
+
+c010b944 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010b944:	55                   	push   %ebp
+c010b945:	89 e5                	mov    %esp,%ebp
+c010b947:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b94a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b94d:	8b 00                	mov    (%eax),%eax
+c010b94f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010b952:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b955:	83 c0 04             	add    $0x4,%eax
+c010b958:	8b 00                	mov    (%eax),%eax
+c010b95a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010b95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b960:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b964:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b967:	89 04 24             	mov    %eax,(%esp)
+c010b96a:	e8 6d f1 ff ff       	call   c010aadc <do_wait>
+}
+c010b96f:	c9                   	leave  
+c010b970:	c3                   	ret    
+
+c010b971 <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010b971:	55                   	push   %ebp
+c010b972:	89 e5                	mov    %esp,%ebp
+c010b974:	83 ec 28             	sub    $0x28,%esp
+    const char *name = (const char *)arg[0];
+c010b977:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b97a:	8b 00                	mov    (%eax),%eax
+c010b97c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010b97f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b982:	83 c0 04             	add    $0x4,%eax
+c010b985:	8b 00                	mov    (%eax),%eax
+c010b987:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010b98a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b98d:	83 c0 08             	add    $0x8,%eax
+c010b990:	8b 00                	mov    (%eax),%eax
+c010b992:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010b995:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b998:	83 c0 0c             	add    $0xc,%eax
+c010b99b:	8b 00                	mov    (%eax),%eax
+c010b99d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010b9a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b9a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010b9a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b9aa:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010b9ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b9b1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010b9b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b9b8:	89 04 24             	mov    %eax,(%esp)
+c010b9bb:	e8 ce ef ff ff       	call   c010a98e <do_execve>
+}
+c010b9c0:	c9                   	leave  
+c010b9c1:	c3                   	ret    
+
+c010b9c2 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010b9c2:	55                   	push   %ebp
+c010b9c3:	89 e5                	mov    %esp,%ebp
+c010b9c5:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010b9c8:	e8 f9 f0 ff ff       	call   c010aac6 <do_yield>
+}
+c010b9cd:	c9                   	leave  
+c010b9ce:	c3                   	ret    
+
+c010b9cf <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010b9cf:	55                   	push   %ebp
+c010b9d0:	89 e5                	mov    %esp,%ebp
+c010b9d2:	83 ec 28             	sub    $0x28,%esp
+    int pid = (int)arg[0];
+c010b9d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b9d8:	8b 00                	mov    (%eax),%eax
+c010b9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010b9dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b9e0:	89 04 24             	mov    %eax,(%esp)
+c010b9e3:	e8 84 f2 ff ff       	call   c010ac6c <do_kill>
+}
+c010b9e8:	c9                   	leave  
+c010b9e9:	c3                   	ret    
+
+c010b9ea <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010b9ea:	55                   	push   %ebp
+c010b9eb:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010b9ed:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010b9f2:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010b9f5:	5d                   	pop    %ebp
+c010b9f6:	c3                   	ret    
+
+c010b9f7 <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010b9f7:	55                   	push   %ebp
+c010b9f8:	89 e5                	mov    %esp,%ebp
+c010b9fa:	83 ec 28             	sub    $0x28,%esp
+    int c = (int)arg[0];
+c010b9fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba00:	8b 00                	mov    (%eax),%eax
+c010ba02:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010ba05:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba08:	89 04 24             	mov    %eax,(%esp)
+c010ba0b:	e8 c4 48 ff ff       	call   c01002d4 <cputchar>
+    return 0;
+c010ba10:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ba15:	c9                   	leave  
+c010ba16:	c3                   	ret    
+
+c010ba17 <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010ba17:	55                   	push   %ebp
+c010ba18:	89 e5                	mov    %esp,%ebp
+c010ba1a:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010ba1d:	e8 0f 9a ff ff       	call   c0105431 <print_pgdir>
+    return 0;
+c010ba22:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ba27:	c9                   	leave  
+c010ba28:	c3                   	ret    
+
+c010ba29 <sys_gettime>:
+
+static int
+sys_gettime(uint32_t arg[]) {
+c010ba29:	55                   	push   %ebp
+c010ba2a:	89 e5                	mov    %esp,%ebp
+    return (int)ticks;
+c010ba2c:	a1 7c 70 1b c0       	mov    0xc01b707c,%eax
+}
+c010ba31:	5d                   	pop    %ebp
+c010ba32:	c3                   	ret    
+
+c010ba33 <sys_lab6_set_priority>:
+static int
+sys_lab6_set_priority(uint32_t arg[])
+{
+c010ba33:	55                   	push   %ebp
+c010ba34:	89 e5                	mov    %esp,%ebp
+c010ba36:	83 ec 28             	sub    $0x28,%esp
+    uint32_t priority = (uint32_t)arg[0];
+c010ba39:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ba3c:	8b 00                	mov    (%eax),%eax
+c010ba3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    lab6_set_priority(priority);
+c010ba41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba44:	89 04 24             	mov    %eax,(%esp)
+c010ba47:	e8 75 f6 ff ff       	call   c010b0c1 <lab6_set_priority>
+    return 0;
+c010ba4c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ba51:	c9                   	leave  
+c010ba52:	c3                   	ret    
+
+c010ba53 <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010ba53:	55                   	push   %ebp
+c010ba54:	89 e5                	mov    %esp,%ebp
+c010ba56:	83 ec 48             	sub    $0x48,%esp
+    struct trapframe *tf = current->tf;
+c010ba59:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010ba5e:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ba61:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010ba64:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba67:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010ba6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010ba6d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ba71:	78 60                	js     c010bad3 <syscall+0x80>
+c010ba73:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba76:	3d ff 00 00 00       	cmp    $0xff,%eax
+c010ba7b:	77 56                	ja     c010bad3 <syscall+0x80>
+        if (syscalls[num] != NULL) {
+c010ba7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba80:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
+c010ba87:	85 c0                	test   %eax,%eax
+c010ba89:	74 48                	je     c010bad3 <syscall+0x80>
+            arg[0] = tf->tf_regs.reg_edx;
+c010ba8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba8e:	8b 40 14             	mov    0x14(%eax),%eax
+c010ba91:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010ba94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba97:	8b 40 18             	mov    0x18(%eax),%eax
+c010ba9a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010ba9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010baa0:	8b 40 10             	mov    0x10(%eax),%eax
+c010baa3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010baa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010baa9:	8b 00                	mov    (%eax),%eax
+c010baab:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010baae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bab1:	8b 40 04             	mov    0x4(%eax),%eax
+c010bab4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010bab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010baba:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
+c010bac1:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010bac4:	89 14 24             	mov    %edx,(%esp)
+c010bac7:	ff d0                	call   *%eax
+c010bac9:	89 c2                	mov    %eax,%edx
+c010bacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bace:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010bad1:	eb 46                	jmp    c010bb19 <syscall+0xc6>
+        }
+    }
+    print_trapframe(tf);
+c010bad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bad6:	89 04 24             	mov    %eax,(%esp)
+c010bad9:	e8 8e 69 ff ff       	call   c010246c <print_trapframe>
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010bade:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010bae3:	8d 50 48             	lea    0x48(%eax),%edx
+c010bae6:	a1 28 50 1b c0       	mov    0xc01b5028,%eax
+c010baeb:	8b 40 04             	mov    0x4(%eax),%eax
+c010baee:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010baf2:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010baf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010baf9:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010bafd:	c7 44 24 08 18 ed 10 	movl   $0xc010ed18,0x8(%esp)
+c010bb04:	c0 
+c010bb05:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
+c010bb0c:	00 
+c010bb0d:	c7 04 24 44 ed 10 c0 	movl   $0xc010ed44,(%esp)
+c010bb14:	e8 ec 48 ff ff       	call   c0100405 <__panic>
+            num, current->pid, current->name);
+}
+c010bb19:	c9                   	leave  
+c010bb1a:	c3                   	ret    
+
+c010bb1b <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010bb1b:	55                   	push   %ebp
+c010bb1c:	89 e5                	mov    %esp,%ebp
+c010bb1e:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010bb21:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010bb28:	eb 03                	jmp    c010bb2d <strlen+0x12>
+        cnt ++;
+c010bb2a:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+c010bb2d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb30:	8d 50 01             	lea    0x1(%eax),%edx
+c010bb33:	89 55 08             	mov    %edx,0x8(%ebp)
+c010bb36:	0f b6 00             	movzbl (%eax),%eax
+c010bb39:	84 c0                	test   %al,%al
+c010bb3b:	75 ed                	jne    c010bb2a <strlen+0xf>
+    }
+    return cnt;
+c010bb3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010bb40:	c9                   	leave  
+c010bb41:	c3                   	ret    
+
+c010bb42 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010bb42:	55                   	push   %ebp
+c010bb43:	89 e5                	mov    %esp,%ebp
+c010bb45:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010bb48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010bb4f:	eb 03                	jmp    c010bb54 <strnlen+0x12>
+        cnt ++;
+c010bb51:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010bb54:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bb57:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010bb5a:	73 10                	jae    c010bb6c <strnlen+0x2a>
+c010bb5c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb5f:	8d 50 01             	lea    0x1(%eax),%edx
+c010bb62:	89 55 08             	mov    %edx,0x8(%ebp)
+c010bb65:	0f b6 00             	movzbl (%eax),%eax
+c010bb68:	84 c0                	test   %al,%al
+c010bb6a:	75 e5                	jne    c010bb51 <strnlen+0xf>
+    }
+    return cnt;
+c010bb6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010bb6f:	c9                   	leave  
+c010bb70:	c3                   	ret    
+
+c010bb71 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010bb71:	55                   	push   %ebp
+c010bb72:	89 e5                	mov    %esp,%ebp
+c010bb74:	57                   	push   %edi
+c010bb75:	56                   	push   %esi
+c010bb76:	83 ec 20             	sub    $0x20,%esp
+c010bb79:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bb7f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb82:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010bb85:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010bb88:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bb8b:	89 d1                	mov    %edx,%ecx
+c010bb8d:	89 c2                	mov    %eax,%edx
+c010bb8f:	89 ce                	mov    %ecx,%esi
+c010bb91:	89 d7                	mov    %edx,%edi
+c010bb93:	ac                   	lods   %ds:(%esi),%al
+c010bb94:	aa                   	stos   %al,%es:(%edi)
+c010bb95:	84 c0                	test   %al,%al
+c010bb97:	75 fa                	jne    c010bb93 <strcpy+0x22>
+c010bb99:	89 fa                	mov    %edi,%edx
+c010bb9b:	89 f1                	mov    %esi,%ecx
+c010bb9d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010bba0:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010bba3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010bba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+c010bba9:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010bbaa:	83 c4 20             	add    $0x20,%esp
+c010bbad:	5e                   	pop    %esi
+c010bbae:	5f                   	pop    %edi
+c010bbaf:	5d                   	pop    %ebp
+c010bbb0:	c3                   	ret    
+
+c010bbb1 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010bbb1:	55                   	push   %ebp
+c010bbb2:	89 e5                	mov    %esp,%ebp
+c010bbb4:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbba:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010bbbd:	eb 1e                	jmp    c010bbdd <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+c010bbbf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbc2:	0f b6 10             	movzbl (%eax),%edx
+c010bbc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bbc8:	88 10                	mov    %dl,(%eax)
+c010bbca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bbcd:	0f b6 00             	movzbl (%eax),%eax
+c010bbd0:	84 c0                	test   %al,%al
+c010bbd2:	74 03                	je     c010bbd7 <strncpy+0x26>
+            src ++;
+c010bbd4:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+c010bbd7:	ff 45 fc             	incl   -0x4(%ebp)
+c010bbda:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+c010bbdd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bbe1:	75 dc                	jne    c010bbbf <strncpy+0xe>
+    }
+    return dst;
+c010bbe3:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010bbe6:	c9                   	leave  
+c010bbe7:	c3                   	ret    
+
+c010bbe8 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010bbe8:	55                   	push   %ebp
+c010bbe9:	89 e5                	mov    %esp,%ebp
+c010bbeb:	57                   	push   %edi
+c010bbec:	56                   	push   %esi
+c010bbed:	83 ec 20             	sub    $0x20,%esp
+c010bbf0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bbf6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+c010bbfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bbff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bc02:	89 d1                	mov    %edx,%ecx
+c010bc04:	89 c2                	mov    %eax,%edx
+c010bc06:	89 ce                	mov    %ecx,%esi
+c010bc08:	89 d7                	mov    %edx,%edi
+c010bc0a:	ac                   	lods   %ds:(%esi),%al
+c010bc0b:	ae                   	scas   %es:(%edi),%al
+c010bc0c:	75 08                	jne    c010bc16 <strcmp+0x2e>
+c010bc0e:	84 c0                	test   %al,%al
+c010bc10:	75 f8                	jne    c010bc0a <strcmp+0x22>
+c010bc12:	31 c0                	xor    %eax,%eax
+c010bc14:	eb 04                	jmp    c010bc1a <strcmp+0x32>
+c010bc16:	19 c0                	sbb    %eax,%eax
+c010bc18:	0c 01                	or     $0x1,%al
+c010bc1a:	89 fa                	mov    %edi,%edx
+c010bc1c:	89 f1                	mov    %esi,%ecx
+c010bc1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010bc21:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010bc24:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+c010bc27:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+c010bc2a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010bc2b:	83 c4 20             	add    $0x20,%esp
+c010bc2e:	5e                   	pop    %esi
+c010bc2f:	5f                   	pop    %edi
+c010bc30:	5d                   	pop    %ebp
+c010bc31:	c3                   	ret    
+
+c010bc32 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010bc32:	55                   	push   %ebp
+c010bc33:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010bc35:	eb 09                	jmp    c010bc40 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+c010bc37:	ff 4d 10             	decl   0x10(%ebp)
+c010bc3a:	ff 45 08             	incl   0x8(%ebp)
+c010bc3d:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010bc40:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bc44:	74 1a                	je     c010bc60 <strncmp+0x2e>
+c010bc46:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc49:	0f b6 00             	movzbl (%eax),%eax
+c010bc4c:	84 c0                	test   %al,%al
+c010bc4e:	74 10                	je     c010bc60 <strncmp+0x2e>
+c010bc50:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc53:	0f b6 10             	movzbl (%eax),%edx
+c010bc56:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc59:	0f b6 00             	movzbl (%eax),%eax
+c010bc5c:	38 c2                	cmp    %al,%dl
+c010bc5e:	74 d7                	je     c010bc37 <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010bc60:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bc64:	74 18                	je     c010bc7e <strncmp+0x4c>
+c010bc66:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc69:	0f b6 00             	movzbl (%eax),%eax
+c010bc6c:	0f b6 d0             	movzbl %al,%edx
+c010bc6f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc72:	0f b6 00             	movzbl (%eax),%eax
+c010bc75:	0f b6 c0             	movzbl %al,%eax
+c010bc78:	29 c2                	sub    %eax,%edx
+c010bc7a:	89 d0                	mov    %edx,%eax
+c010bc7c:	eb 05                	jmp    c010bc83 <strncmp+0x51>
+c010bc7e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bc83:	5d                   	pop    %ebp
+c010bc84:	c3                   	ret    
+
+c010bc85 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010bc85:	55                   	push   %ebp
+c010bc86:	89 e5                	mov    %esp,%ebp
+c010bc88:	83 ec 04             	sub    $0x4,%esp
+c010bc8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc8e:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010bc91:	eb 13                	jmp    c010bca6 <strchr+0x21>
+        if (*s == c) {
+c010bc93:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc96:	0f b6 00             	movzbl (%eax),%eax
+c010bc99:	38 45 fc             	cmp    %al,-0x4(%ebp)
+c010bc9c:	75 05                	jne    c010bca3 <strchr+0x1e>
+            return (char *)s;
+c010bc9e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bca1:	eb 12                	jmp    c010bcb5 <strchr+0x30>
+        }
+        s ++;
+c010bca3:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+c010bca6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bca9:	0f b6 00             	movzbl (%eax),%eax
+c010bcac:	84 c0                	test   %al,%al
+c010bcae:	75 e3                	jne    c010bc93 <strchr+0xe>
+    }
+    return NULL;
+c010bcb0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bcb5:	c9                   	leave  
+c010bcb6:	c3                   	ret    
+
+c010bcb7 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010bcb7:	55                   	push   %ebp
+c010bcb8:	89 e5                	mov    %esp,%ebp
+c010bcba:	83 ec 04             	sub    $0x4,%esp
+c010bcbd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcc0:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010bcc3:	eb 0e                	jmp    c010bcd3 <strfind+0x1c>
+        if (*s == c) {
+c010bcc5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcc8:	0f b6 00             	movzbl (%eax),%eax
+c010bccb:	38 45 fc             	cmp    %al,-0x4(%ebp)
+c010bcce:	74 0f                	je     c010bcdf <strfind+0x28>
+            break;
+        }
+        s ++;
+c010bcd0:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+c010bcd3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcd6:	0f b6 00             	movzbl (%eax),%eax
+c010bcd9:	84 c0                	test   %al,%al
+c010bcdb:	75 e8                	jne    c010bcc5 <strfind+0xe>
+c010bcdd:	eb 01                	jmp    c010bce0 <strfind+0x29>
+            break;
+c010bcdf:	90                   	nop
+    }
+    return (char *)s;
+c010bce0:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010bce3:	c9                   	leave  
+c010bce4:	c3                   	ret    
+
+c010bce5 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010bce5:	55                   	push   %ebp
+c010bce6:	89 e5                	mov    %esp,%ebp
+c010bce8:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010bceb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010bcf2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010bcf9:	eb 03                	jmp    c010bcfe <strtol+0x19>
+        s ++;
+c010bcfb:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+c010bcfe:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd01:	0f b6 00             	movzbl (%eax),%eax
+c010bd04:	3c 20                	cmp    $0x20,%al
+c010bd06:	74 f3                	je     c010bcfb <strtol+0x16>
+c010bd08:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd0b:	0f b6 00             	movzbl (%eax),%eax
+c010bd0e:	3c 09                	cmp    $0x9,%al
+c010bd10:	74 e9                	je     c010bcfb <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010bd12:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd15:	0f b6 00             	movzbl (%eax),%eax
+c010bd18:	3c 2b                	cmp    $0x2b,%al
+c010bd1a:	75 05                	jne    c010bd21 <strtol+0x3c>
+        s ++;
+c010bd1c:	ff 45 08             	incl   0x8(%ebp)
+c010bd1f:	eb 14                	jmp    c010bd35 <strtol+0x50>
+    }
+    else if (*s == '-') {
+c010bd21:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd24:	0f b6 00             	movzbl (%eax),%eax
+c010bd27:	3c 2d                	cmp    $0x2d,%al
+c010bd29:	75 0a                	jne    c010bd35 <strtol+0x50>
+        s ++, neg = 1;
+c010bd2b:	ff 45 08             	incl   0x8(%ebp)
+c010bd2e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010bd35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bd39:	74 06                	je     c010bd41 <strtol+0x5c>
+c010bd3b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010bd3f:	75 22                	jne    c010bd63 <strtol+0x7e>
+c010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd44:	0f b6 00             	movzbl (%eax),%eax
+c010bd47:	3c 30                	cmp    $0x30,%al
+c010bd49:	75 18                	jne    c010bd63 <strtol+0x7e>
+c010bd4b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd4e:	40                   	inc    %eax
+c010bd4f:	0f b6 00             	movzbl (%eax),%eax
+c010bd52:	3c 78                	cmp    $0x78,%al
+c010bd54:	75 0d                	jne    c010bd63 <strtol+0x7e>
+        s += 2, base = 16;
+c010bd56:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010bd5a:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010bd61:	eb 29                	jmp    c010bd8c <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010bd63:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bd67:	75 16                	jne    c010bd7f <strtol+0x9a>
+c010bd69:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd6c:	0f b6 00             	movzbl (%eax),%eax
+c010bd6f:	3c 30                	cmp    $0x30,%al
+c010bd71:	75 0c                	jne    c010bd7f <strtol+0x9a>
+        s ++, base = 8;
+c010bd73:	ff 45 08             	incl   0x8(%ebp)
+c010bd76:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010bd7d:	eb 0d                	jmp    c010bd8c <strtol+0xa7>
+    }
+    else if (base == 0) {
+c010bd7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010bd83:	75 07                	jne    c010bd8c <strtol+0xa7>
+        base = 10;
+c010bd85:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010bd8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd8f:	0f b6 00             	movzbl (%eax),%eax
+c010bd92:	3c 2f                	cmp    $0x2f,%al
+c010bd94:	7e 1b                	jle    c010bdb1 <strtol+0xcc>
+c010bd96:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd99:	0f b6 00             	movzbl (%eax),%eax
+c010bd9c:	3c 39                	cmp    $0x39,%al
+c010bd9e:	7f 11                	jg     c010bdb1 <strtol+0xcc>
+            dig = *s - '0';
+c010bda0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bda3:	0f b6 00             	movzbl (%eax),%eax
+c010bda6:	0f be c0             	movsbl %al,%eax
+c010bda9:	83 e8 30             	sub    $0x30,%eax
+c010bdac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bdaf:	eb 48                	jmp    c010bdf9 <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010bdb1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdb4:	0f b6 00             	movzbl (%eax),%eax
+c010bdb7:	3c 60                	cmp    $0x60,%al
+c010bdb9:	7e 1b                	jle    c010bdd6 <strtol+0xf1>
+c010bdbb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdbe:	0f b6 00             	movzbl (%eax),%eax
+c010bdc1:	3c 7a                	cmp    $0x7a,%al
+c010bdc3:	7f 11                	jg     c010bdd6 <strtol+0xf1>
+            dig = *s - 'a' + 10;
+c010bdc5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdc8:	0f b6 00             	movzbl (%eax),%eax
+c010bdcb:	0f be c0             	movsbl %al,%eax
+c010bdce:	83 e8 57             	sub    $0x57,%eax
+c010bdd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bdd4:	eb 23                	jmp    c010bdf9 <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010bdd6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdd9:	0f b6 00             	movzbl (%eax),%eax
+c010bddc:	3c 40                	cmp    $0x40,%al
+c010bdde:	7e 3b                	jle    c010be1b <strtol+0x136>
+c010bde0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bde3:	0f b6 00             	movzbl (%eax),%eax
+c010bde6:	3c 5a                	cmp    $0x5a,%al
+c010bde8:	7f 31                	jg     c010be1b <strtol+0x136>
+            dig = *s - 'A' + 10;
+c010bdea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bded:	0f b6 00             	movzbl (%eax),%eax
+c010bdf0:	0f be c0             	movsbl %al,%eax
+c010bdf3:	83 e8 37             	sub    $0x37,%eax
+c010bdf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010bdf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bdfc:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010bdff:	7d 19                	jge    c010be1a <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+c010be01:	ff 45 08             	incl   0x8(%ebp)
+c010be04:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be07:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010be0b:	89 c2                	mov    %eax,%edx
+c010be0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010be10:	01 d0                	add    %edx,%eax
+c010be12:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+c010be15:	e9 72 ff ff ff       	jmp    c010bd8c <strtol+0xa7>
+            break;
+c010be1a:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+c010be1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010be1f:	74 08                	je     c010be29 <strtol+0x144>
+        *endptr = (char *) s;
+c010be21:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be24:	8b 55 08             	mov    0x8(%ebp),%edx
+c010be27:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010be29:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010be2d:	74 07                	je     c010be36 <strtol+0x151>
+c010be2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be32:	f7 d8                	neg    %eax
+c010be34:	eb 03                	jmp    c010be39 <strtol+0x154>
+c010be36:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010be39:	c9                   	leave  
+c010be3a:	c3                   	ret    
+
+c010be3b <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010be3b:	55                   	push   %ebp
+c010be3c:	89 e5                	mov    %esp,%ebp
+c010be3e:	57                   	push   %edi
+c010be3f:	83 ec 24             	sub    $0x24,%esp
+c010be42:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be45:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010be48:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010be4c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010be4f:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010be52:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010be55:	8b 45 10             	mov    0x10(%ebp),%eax
+c010be58:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010be5b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010be5e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010be62:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010be65:	89 d7                	mov    %edx,%edi
+c010be67:	f3 aa                	rep stos %al,%es:(%edi)
+c010be69:	89 fa                	mov    %edi,%edx
+c010be6b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010be6e:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010be71:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be74:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010be75:	83 c4 24             	add    $0x24,%esp
+c010be78:	5f                   	pop    %edi
+c010be79:	5d                   	pop    %ebp
+c010be7a:	c3                   	ret    
+
+c010be7b <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010be7b:	55                   	push   %ebp
+c010be7c:	89 e5                	mov    %esp,%ebp
+c010be7e:	57                   	push   %edi
+c010be7f:	56                   	push   %esi
+c010be80:	53                   	push   %ebx
+c010be81:	83 ec 30             	sub    $0x30,%esp
+c010be84:	8b 45 08             	mov    0x8(%ebp),%eax
+c010be87:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010be8a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010be90:	8b 45 10             	mov    0x10(%ebp),%eax
+c010be93:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010be96:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010be99:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010be9c:	73 42                	jae    c010bee0 <memmove+0x65>
+c010be9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bea1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010bea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bea7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010beaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bead:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010beb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010beb3:	c1 e8 02             	shr    $0x2,%eax
+c010beb6:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+c010beb8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010bebb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010bebe:	89 d7                	mov    %edx,%edi
+c010bec0:	89 c6                	mov    %eax,%esi
+c010bec2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010bec4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010bec7:	83 e1 03             	and    $0x3,%ecx
+c010beca:	74 02                	je     c010bece <memmove+0x53>
+c010becc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010bece:	89 f0                	mov    %esi,%eax
+c010bed0:	89 fa                	mov    %edi,%edx
+c010bed2:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010bed5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010bed8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+c010bedb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+c010bede:	eb 36                	jmp    c010bf16 <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010bee0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bee3:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010bee6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bee9:	01 c2                	add    %eax,%edx
+c010beeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010beee:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010bef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bef4:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+c010bef7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010befa:	89 c1                	mov    %eax,%ecx
+c010befc:	89 d8                	mov    %ebx,%eax
+c010befe:	89 d6                	mov    %edx,%esi
+c010bf00:	89 c7                	mov    %eax,%edi
+c010bf02:	fd                   	std    
+c010bf03:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010bf05:	fc                   	cld    
+c010bf06:	89 f8                	mov    %edi,%eax
+c010bf08:	89 f2                	mov    %esi,%edx
+c010bf0a:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010bf0d:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010bf10:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+c010bf13:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010bf16:	83 c4 30             	add    $0x30,%esp
+c010bf19:	5b                   	pop    %ebx
+c010bf1a:	5e                   	pop    %esi
+c010bf1b:	5f                   	pop    %edi
+c010bf1c:	5d                   	pop    %ebp
+c010bf1d:	c3                   	ret    
+
+c010bf1e <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010bf1e:	55                   	push   %ebp
+c010bf1f:	89 e5                	mov    %esp,%ebp
+c010bf21:	57                   	push   %edi
+c010bf22:	56                   	push   %esi
+c010bf23:	83 ec 20             	sub    $0x20,%esp
+c010bf26:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf29:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bf2c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bf2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010bf32:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bf35:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010bf38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010bf3b:	c1 e8 02             	shr    $0x2,%eax
+c010bf3e:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+c010bf40:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bf43:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bf46:	89 d7                	mov    %edx,%edi
+c010bf48:	89 c6                	mov    %eax,%esi
+c010bf4a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010bf4c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010bf4f:	83 e1 03             	and    $0x3,%ecx
+c010bf52:	74 02                	je     c010bf56 <memcpy+0x38>
+c010bf54:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010bf56:	89 f0                	mov    %esi,%eax
+c010bf58:	89 fa                	mov    %edi,%edx
+c010bf5a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010bf5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010bf60:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+c010bf63:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+c010bf66:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010bf67:	83 c4 20             	add    $0x20,%esp
+c010bf6a:	5e                   	pop    %esi
+c010bf6b:	5f                   	pop    %edi
+c010bf6c:	5d                   	pop    %ebp
+c010bf6d:	c3                   	ret    
+
+c010bf6e <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010bf6e:	55                   	push   %ebp
+c010bf6f:	89 e5                	mov    %esp,%ebp
+c010bf71:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010bf74:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf77:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010bf7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bf7d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010bf80:	eb 2e                	jmp    c010bfb0 <memcmp+0x42>
+        if (*s1 != *s2) {
+c010bf82:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bf85:	0f b6 10             	movzbl (%eax),%edx
+c010bf88:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bf8b:	0f b6 00             	movzbl (%eax),%eax
+c010bf8e:	38 c2                	cmp    %al,%dl
+c010bf90:	74 18                	je     c010bfaa <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010bf92:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bf95:	0f b6 00             	movzbl (%eax),%eax
+c010bf98:	0f b6 d0             	movzbl %al,%edx
+c010bf9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bf9e:	0f b6 00             	movzbl (%eax),%eax
+c010bfa1:	0f b6 c0             	movzbl %al,%eax
+c010bfa4:	29 c2                	sub    %eax,%edx
+c010bfa6:	89 d0                	mov    %edx,%eax
+c010bfa8:	eb 18                	jmp    c010bfc2 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+c010bfaa:	ff 45 fc             	incl   -0x4(%ebp)
+c010bfad:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+c010bfb0:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bfb3:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010bfb6:	89 55 10             	mov    %edx,0x10(%ebp)
+c010bfb9:	85 c0                	test   %eax,%eax
+c010bfbb:	75 c5                	jne    c010bf82 <memcmp+0x14>
+    }
+    return 0;
+c010bfbd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bfc2:	c9                   	leave  
+c010bfc3:	c3                   	ret    
+
+c010bfc4 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010bfc4:	55                   	push   %ebp
+c010bfc5:	89 e5                	mov    %esp,%ebp
+c010bfc7:	83 ec 58             	sub    $0x58,%esp
+c010bfca:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bfcd:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010bfd0:	8b 45 14             	mov    0x14(%ebp),%eax
+c010bfd3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010bfd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010bfd9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010bfdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010bfdf:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010bfe2:	8b 45 18             	mov    0x18(%ebp),%eax
+c010bfe5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010bfe8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bfeb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010bfee:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010bff1:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010bff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bff7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bffa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010bffe:	74 1c                	je     c010c01c <printnum+0x58>
+c010c000:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c003:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c008:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c00b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010c00e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c011:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c016:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c019:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c01c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c01f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c022:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c025:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c028:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010c02b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c02e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010c031:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c034:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010c037:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c03a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010c03d:	8b 45 18             	mov    0x18(%ebp),%eax
+c010c040:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c045:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+c010c048:	72 56                	jb     c010c0a0 <printnum+0xdc>
+c010c04a:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+c010c04d:	77 05                	ja     c010c054 <printnum+0x90>
+c010c04f:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+c010c052:	72 4c                	jb     c010c0a0 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010c054:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010c057:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c05a:	8b 45 20             	mov    0x20(%ebp),%eax
+c010c05d:	89 44 24 18          	mov    %eax,0x18(%esp)
+c010c061:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010c065:	8b 45 18             	mov    0x18(%ebp),%eax
+c010c068:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010c06c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c06f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c072:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c076:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010c07a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c07d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c081:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c084:	89 04 24             	mov    %eax,(%esp)
+c010c087:	e8 38 ff ff ff       	call   c010bfc4 <printnum>
+c010c08c:	eb 1b                	jmp    c010c0a9 <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010c08e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c091:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c095:	8b 45 20             	mov    0x20(%ebp),%eax
+c010c098:	89 04 24             	mov    %eax,(%esp)
+c010c09b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c09e:	ff d0                	call   *%eax
+        while (-- width > 0)
+c010c0a0:	ff 4d 1c             	decl   0x1c(%ebp)
+c010c0a3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010c0a7:	7f e5                	jg     c010c08e <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010c0a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010c0ac:	05 64 ee 10 c0       	add    $0xc010ee64,%eax
+c010c0b1:	0f b6 00             	movzbl (%eax),%eax
+c010c0b4:	0f be c0             	movsbl %al,%eax
+c010c0b7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010c0ba:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010c0be:	89 04 24             	mov    %eax,(%esp)
+c010c0c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0c4:	ff d0                	call   *%eax
+}
+c010c0c6:	90                   	nop
+c010c0c7:	c9                   	leave  
+c010c0c8:	c3                   	ret    
+
+c010c0c9 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010c0c9:	55                   	push   %ebp
+c010c0ca:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010c0cc:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010c0d0:	7e 14                	jle    c010c0e6 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010c0d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0d5:	8b 00                	mov    (%eax),%eax
+c010c0d7:	8d 48 08             	lea    0x8(%eax),%ecx
+c010c0da:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c0dd:	89 0a                	mov    %ecx,(%edx)
+c010c0df:	8b 50 04             	mov    0x4(%eax),%edx
+c010c0e2:	8b 00                	mov    (%eax),%eax
+c010c0e4:	eb 30                	jmp    c010c116 <getuint+0x4d>
+    }
+    else if (lflag) {
+c010c0e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c0ea:	74 16                	je     c010c102 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010c0ec:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0ef:	8b 00                	mov    (%eax),%eax
+c010c0f1:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c0f4:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c0f7:	89 0a                	mov    %ecx,(%edx)
+c010c0f9:	8b 00                	mov    (%eax),%eax
+c010c0fb:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c100:	eb 14                	jmp    c010c116 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010c102:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c105:	8b 00                	mov    (%eax),%eax
+c010c107:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c10a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c10d:	89 0a                	mov    %ecx,(%edx)
+c010c10f:	8b 00                	mov    (%eax),%eax
+c010c111:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010c116:	5d                   	pop    %ebp
+c010c117:	c3                   	ret    
+
+c010c118 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010c118:	55                   	push   %ebp
+c010c119:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010c11b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010c11f:	7e 14                	jle    c010c135 <getint+0x1d>
+        return va_arg(*ap, long long);
+c010c121:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c124:	8b 00                	mov    (%eax),%eax
+c010c126:	8d 48 08             	lea    0x8(%eax),%ecx
+c010c129:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c12c:	89 0a                	mov    %ecx,(%edx)
+c010c12e:	8b 50 04             	mov    0x4(%eax),%edx
+c010c131:	8b 00                	mov    (%eax),%eax
+c010c133:	eb 28                	jmp    c010c15d <getint+0x45>
+    }
+    else if (lflag) {
+c010c135:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c139:	74 12                	je     c010c14d <getint+0x35>
+        return va_arg(*ap, long);
+c010c13b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c13e:	8b 00                	mov    (%eax),%eax
+c010c140:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c143:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c146:	89 0a                	mov    %ecx,(%edx)
+c010c148:	8b 00                	mov    (%eax),%eax
+c010c14a:	99                   	cltd   
+c010c14b:	eb 10                	jmp    c010c15d <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010c14d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c150:	8b 00                	mov    (%eax),%eax
+c010c152:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c155:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c158:	89 0a                	mov    %ecx,(%edx)
+c010c15a:	8b 00                	mov    (%eax),%eax
+c010c15c:	99                   	cltd   
+    }
+}
+c010c15d:	5d                   	pop    %ebp
+c010c15e:	c3                   	ret    
+
+c010c15f <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010c15f:	55                   	push   %ebp
+c010c160:	89 e5                	mov    %esp,%ebp
+c010c162:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010c165:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c168:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010c16b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c16e:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c172:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c175:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c179:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c17c:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c180:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c183:	89 04 24             	mov    %eax,(%esp)
+c010c186:	e8 03 00 00 00       	call   c010c18e <vprintfmt>
+    va_end(ap);
+}
+c010c18b:	90                   	nop
+c010c18c:	c9                   	leave  
+c010c18d:	c3                   	ret    
+
+c010c18e <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010c18e:	55                   	push   %ebp
+c010c18f:	89 e5                	mov    %esp,%ebp
+c010c191:	56                   	push   %esi
+c010c192:	53                   	push   %ebx
+c010c193:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010c196:	eb 17                	jmp    c010c1af <vprintfmt+0x21>
+            if (ch == '\0') {
+c010c198:	85 db                	test   %ebx,%ebx
+c010c19a:	0f 84 bf 03 00 00    	je     c010c55f <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+c010c1a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1a3:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c1a7:	89 1c 24             	mov    %ebx,(%esp)
+c010c1aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1ad:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010c1af:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c1b2:	8d 50 01             	lea    0x1(%eax),%edx
+c010c1b5:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c1b8:	0f b6 00             	movzbl (%eax),%eax
+c010c1bb:	0f b6 d8             	movzbl %al,%ebx
+c010c1be:	83 fb 25             	cmp    $0x25,%ebx
+c010c1c1:	75 d5                	jne    c010c198 <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010c1c3:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010c1c7:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010c1ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c1d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010c1d4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010c1db:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c1de:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010c1e1:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c1e4:	8d 50 01             	lea    0x1(%eax),%edx
+c010c1e7:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c1ea:	0f b6 00             	movzbl (%eax),%eax
+c010c1ed:	0f b6 d8             	movzbl %al,%ebx
+c010c1f0:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010c1f3:	83 f8 55             	cmp    $0x55,%eax
+c010c1f6:	0f 87 37 03 00 00    	ja     c010c533 <vprintfmt+0x3a5>
+c010c1fc:	8b 04 85 88 ee 10 c0 	mov    -0x3fef1178(,%eax,4),%eax
+c010c203:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010c205:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010c209:	eb d6                	jmp    c010c1e1 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010c20b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010c20f:	eb d0                	jmp    c010c1e1 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010c211:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010c218:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c21b:	89 d0                	mov    %edx,%eax
+c010c21d:	c1 e0 02             	shl    $0x2,%eax
+c010c220:	01 d0                	add    %edx,%eax
+c010c222:	01 c0                	add    %eax,%eax
+c010c224:	01 d8                	add    %ebx,%eax
+c010c226:	83 e8 30             	sub    $0x30,%eax
+c010c229:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010c22c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c22f:	0f b6 00             	movzbl (%eax),%eax
+c010c232:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010c235:	83 fb 2f             	cmp    $0x2f,%ebx
+c010c238:	7e 38                	jle    c010c272 <vprintfmt+0xe4>
+c010c23a:	83 fb 39             	cmp    $0x39,%ebx
+c010c23d:	7f 33                	jg     c010c272 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+c010c23f:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+c010c242:	eb d4                	jmp    c010c218 <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+c010c244:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c247:	8d 50 04             	lea    0x4(%eax),%edx
+c010c24a:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c24d:	8b 00                	mov    (%eax),%eax
+c010c24f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010c252:	eb 1f                	jmp    c010c273 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+c010c254:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c258:	79 87                	jns    c010c1e1 <vprintfmt+0x53>
+                width = 0;
+c010c25a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010c261:	e9 7b ff ff ff       	jmp    c010c1e1 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+c010c266:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010c26d:	e9 6f ff ff ff       	jmp    c010c1e1 <vprintfmt+0x53>
+            goto process_precision;
+c010c272:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+c010c273:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c277:	0f 89 64 ff ff ff    	jns    c010c1e1 <vprintfmt+0x53>
+                width = precision, precision = -1;
+c010c27d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c280:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c283:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010c28a:	e9 52 ff ff ff       	jmp    c010c1e1 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010c28f:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+c010c292:	e9 4a ff ff ff       	jmp    c010c1e1 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010c297:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c29a:	8d 50 04             	lea    0x4(%eax),%edx
+c010c29d:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c2a0:	8b 00                	mov    (%eax),%eax
+c010c2a2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010c2a5:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010c2a9:	89 04 24             	mov    %eax,(%esp)
+c010c2ac:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2af:	ff d0                	call   *%eax
+            break;
+c010c2b1:	e9 a4 02 00 00       	jmp    c010c55a <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010c2b6:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c2b9:	8d 50 04             	lea    0x4(%eax),%edx
+c010c2bc:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c2bf:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010c2c1:	85 db                	test   %ebx,%ebx
+c010c2c3:	79 02                	jns    c010c2c7 <vprintfmt+0x139>
+                err = -err;
+c010c2c5:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010c2c7:	83 fb 18             	cmp    $0x18,%ebx
+c010c2ca:	7f 0b                	jg     c010c2d7 <vprintfmt+0x149>
+c010c2cc:	8b 34 9d 00 ee 10 c0 	mov    -0x3fef1200(,%ebx,4),%esi
+c010c2d3:	85 f6                	test   %esi,%esi
+c010c2d5:	75 23                	jne    c010c2fa <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+c010c2d7:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+c010c2db:	c7 44 24 08 75 ee 10 	movl   $0xc010ee75,0x8(%esp)
+c010c2e2:	c0 
+c010c2e3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c2e6:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2ed:	89 04 24             	mov    %eax,(%esp)
+c010c2f0:	e8 6a fe ff ff       	call   c010c15f <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010c2f5:	e9 60 02 00 00       	jmp    c010c55a <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+c010c2fa:	89 74 24 0c          	mov    %esi,0xc(%esp)
+c010c2fe:	c7 44 24 08 7e ee 10 	movl   $0xc010ee7e,0x8(%esp)
+c010c305:	c0 
+c010c306:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c309:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c30d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c310:	89 04 24             	mov    %eax,(%esp)
+c010c313:	e8 47 fe ff ff       	call   c010c15f <printfmt>
+            break;
+c010c318:	e9 3d 02 00 00       	jmp    c010c55a <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010c31d:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c320:	8d 50 04             	lea    0x4(%eax),%edx
+c010c323:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c326:	8b 30                	mov    (%eax),%esi
+c010c328:	85 f6                	test   %esi,%esi
+c010c32a:	75 05                	jne    c010c331 <vprintfmt+0x1a3>
+                p = "(null)";
+c010c32c:	be 81 ee 10 c0       	mov    $0xc010ee81,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010c331:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c335:	7e 76                	jle    c010c3ad <vprintfmt+0x21f>
+c010c337:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010c33b:	74 70                	je     c010c3ad <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010c33d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c340:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c344:	89 34 24             	mov    %esi,(%esp)
+c010c347:	e8 f6 f7 ff ff       	call   c010bb42 <strnlen>
+c010c34c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010c34f:	29 c2                	sub    %eax,%edx
+c010c351:	89 d0                	mov    %edx,%eax
+c010c353:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c356:	eb 16                	jmp    c010c36e <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+c010c358:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010c35c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010c35f:	89 54 24 04          	mov    %edx,0x4(%esp)
+c010c363:	89 04 24             	mov    %eax,(%esp)
+c010c366:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c369:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010c36b:	ff 4d e8             	decl   -0x18(%ebp)
+c010c36e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c372:	7f e4                	jg     c010c358 <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010c374:	eb 37                	jmp    c010c3ad <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010c376:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010c37a:	74 1f                	je     c010c39b <vprintfmt+0x20d>
+c010c37c:	83 fb 1f             	cmp    $0x1f,%ebx
+c010c37f:	7e 05                	jle    c010c386 <vprintfmt+0x1f8>
+c010c381:	83 fb 7e             	cmp    $0x7e,%ebx
+c010c384:	7e 15                	jle    c010c39b <vprintfmt+0x20d>
+                    putch('?', putdat);
+c010c386:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c389:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c38d:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+c010c394:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c397:	ff d0                	call   *%eax
+c010c399:	eb 0f                	jmp    c010c3aa <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+c010c39b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c39e:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c3a2:	89 1c 24             	mov    %ebx,(%esp)
+c010c3a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3a8:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010c3aa:	ff 4d e8             	decl   -0x18(%ebp)
+c010c3ad:	89 f0                	mov    %esi,%eax
+c010c3af:	8d 70 01             	lea    0x1(%eax),%esi
+c010c3b2:	0f b6 00             	movzbl (%eax),%eax
+c010c3b5:	0f be d8             	movsbl %al,%ebx
+c010c3b8:	85 db                	test   %ebx,%ebx
+c010c3ba:	74 27                	je     c010c3e3 <vprintfmt+0x255>
+c010c3bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010c3c0:	78 b4                	js     c010c376 <vprintfmt+0x1e8>
+c010c3c2:	ff 4d e4             	decl   -0x1c(%ebp)
+c010c3c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010c3c9:	79 ab                	jns    c010c376 <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+c010c3cb:	eb 16                	jmp    c010c3e3 <vprintfmt+0x255>
+                putch(' ', putdat);
+c010c3cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c3d0:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c3d4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+c010c3db:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c3de:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+c010c3e0:	ff 4d e8             	decl   -0x18(%ebp)
+c010c3e3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c3e7:	7f e4                	jg     c010c3cd <vprintfmt+0x23f>
+            }
+            break;
+c010c3e9:	e9 6c 01 00 00       	jmp    c010c55a <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010c3ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c3f1:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c3f5:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c3f8:	89 04 24             	mov    %eax,(%esp)
+c010c3fb:	e8 18 fd ff ff       	call   c010c118 <getint>
+c010c400:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c403:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010c406:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c409:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c40c:	85 d2                	test   %edx,%edx
+c010c40e:	79 26                	jns    c010c436 <vprintfmt+0x2a8>
+                putch('-', putdat);
+c010c410:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c413:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c417:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+c010c41e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c421:	ff d0                	call   *%eax
+                num = -(long long)num;
+c010c423:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c426:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c429:	f7 d8                	neg    %eax
+c010c42b:	83 d2 00             	adc    $0x0,%edx
+c010c42e:	f7 da                	neg    %edx
+c010c430:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c433:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010c436:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010c43d:	e9 a8 00 00 00       	jmp    c010c4ea <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010c442:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c445:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c449:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c44c:	89 04 24             	mov    %eax,(%esp)
+c010c44f:	e8 75 fc ff ff       	call   c010c0c9 <getuint>
+c010c454:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c457:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010c45a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010c461:	e9 84 00 00 00       	jmp    c010c4ea <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010c466:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c469:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c46d:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c470:	89 04 24             	mov    %eax,(%esp)
+c010c473:	e8 51 fc ff ff       	call   c010c0c9 <getuint>
+c010c478:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c47b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010c47e:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010c485:	eb 63                	jmp    c010c4ea <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010c487:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c48a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c48e:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+c010c495:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c498:	ff d0                	call   *%eax
+            putch('x', putdat);
+c010c49a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c49d:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c4a1:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+c010c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c4ab:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010c4ad:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c4b0:	8d 50 04             	lea    0x4(%eax),%edx
+c010c4b3:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c4b6:	8b 00                	mov    (%eax),%eax
+c010c4b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c4bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010c4c2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010c4c9:	eb 1f                	jmp    c010c4ea <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010c4cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c4ce:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c4d2:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c4d5:	89 04 24             	mov    %eax,(%esp)
+c010c4d8:	e8 ec fb ff ff       	call   c010c0c9 <getuint>
+c010c4dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c4e0:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010c4e3:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010c4ea:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010c4ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c4f1:	89 54 24 18          	mov    %edx,0x18(%esp)
+c010c4f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010c4f8:	89 54 24 14          	mov    %edx,0x14(%esp)
+c010c4fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+c010c500:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c503:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c506:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c50a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+c010c50e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c511:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c515:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c518:	89 04 24             	mov    %eax,(%esp)
+c010c51b:	e8 a4 fa ff ff       	call   c010bfc4 <printnum>
+            break;
+c010c520:	eb 38                	jmp    c010c55a <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010c522:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c525:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c529:	89 1c 24             	mov    %ebx,(%esp)
+c010c52c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c52f:	ff d0                	call   *%eax
+            break;
+c010c531:	eb 27                	jmp    c010c55a <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010c533:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c536:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c53a:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+c010c541:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c544:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010c546:	ff 4d 10             	decl   0x10(%ebp)
+c010c549:	eb 03                	jmp    c010c54e <vprintfmt+0x3c0>
+c010c54b:	ff 4d 10             	decl   0x10(%ebp)
+c010c54e:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c551:	48                   	dec    %eax
+c010c552:	0f b6 00             	movzbl (%eax),%eax
+c010c555:	3c 25                	cmp    $0x25,%al
+c010c557:	75 f2                	jne    c010c54b <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+c010c559:	90                   	nop
+    while (1) {
+c010c55a:	e9 37 fc ff ff       	jmp    c010c196 <vprintfmt+0x8>
+                return;
+c010c55f:	90                   	nop
+        }
+    }
+}
+c010c560:	83 c4 40             	add    $0x40,%esp
+c010c563:	5b                   	pop    %ebx
+c010c564:	5e                   	pop    %esi
+c010c565:	5d                   	pop    %ebp
+c010c566:	c3                   	ret    
+
+c010c567 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010c567:	55                   	push   %ebp
+c010c568:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010c56a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c56d:	8b 40 08             	mov    0x8(%eax),%eax
+c010c570:	8d 50 01             	lea    0x1(%eax),%edx
+c010c573:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c576:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010c579:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c57c:	8b 10                	mov    (%eax),%edx
+c010c57e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c581:	8b 40 04             	mov    0x4(%eax),%eax
+c010c584:	39 c2                	cmp    %eax,%edx
+c010c586:	73 12                	jae    c010c59a <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010c588:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c58b:	8b 00                	mov    (%eax),%eax
+c010c58d:	8d 48 01             	lea    0x1(%eax),%ecx
+c010c590:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010c593:	89 0a                	mov    %ecx,(%edx)
+c010c595:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c598:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010c59a:	90                   	nop
+c010c59b:	5d                   	pop    %ebp
+c010c59c:	c3                   	ret    
+
+c010c59d <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010c59d:	55                   	push   %ebp
+c010c59e:	89 e5                	mov    %esp,%ebp
+c010c5a0:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010c5a3:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c5a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010c5a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5ac:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c5b0:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c5b3:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c5b7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c5ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c5be:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c5c1:	89 04 24             	mov    %eax,(%esp)
+c010c5c4:	e8 08 00 00 00       	call   c010c5d1 <vsnprintf>
+c010c5c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010c5cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010c5cf:	c9                   	leave  
+c010c5d0:	c3                   	ret    
+
+c010c5d1 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010c5d1:	55                   	push   %ebp
+c010c5d2:	89 e5                	mov    %esp,%ebp
+c010c5d4:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010c5d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c5da:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c5dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c5e0:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c5e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c5e6:	01 d0                	add    %edx,%eax
+c010c5e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c5eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010c5f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010c5f6:	74 0a                	je     c010c602 <vsnprintf+0x31>
+c010c5f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c5fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5fe:	39 c2                	cmp    %eax,%edx
+c010c600:	76 07                	jbe    c010c609 <vsnprintf+0x38>
+        return -E_INVAL;
+c010c602:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010c607:	eb 2a                	jmp    c010c633 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010c609:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c60c:	89 44 24 0c          	mov    %eax,0xc(%esp)
+c010c610:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c613:	89 44 24 08          	mov    %eax,0x8(%esp)
+c010c617:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010c61a:	89 44 24 04          	mov    %eax,0x4(%esp)
+c010c61e:	c7 04 24 67 c5 10 c0 	movl   $0xc010c567,(%esp)
+c010c625:	e8 64 fb ff ff       	call   c010c18e <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+c010c62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c62d:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010c630:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010c633:	c9                   	leave  
+c010c634:	c3                   	ret    
+
+c010c635 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010c635:	55                   	push   %ebp
+c010c636:	89 e5                	mov    %esp,%ebp
+c010c638:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010c63b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c63e:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010c644:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010c647:	b8 20 00 00 00       	mov    $0x20,%eax
+c010c64c:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010c64f:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010c652:	88 c1                	mov    %al,%cl
+c010c654:	d3 ea                	shr    %cl,%edx
+c010c656:	89 d0                	mov    %edx,%eax
+}
+c010c658:	c9                   	leave  
+c010c659:	c3                   	ret    
+
+c010c65a <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010c65a:	55                   	push   %ebp
+c010c65b:	89 e5                	mov    %esp,%ebp
+c010c65d:	57                   	push   %edi
+c010c65e:	56                   	push   %esi
+c010c65f:	53                   	push   %ebx
+c010c660:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010c663:	a1 a0 ee 12 c0       	mov    0xc012eea0,%eax
+c010c668:	8b 15 a4 ee 12 c0    	mov    0xc012eea4,%edx
+c010c66e:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010c674:	6b f0 05             	imul   $0x5,%eax,%esi
+c010c677:	01 fe                	add    %edi,%esi
+c010c679:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+c010c67e:	f7 e7                	mul    %edi
+c010c680:	01 d6                	add    %edx,%esi
+c010c682:	89 f2                	mov    %esi,%edx
+c010c684:	83 c0 0b             	add    $0xb,%eax
+c010c687:	83 d2 00             	adc    $0x0,%edx
+c010c68a:	89 c7                	mov    %eax,%edi
+c010c68c:	83 e7 ff             	and    $0xffffffff,%edi
+c010c68f:	89 f9                	mov    %edi,%ecx
+c010c691:	0f b7 da             	movzwl %dx,%ebx
+c010c694:	89 0d a0 ee 12 c0    	mov    %ecx,0xc012eea0
+c010c69a:	89 1d a4 ee 12 c0    	mov    %ebx,0xc012eea4
+    unsigned long long result = (next >> 12);
+c010c6a0:	8b 1d a0 ee 12 c0    	mov    0xc012eea0,%ebx
+c010c6a6:	8b 35 a4 ee 12 c0    	mov    0xc012eea4,%esi
+c010c6ac:	89 d8                	mov    %ebx,%eax
+c010c6ae:	89 f2                	mov    %esi,%edx
+c010c6b0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010c6b4:	c1 ea 0c             	shr    $0xc,%edx
+c010c6b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c6ba:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010c6bd:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010c6c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c6c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c6ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010c6cd:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010c6d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c6d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c6d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c6da:	74 1c                	je     c010c6f8 <rand+0x9e>
+c010c6dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c6df:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c6e4:	f7 75 dc             	divl   -0x24(%ebp)
+c010c6e7:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010c6ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c6ed:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c6f2:	f7 75 dc             	divl   -0x24(%ebp)
+c010c6f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c6f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010c6fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c6fe:	f7 75 dc             	divl   -0x24(%ebp)
+c010c701:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010c704:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010c707:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010c70a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010c70d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c710:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010c713:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010c716:	83 c4 24             	add    $0x24,%esp
+c010c719:	5b                   	pop    %ebx
+c010c71a:	5e                   	pop    %esi
+c010c71b:	5f                   	pop    %edi
+c010c71c:	5d                   	pop    %ebp
+c010c71d:	c3                   	ret    
+
+c010c71e <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010c71e:	55                   	push   %ebp
+c010c71f:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010c721:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c724:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c729:	a3 a0 ee 12 c0       	mov    %eax,0xc012eea0
+c010c72e:	89 15 a4 ee 12 c0    	mov    %edx,0xc012eea4
+}
+c010c734:	90                   	nop
+c010c735:	5d                   	pop    %ebp
+c010c736:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kernel.sym lab6/obj/kernel.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/kernel.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/kernel.sym	2020-05-24 08:40:23.910895289 +0000
@@ -0,0 +1,736 @@
+c0100000 .text
+c010c740 .rodata
+c010efe0 .stab
+c0125049 .stabstr
+c012c000 .data
+c01b2000 .data.pgdir
+c01b4000 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c010001e next
+c0100034 spin
+c01b3000 __boot_pt1
+00000400 i
+00000000 init.c
+c0100156 lab1_print_cur_status
+c01b4000 round.2011
+c0100214 lab1_switch_to_user
+c010021a lab1_switch_to_kernel
+c0100220 lab1_switch_test
+00000000 stdio.c
+c010025a cputch
+00000000 readline.c
+c01b4020 buf
+00000000 panic.c
+c01b4420 is_panic
+00000000 kdebug.c
+c01004d4 stab_binsearch
+c0100b86 read_eip
+00000000 kmonitor.c
+c012e000 commands
+c0100c5e parse
+c0100d15 runcmd
+00000000 ide.c
+c010ca6c channels
+c01b4440 ide_devices
+c0100ea9 ide_wait_ready
+00000000 clock.c
+00000000 console.c
+c0101751 __intr_save
+c010177b __intr_restore
+c010178f delay
+c01b4520 crt_buf
+c01b4524 crt_pos
+c01b4526 addr_6845
+c01017d8 cga_init
+c01b4528 serial_exists
+c01018bc serial_init
+c01019a0 lpt_putc_sub
+c0101a19 lpt_putc
+c0101a59 cga_putc
+c0101c3d serial_putc_sub
+c0101c96 serial_putc
+c01b4540 cons
+c0101cd6 cons_intr
+c0101d22 serial_proc_data
+c012e040 shiftcode
+c012e140 togglecode
+c012e240 normalmap
+c012e340 shiftmap
+c012e440 ctlmap
+c012e540 charcode
+c0101d97 kbd_proc_data
+c01b4748 shift.1650
+c0101f1b kbd_intr
+c0101f30 kbd_init
+00000000 picirq.c
+c012e550 irq_mask
+c01b474c did_init
+c0102023 pic_setmask
+00000000 intr.c
+00000000 trap.c
+c01021f7 print_ticks
+c01b4760 idt
+c012e560 idt_pd
+c0102426 trapname
+c010d060 excnames.1891
+c012e580 IA32flags
+c01026d7 print_pgfault
+c0102755 pgfault_handler
+c01b4f60 in_swap_tick_event
+c010281f trap_dispatch
+00000000 pmm.c
+c01036be page2ppn
+c01036d1 page2pa
+c01036e7 pa2page
+c010372c page2kva
+c0103780 pte2page
+c01037be pde2page
+c01037d6 page_ref
+c01037e0 set_page_ref
+c01037ee page_ref_inc
+c0103805 page_ref_dec
+c010381c __intr_save
+c0103846 __intr_restore
+c01b4fa0 ts
+c012ea00 gdt
+c012ea30 gdt_pd
+c010385a lgdt
+c010389e gdt_init
+c0103987 init_pmm_manager
+c01039bb init_memmap
+c0103aa4 page_init
+c0103e89 boot_map_segment
+c0103f8c boot_alloc_page
+c01048f8 check_alloc_page
+c0104917 check_pgdir
+c0104fb3 check_boot_pgdir
+c010424d page_remove_pte
+c010533d perm2str
+c01b5008 str.2038
+c010537f get_pgtable_items
+00000000 swap_fifo.c
+c01055a0 _fifo_init_mm
+c01055d2 _fifo_map_swappable
+c0105672 _fifo_swap_out_victim
+c010571d _fifo_check_swap
+c0105a72 _fifo_init
+c0105a7c _fifo_set_unswappable
+c0105a86 _fifo_tick_event
+00000000 vmm.c
+c0105a90 lock_init
+c0105a9f mm_count
+c0105aaa set_mm_count
+c0105ab9 pa2page
+c0105afe pde2page
+c0105c9b check_vma_overlap
+c01062b8 check_vmm
+c01062df check_vma_struct
+c0106771 check_pgfault
+00000000 kmalloc.c
+c0106cf2 __intr_save
+c0106d1c __intr_restore
+c0106d30 page2ppn
+c0106d43 page2pa
+c0106d59 pa2page
+c0106d9e page2kva
+c0106df2 kva2page
+c012ea60 arena
+c012ea68 slobfree
+c01b5010 bigblocks
+c0106e3c __slob_get_free_pages
+c0106e75 __slob_free_pages
+c0106eaa slob_alloc
+c010707f slob_free
+c01071dc find_order
+c01071ff __kmalloc
+00000000 swap.c
+c010744e pa2page
+c0107493 pte2page
+c01074d1 pde2page
+c01b501c sm
+c0107a12 check_swap
+c0107841 check_content_set
+c01079fa check_content_access
+00000000 default_pmm.c
+c01080ab page2ppn
+c01080be page2pa
+c01080d4 page_ref
+c01080de set_page_ref
+c01080ec default_init
+c010811a default_init_memmap
+c010826f default_alloc_pages
+c01083eb default_free_pages
+c01086bf default_nr_free_pages
+c01086c9 basic_check
+c0108c06 default_check
+00000000 swapfs.c
+c0109257 page2ppn
+c010926a page2pa
+c0109280 page2kva
+00000000 proc.c
+c0109441 test_and_set_bit
+c0109461 test_and_clear_bit
+c0109481 __intr_save
+c01094ab __intr_restore
+c01094bf try_lock
+c01094e2 lock
+c0109501 unlock
+c010953d page2ppn
+c0109550 page2pa
+c0109566 pa2page
+c01095ab page2kva
+c01095ff kva2page
+c0109649 mm_count_inc
+c0109663 mm_count_dec
+c010967d lock_mm
+c010969a unlock_mm
+c01b5040 hash_list
+c01b7040 nr_process
+c01096b7 alloc_proc
+c01b7044 name.1917
+c01098a8 set_links
+c010994c remove_links
+c01099ce get_pid
+c012ea6c last_pid.1933
+c012ea70 next_safe.1932
+c0109b39 forkret
+c0109b52 hash_proc
+c0109bcf unhash_proc
+c0109ce9 setup_kstack
+c0109d25 put_kstack
+c0109d4c setup_pgdir
+c0109df3 put_pgdir
+c0109e1a copy_mm
+c0109f39 copy_thread
+c010a315 load_icode
+c010acce kernel_execve
+c010ad08 user_main
+c010ad67 init_main
+c01b7054 lock.2016
+00000000 sched.c
+c010b0ec __intr_save
+c010b116 __intr_restore
+c01b7058 timer_list
+c01b7060 sched_class
+c01b7064 rq
+c010b12a sched_class_enqueue
+c010b157 sched_class_dequeue
+c010b17a sched_class_pick_next
+c01b7068 __rq
+00000000 default_sched_stride.c
+c010b362 skew_heap_merge
+c010b435 proc_stride_comp_f
+c010b48b stride_init
+c010b4c2 stride_enqueue
+c010b575 stride_dequeue
+c010b614 stride_pick_next
+c010b694 stride_proc_tick
+00000000 default_sched.c
+c010b6d3 RR_init
+c010b700 RR_enqueue
+c010b7da RR_dequeue
+c010b888 RR_pick_next
+c010b8b4 RR_proc_tick
+00000000 syscall.c
+c010b8f3 sys_exit
+c010b90e sys_fork
+c010b944 sys_wait
+c010b971 sys_exec
+c010b9c2 sys_yield
+c010b9cf sys_kill
+c010b9ea sys_getpid
+c010b9f7 sys_putc
+c010ba17 sys_pgdir
+c010ba29 sys_gettime
+c010ba33 sys_lab6_set_priority
+c012eaa0 syscalls
+00000000 string.c
+00000000 printfmt.c
+c010ee00 error_string
+c010bfc4 printnum
+c010c0c9 getuint
+c010c118 getint
+c010c567 sprintputch
+00000000 hash.c
+00000000 rand.c
+c012eea0 next
+c01035ee vector242
+c0103045 vector119
+c0100a4c print_kerninfo
+c0102f25 vector87
+c0102f1c vector86
+c010365a vector251
+c010bb71 strcpy
+c0101202 ide_device_valid
+c0102f49 vector91
+c0102d3f vector33
+c010322e vector162
+c0103492 vector213
+c0102fe2 vector108
+c0102d99 vector43
+000078c4 _binary_obj___user_yield_out_size
+c01071c8 slob_allocated
+c0100000 kern_entry
+c0100e97 mon_backtrace
+c0103252 vector165
+c0183120 _binary_obj___user_badsegment_out_start
+c0103342 vector185
+c0103021 vector115
+c0103060 vector122
+000078c4 _binary_obj___user_hello_out_size
+c0106207 copy_from_user
+c01a14b4 _binary_obj___user_forktest_out_end
+c010470f page_insert
+c01031e6 vector156
+c0103612 vector245
+c0103372 vector189
+c0102c63 vector7
+c0102e3b vector61
+c0102cee vector24
+c0102ffd vector111
+c01033f6 vector200
+0000791c _binary_obj___user_testbss_out_size
+c0102e71 vector67
+c010b23c wakeup_proc
+c01071d2 kallocated
+c0104824 pgdir_alloc_page
+c010310e vector138
+c0102eb0 vector74
+c010be7b memmove
+c0102e17 vector57
+c015c3e8 _binary_obj___user_exit_out_end
+c0105b16 mm_create
+c010c59d snprintf
+c010ba53 syscall
+c010246c print_trapframe
+c010349e vector214
+c010c18e vprintfmt
+c0102f91 vector99
+c01041f4 get_page
+c0103696 __alltraps
+c0101fb4 cons_getc
+c0103132 vector141
+c01004ca is_kernel_panic
+c01032a6 vector172
+c0100b97 print_stackframe
+c01035e2 vector241
+c01b70dc pra_list_head
+c0103672 vector253
+c0102c3f vector3
+c01036b8 forkrets
+c0102c36 vector2
+c010a01f do_fork
+c010353a vector227
+c0109c75 kernel_thread
+c010346e vector210
+c01b5020 idleproc
+c0103516 vector224
+c0102d87 vector41
+c012ea40 swap_manager_fifo
+c01002ae cprintf
+c0192304 _binary_obj___user_testbss_out_end
+c01b71d0 proc_list
+c0102cd3 vector21
+c01032e2 vector177
+c010303c vector118
+c0102e8c vector70
+c0105f15 mm_map
+c0102e83 vector69
+c01035b2 vector237
+c0102e56 vector64
+c0102d09 vector27
+c010602d dup_mmap
+c01062aa vmm_init
+c01030c6 vector132
+c013676c _binary_obj___user_badarg_out_start
+c010612e exit_mmap
+c010334e vector186
+000078c4 _binary_obj___user_badarg_out_size
+c01034c2 vector217
+c0105e72 mm_destroy
+c0109438 kernel_thread_entry
+c010aadc do_wait
+c010bf1e memcpy
+c0102c2d vector1
+c01032ee vector178
+c0102d6c vector38
+c0107310 kfree
+c01a8d78 _binary_obj___user_pgdir_out_end
+c01035be vector238
+c017b85c _binary_obj___user_yield_out_start
+c0100350 readline
+c012eea8 _binary_obj___user_hello_out_start
+c01030d2 vector133
+c0102ea7 vector73
+c0103156 vector144
+c010d12c vpd
+c0100036 kern_init
+c0154b0c _binary_obj___user_exit_out_start
+c010367e vector254
+c0102fa3 vector101
+c010347a vector211
+c01032be vector174
+c01035fa vector243
+c01044ac copy_range
+c0103096 vector128
+c01b16e4 _binary_obj___user_matrix_out_end
+c0102eef vector81
+c010b0c1 lab6_set_priority
+c0103a46 free_pages
+c0102c91 vector13
+c010c5d1 vsnprintf
+c0102de1 vector51
+c0102ca8 vector16
+c01b4000 edata
+c0101f4a cons_init
+c010776b swap_in
+c01014b4 ide_write_secs
+c01b70d0 pmm_manager
+c01035d6 vector240
+c0102dfc vector54
+c0102cc1 vector19
+c0125048 __STAB_END__
+c0102f52 vector92
+c0103606 vector244
+c01b5014 swap_init_ok
+c0103890 load_esp0
+c0103126 vector140
+c0102dab vector45
+c0102edd vector79
+c0103552 vector229
+c01074e9 swap_init
+c01031fe vector158
+c010207c pic_enable
+c01092d4 swapfs_init
+c01b7100 check_rp
+000078c8 _binary_obj___user_softint_out_size
+c01043a4 exit_range
+c0102d75 vector39
+c0103276 vector168
+c0173f98 _binary_obj___user_waitkill_out_end
+c0102d51 vector35
+c010300f vector113
+c0125049 __STABSTR_BEGIN__
+c010ac6c do_kill
+c010307b vector125
+c0100405 __panic
+c013676c _binary_obj___user_hello_out_end
+c01b5024 initproc
+c01034b6 vector216
+c0102e4d vector63
+c0102d00 vector26
+c0101d79 serial_intr
+c01033a2 vector193
+c01033c6 vector196
+c0100115 grade_backtrace0
+c0103462 vector209
+c0102c48 vector4
+c010328e vector170
+c010b2d6 schedule
+c01030f6 vector136
+c0102c7c vector10
+c016c610 _binary_obj___user_softint_out_end
+c010343e vector206
+c010368a vector255
+c0103312 vector181
+c0102e29 vector59
+c0100130 grade_backtrace
+c0102f13 vector85
+c0102f0a vector84
+c0109401 switch_to
+c010332a vector183
+c010320a vector159
+c0103486 vector212
+c0102dbd vector47
+c010bce5 strtol
+c0103546 vector228
+c0102d90 vector42
+c0103018 vector114
+c010bb42 strnlen
+c0164d48 _binary_obj___user_softint_out_start
+c014592c _binary_obj___user_faultread_out_start
+c01032ca vector175
+c010314a vector143
+c01030ae vector130
+c010e6b8 default_pmm_manager
+c010361e vector246
+c0102c73 vector9
+c010313e vector142
+c0102f9a vector100
+000078fc _binary_obj___user_forktree_out_size
+c010b195 sched_class_proc_tick
+c0103402 vector201
+c0102239 idt_init
+c0100ae3 print_debuginfo
+c0105bea find_vma
+c01b7120 swap_in_seq_no
+c013e030 _binary_obj___user_forktree_out_start
+c0102e32 vector60
+c0102ce5 vector23
+c01035a6 vector236
+c01b4f80 npage
+c01069b5 do_pgfault
+c010356a vector231
+00007918 _binary_obj___user_divzero_out_size
+c0109823 set_proc_name
+c0102e68 vector66
+c0102d1b vector29
+c0105431 print_pgdir
+c01030ea vector135
+c0100dca kmonitor
+000078c8 _binary_obj___user_badsegment_out_size
+c0102ecb vector77
+c0103306 vector180
+c01016ed clock_init
+c0103456 vector208
+c0102f88 vector98
+c0102f7f vector97
+c0103a79 nr_free_pages
+c01073ce ksize
+000078c4 _binary_obj___user_pgdir_out_size
+c01032d6 vector176
+c018a9e8 _binary_obj___user_testbss_out_start
+c01033ae vector194
+c0102d36 vector32
+c01b70d4 boot_cr3
+c01b71d8 end
+c01033ea vector199
+c010a146 do_exit
+c01030ba vector131
+c0103666 vector252
+c0102c24 vector0
+c0192304 _binary_obj___user_faultreadkernel_out_start
+c018a9e8 _binary_obj___user_badsegment_out_end
+c010bcb7 strfind
+00007988 _binary_obj___user_waitkill_out_size
+c0101f77 cons_putc
+c01b7160 swap_out_seq_no
+c010c737 etext
+c0103162 vector145
+c0102fd9 vector107
+c012e9e0 boot_pgdir
+c0102d7e vector40
+c01021e9 intr_enable
+c0102fac vector102
+c017b85c _binary_obj___user_spin_out_end
+c0102e0e vector56
+c0102e7a vector68
+c0102c5a vector6
+c010c65a rand
+c01030a2 vector129
+c01033d2 vector197
+c01031b6 vector152
+c012e5e0 __vectors
+c010355e vector230
+c010bc32 strncmp
+c0107199 slob_init
+c01040bb get_pte
+c0101240 ide_device_size
+c0102d63 vector37
+c01b7188 check_swap_addr
+c0103432 vector205
+c0103222 vector161
+c01b5028 current
+c010bbb1 strncpy
+c0106258 copy_to_user
+c0102e95 vector71
+c0103216 vector160
+c0199bd4 _binary_obj___user_forktest_out_start
+c01071ae kmalloc_init
+c01034aa vector215
+000078c4 _binary_obj___user_spin_out_size
+c01031f2 vector157
+c01021f0 intr_disable
+c010261f print_regs
+c0103006 vector112
+c01000c2 grade_backtrace2
+c010331e vector182
+c0102c8a vector12
+c010bf6e memcmp
+c0102feb vector109
+c0102cca vector20
+c0102df3 vector53
+c0102cb8 vector18
+c010b0a8 cpu_idle
+c0102f6d vector95
+c010a98e do_execve
+c010352e vector226
+c0102dcf vector49
+c0102da2 vector44
+c0102ed4 vector78
+c01032b2 vector173
+c010931d swapfs_read
+c0103033 vector117
+c0102457 trap_in_kernel
+c01075d6 swap_set_unswappable
+c0102ef8 vector82
+c01034fe vector222
+c0102c6c vector8
+c0103192 vector149
+c01002d4 cputchar
+c010be3b memset
+c0103576 vector232
+c010127b ide_read_secs
+c0102fd0 vector106
+c01034e6 vector220
+c0102f40 vector90
+c010323a vector163
+c010c71e srand
+c010358e vector234
+c01075a9 swap_map_swappable
+c0102e44 vector62
+c0102cf7 vector25
+c01033de vector198
+c010304e vector120
+c013e030 _binary_obj___user_badarg_out_end
+c0100337 getchar
+c01046ca page_remove
+c010c635 hash32
+c0102dd8 vector50
+c0102c9f vector15
+c01b5018 swap_out_num
+c010c15f printfmt
+c0199bd4 _binary_obj___user_faultreadkernel_out_end
+c010aac6 do_yield
+c01031aa vector151
+c0102f01 vector83
+c0102f37 vector89
+c0102f2e vector88
+c0102b99 trap
+c01032fa vector179
+c0102d48 vector34
+c012b29e __STABSTR_END__
+c0102db4 vector46
+c010bbe8 strcmp
+c01030de vector134
+c010350a vector223
+c01034ce vector218
+c0100622 debuginfo_eip
+c01b719c max_swap_offset
+000078d0 _binary_obj___user_faultreadkernel_out_size
+c0105d40 insert_vma_struct
+c01020af pic_init
+c0103522 vector225
+c010335a vector187
+c0103fd0 pmm_init
+c0102d24 vector30
+c010308d vector127
+c01b707c ticks
+c0103396 vector192
+c010325e vector166
+c0102ec2 vector76
+c0102eb9 vector75
+c01033ba vector195
+c010319e vector150
+c0102e20 vector58
+c0103636 vector248
+c014592c _binary_obj___user_forktree_out_end
+c0103069 vector123
+c0102f76 vector96
+000078dc _binary_obj___user_exit_out_size
+c0102d2d vector31
+c010341a vector203
+c01039db alloc_pages
+c016c610 _binary_obj___user_waitkill_out_start
+c010311a vector139
+c01031c2 vector153
+c0103246 vector164
+c0164d48 _binary_obj___user_priority_out_end
+c0103057 vector121
+c01b7080 switchk2u
+c0102c51 vector5
+c0173f98 _binary_obj___user_spin_out_start
+c010326a vector167
+c01031da vector155
+c0103642 vector249
+c010d128 vpt
+c010364e vector250
+c0103072 vector124
+c0102ff4 vector110
+c0103426 vector204
+c014d1f4 _binary_obj___user_faultread_out_end
+c01b71a0 swap_page
+c01a14b4 _binary_obj___user_pgdir_out_start
+c01036ad __trapret
+c01a8d78 _binary_obj___user_matrix_out_start
+c010027b vcprintf
+c0103102 vector137
+000078c8 _binary_obj___user_faultread_out_size
+c0100483 __warn
+c010362a vector247
+c0102cdc vector22
+c010340e vector202
+c0102e9e vector72
+c0102e05 vector55
+c01002e8 cputs
+c012e000 bootstacktop
+c0109c03 find_proc
+c0103084 vector126
+c0102e5f vector65
+c0102d12 vector28
+c0103282 vector169
+c0107591 swap_tick_event
+c0103582 vector233
+0000896c _binary_obj___user_matrix_out_size
+c01075f5 swap_out
+c01072f5 kmalloc
+c0154b0c _binary_obj___user_divzero_out_end
+c0105baf vma_create
+c010317a vector147
+c0109ac3 proc_run
+c012c000 bootstack
+c01b2000 __boot_pgdir
+c0102fbe vector104
+c01b71c4 free_area
+c010302a vector116
+c014d1f4 _binary_obj___user_divzero_out_start
+00008960 _binary_obj___user_priority_out_size
+c010938f swapfs_write
+c010efe0 __STAB_BEGIN__
+c0106bcf user_mem_check
+c010b1ce sched_init
+c01b71b4 check_ptep
+c0102dea vector52
+c0102cb1 vector17
+c0103336 vector184
+c010bb1b strlen
+c012ea74 default_sched_class
+c0109866 get_proc_name
+c015c3e8 _binary_obj___user_priority_out_start
+c01b500c pgfault_num
+c010344a vector207
+c0183120 _binary_obj___user_yield_out_end
+c010337e vector190
+c0100f02 ide_init
+c01035ca vector239
+c0102f64 vector94
+c0102f5b vector93
+c0103366 vector188
+c010bc85 strchr
+c0102dc6 vector48
+c01b70e4 check_mm_struct
+c0107579 swap_init_mm
+c01000e7 grade_backtrace1
+c01034da vector219
+c0103186 vector148
+c01034f2 vector221
+c0102ee6 vector80
+c010329a vector171
+c01031ce vector154
+c0102d5a vector36
+c01b70cc switchu2k
+c010359a vector235
+c0102fc7 vector105
+c0100e85 mon_kerninfo
+c01b70d8 pages
+c010316e vector146
+c01042af unmap_range
+c010338a vector191
+c010aeeb proc_init
+c0102fb5 vector103
+c0100e2a mon_help
+c0102c83 vector11
+000078e0 _binary_obj___user_forktest_out_size
+c01047c8 tlb_invalidate
+c0102c98 vector14
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/hash.d lab6/obj/libs/hash.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/hash.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/libs/hash.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/hash.o 和 lab6/obj/libs/hash.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/printfmt.d lab6/obj/libs/printfmt.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/printfmt.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/libs/printfmt.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/printfmt.o 和 lab6/obj/libs/printfmt.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/rand.d lab6/obj/libs/rand.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/rand.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/libs/rand.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/rand.o 和 lab6/obj/libs/rand.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/string.d lab6/obj/libs/string.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/string.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/libs/string.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/libs/string.o 和 lab6/obj/libs/string.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/sign/tools/sign.d lab6/obj/sign/tools/sign.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/sign/tools/sign.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/sign/tools/sign.d	2020-05-24 08:39:41.930255726 +0000
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/sign/tools/sign.o 和 lab6/obj/sign/tools/sign.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.asm lab6/obj/user/badarg.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badarg.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2449 @@
+
+obj/__user_badarg.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 11 80 00 	movl   $0x801120,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 11 80 00 	movl   $0x80113a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 11 80 00 	movl   $0x80113c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 11 80 00 	movl   $0x80113a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 11 80 00 	movl   $0x801158,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 12 80 00       	add    $0x801284,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 12 80 00 	mov    0x8012a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 12 80 00 	mov    0x801220(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 12 80 	movl   $0x801295,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 12 80 	movl   $0x80129e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 12 80 00       	mov    $0x8012a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  800fd4:	e8 45 f2 ff ff       	call   80021e <fork>
+  800fd9:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800fdd:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fe2:	75 32                	jne    801016 <main+0x4b>
+        cprintf("fork ok.\n");
+  800fe4:	c7 04 24 00 14 80 00 	movl   $0x801400,(%esp)
+  800feb:	e8 31 f3 ff ff       	call   800321 <cprintf>
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800ff0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800ff7:	00 
+  800ff8:	eb 09                	jmp    801003 <main+0x38>
+            yield();
+  800ffa:	e8 62 f2 ff ff       	call   800261 <yield>
+        for (i = 0; i < 10; i ++) {
+  800fff:	ff 44 24 1c          	incl   0x1c(%esp)
+  801003:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
+  801008:	7e f0                	jle    800ffa <main+0x2f>
+        }
+        exit(0xbeaf);
+  80100a:	c7 04 24 af be 00 00 	movl   $0xbeaf,(%esp)
+  801011:	e8 e9 f1 ff ff       	call   8001ff <exit>
+    }
+    assert(pid > 0);
+  801016:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  80101b:	7f 24                	jg     801041 <main+0x76>
+  80101d:	c7 44 24 0c 0a 14 80 	movl   $0x80140a,0xc(%esp)
+  801024:	00 
+  801025:	c7 44 24 08 12 14 80 	movl   $0x801412,0x8(%esp)
+  80102c:	00 
+  80102d:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
+  801034:	00 
+  801035:	c7 04 24 27 14 80 00 	movl   $0x801427,(%esp)
+  80103c:	e8 df ef ff ff       	call   800020 <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  801041:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801048:	00 
+  801049:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  801050:	e8 f2 f1 ff ff       	call   800247 <waitpid>
+  801055:	85 c0                	test   %eax,%eax
+  801057:	75 24                	jne    80107d <main+0xb2>
+  801059:	c7 44 24 0c 35 14 80 	movl   $0x801435,0xc(%esp)
+  801060:	00 
+  801061:	c7 44 24 08 12 14 80 	movl   $0x801412,0x8(%esp)
+  801068:	00 
+  801069:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
+  801070:	00 
+  801071:	c7 04 24 27 14 80 00 	movl   $0x801427,(%esp)
+  801078:	e8 a3 ef ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  80107d:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
+  801084:	c0 
+  801085:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801089:	89 04 24             	mov    %eax,(%esp)
+  80108c:	e8 b6 f1 ff ff       	call   800247 <waitpid>
+  801091:	85 c0                	test   %eax,%eax
+  801093:	75 24                	jne    8010b9 <main+0xee>
+  801095:	c7 44 24 0c 4c 14 80 	movl   $0x80144c,0xc(%esp)
+  80109c:	00 
+  80109d:	c7 44 24 08 12 14 80 	movl   $0x801412,0x8(%esp)
+  8010a4:	00 
+  8010a5:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
+  8010ac:	00 
+  8010ad:	c7 04 24 27 14 80 00 	movl   $0x801427,(%esp)
+  8010b4:	e8 67 ef ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  8010b9:	8d 44 24 14          	lea    0x14(%esp),%eax
+  8010bd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010c1:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010c5:	89 04 24             	mov    %eax,(%esp)
+  8010c8:	e8 7a f1 ff ff       	call   800247 <waitpid>
+  8010cd:	85 c0                	test   %eax,%eax
+  8010cf:	75 0b                	jne    8010dc <main+0x111>
+  8010d1:	8b 44 24 14          	mov    0x14(%esp),%eax
+  8010d5:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  8010da:	74 24                	je     801100 <main+0x135>
+  8010dc:	c7 44 24 0c 74 14 80 	movl   $0x801474,0xc(%esp)
+  8010e3:	00 
+  8010e4:	c7 44 24 08 12 14 80 	movl   $0x801412,0x8(%esp)
+  8010eb:	00 
+  8010ec:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  8010f3:	00 
+  8010f4:	c7 04 24 27 14 80 00 	movl   $0x801427,(%esp)
+  8010fb:	e8 20 ef ff ff       	call   800020 <__panic>
+    cprintf("badarg pass.\n");
+  801100:	c7 04 24 a9 14 80 00 	movl   $0x8014a9,(%esp)
+  801107:	e8 15 f2 ff ff       	call   800321 <cprintf>
+    return 0;
+  80110c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801111:	c9                   	leave  
+  801112:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.d lab6/obj/user/badarg.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badarg.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.o 和 lab6/obj/user/badarg.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.sym lab6/obj/user/badarg.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badarg.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badarg.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801120 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00203005 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801220 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badarg.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00203004 __STAB_END__
+00800171 sys_kill
+00203005 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203e88 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.asm lab6/obj/user/badsegment.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badsegment.asm	2020-05-24 08:39:42.074257923 +0000
@@ -0,0 +1,2366 @@
+
+obj/__user_badsegment.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 00 10 80 00 	movl   $0x801000,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 1a 10 80 00 	movl   $0x80101a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 1c 10 80 00 	movl   $0x80101c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 1a 10 80 00 	movl   $0x80101a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 38 10 80 00 	movl   $0x801038,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 64 11 80 00       	add    $0x801164,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 88 11 80 00 	mov    0x801188(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 00 11 80 00 	mov    0x801100(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 75 11 80 	movl   $0x801175,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 7e 11 80 	movl   $0x80117e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 81 11 80 00       	mov    $0x801181,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  800fd4:	66 b8 28 00          	mov    $0x28,%ax
+  800fd8:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  800fda:	c7 44 24 08 e0 12 80 	movl   $0x8012e0,0x8(%esp)
+  800fe1:	00 
+  800fe2:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  800fe9:	00 
+  800fea:	c7 04 24 eb 12 80 00 	movl   $0x8012eb,(%esp)
+  800ff1:	e8 2a f0 ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.d lab6/obj/user/badsegment.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badsegment.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.o 和 lab6/obj/user/badsegment.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.sym lab6/obj/user/badsegment.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/badsegment.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/badsegment.sym	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801000 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ee5 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801100 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badsegment.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ee4 __STAB_END__
+00800171 sys_kill
+00202ee5 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d52 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.asm lab6/obj/user/divzero.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/divzero.asm	2020-05-24 08:39:42.074257923 +0000
@@ -0,0 +1,2371 @@
+
+obj/__user_divzero.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 11 80 00       	add    $0x801184,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  800fd4:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  800fda:	b8 01 00 00 00       	mov    $0x1,%eax
+  800fdf:	99                   	cltd   
+  800fe0:	f7 f9                	idiv   %ecx
+  800fe2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fe6:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800fed:	e8 2f f3 ff ff       	call   800321 <cprintf>
+    panic("FAIL: T.T\n");
+  800ff2:	c7 44 24 08 0e 13 80 	movl   $0x80130e,0x8(%esp)
+  800ff9:	00 
+  800ffa:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
+  801001:	00 
+  801002:	c7 04 24 19 13 80 00 	movl   $0x801319,(%esp)
+  801009:	e8 12 f0 ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.d lab6/obj/user/divzero.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/divzero.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.o 和 lab6/obj/user/divzero.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.sym lab6/obj/user/divzero.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/divzero.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/divzero.sym	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,78 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202ef1 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 divzero.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ef0 __STAB_END__
+00800171 sys_kill
+00202ef1 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d67 __STABSTR_END__
+0080047c strcmp
+00802008 zero
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.asm lab6/obj/user/exit.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/exit.asm	2020-05-24 08:39:42.090258167 +0000
@@ -0,0 +1,2462 @@
+
+obj/__user_exit.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 40 11 80 00 	movl   $0x801140,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 5c 11 80 00 	movl   $0x80115c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 5a 11 80 00 	movl   $0x80115a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 78 11 80 00 	movl   $0x801178,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 a4 12 80 00       	add    $0x8012a4,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 c8 12 80 00 	mov    0x8012c8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 40 12 80 00 	mov    0x801240(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 b5 12 80 	movl   $0x8012b5,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 be 12 80 	movl   $0x8012be,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be c1 12 80 00       	mov    $0x8012c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  800fd4:	c7 04 24 20 14 80 00 	movl   $0x801420,(%esp)
+  800fdb:	e8 41 f3 ff ff       	call   800321 <cprintf>
+    if ((pid = fork()) == 0) {
+  800fe0:	e8 39 f2 ff ff       	call   80021e <fork>
+  800fe5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800fe9:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  800fee:	75 3c                	jne    80102c <main+0x61>
+        cprintf("I am the child.\n");
+  800ff0:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  800ff7:	e8 25 f3 ff ff       	call   800321 <cprintf>
+        yield();
+  800ffc:	e8 60 f2 ff ff       	call   800261 <yield>
+        yield();
+  801001:	e8 5b f2 ff ff       	call   800261 <yield>
+        yield();
+  801006:	e8 56 f2 ff ff       	call   800261 <yield>
+        yield();
+  80100b:	e8 51 f2 ff ff       	call   800261 <yield>
+        yield();
+  801010:	e8 4c f2 ff ff       	call   800261 <yield>
+        yield();
+  801015:	e8 47 f2 ff ff       	call   800261 <yield>
+        yield();
+  80101a:	e8 42 f2 ff ff       	call   800261 <yield>
+        exit(magic);
+  80101f:	a1 08 20 80 00       	mov    0x802008,%eax
+  801024:	89 04 24             	mov    %eax,(%esp)
+  801027:	e8 d3 f1 ff ff       	call   8001ff <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  80102c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801030:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801034:	c7 04 24 58 14 80 00 	movl   $0x801458,(%esp)
+  80103b:	e8 e1 f2 ff ff       	call   800321 <cprintf>
+    }
+    assert(pid > 0);
+  801040:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  801045:	7f 24                	jg     80106b <main+0xa0>
+  801047:	c7 44 24 0c 7a 14 80 	movl   $0x80147a,0xc(%esp)
+  80104e:	00 
+  80104f:	c7 44 24 08 82 14 80 	movl   $0x801482,0x8(%esp)
+  801056:	00 
+  801057:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%esp)
+  80105e:	00 
+  80105f:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  801066:	e8 b5 ef ff ff       	call   800020 <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  80106b:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  801072:	e8 aa f2 ff ff       	call   800321 <cprintf>
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  801077:	8d 44 24 18          	lea    0x18(%esp),%eax
+  80107b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80107f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801083:	89 04 24             	mov    %eax,(%esp)
+  801086:	e8 bc f1 ff ff       	call   800247 <waitpid>
+  80108b:	85 c0                	test   %eax,%eax
+  80108d:	75 0d                	jne    80109c <main+0xd1>
+  80108f:	8b 54 24 18          	mov    0x18(%esp),%edx
+  801093:	a1 08 20 80 00       	mov    0x802008,%eax
+  801098:	39 c2                	cmp    %eax,%edx
+  80109a:	74 24                	je     8010c0 <main+0xf5>
+  80109c:	c7 44 24 0c c4 14 80 	movl   $0x8014c4,0xc(%esp)
+  8010a3:	00 
+  8010a4:	c7 44 24 08 82 14 80 	movl   $0x801482,0x8(%esp)
+  8010ab:	00 
+  8010ac:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
+  8010b3:	00 
+  8010b4:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  8010bb:	e8 60 ef ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  8010c0:	8d 44 24 18          	lea    0x18(%esp),%eax
+  8010c4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010c8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010cc:	89 04 24             	mov    %eax,(%esp)
+  8010cf:	e8 73 f1 ff ff       	call   800247 <waitpid>
+  8010d4:	85 c0                	test   %eax,%eax
+  8010d6:	74 09                	je     8010e1 <main+0x116>
+  8010d8:	e8 4e f1 ff ff       	call   80022b <wait>
+  8010dd:	85 c0                	test   %eax,%eax
+  8010df:	75 24                	jne    801105 <main+0x13a>
+  8010e1:	c7 44 24 0c f0 14 80 	movl   $0x8014f0,0xc(%esp)
+  8010e8:	00 
+  8010e9:	c7 44 24 08 82 14 80 	movl   $0x801482,0x8(%esp)
+  8010f0:	00 
+  8010f1:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  8010f8:	00 
+  8010f9:	c7 04 24 97 14 80 00 	movl   $0x801497,(%esp)
+  801100:	e8 1b ef ff ff       	call   800020 <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  801105:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801109:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80110d:	c7 04 24 18 15 80 00 	movl   $0x801518,(%esp)
+  801114:	e8 08 f2 ff ff       	call   800321 <cprintf>
+
+    cprintf("exit pass.\n");
+  801119:	c7 04 24 28 15 80 00 	movl   $0x801528,(%esp)
+  801120:	e8 fc f1 ff ff       	call   800321 <cprintf>
+    return 0;
+  801125:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80112a:	c9                   	leave  
+  80112b:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.d lab6/obj/user/exit.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/exit.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.o 和 lab6/obj/user/exit.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.sym lab6/obj/user/exit.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/exit.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/exit.sym	2020-05-24 08:39:42.094258228 +0000
@@ -0,0 +1,77 @@
+00800020 .text
+00801140 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00203035 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801240 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 exit.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00203034 __STAB_END__
+00800171 sys_kill
+00203035 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203ebe __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+00802008 magic
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.asm lab6/obj/user/faultread.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultread.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2368 @@
+
+obj/__user_faultread.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 11 80 00       	add    $0x801184,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  800fd4:	b8 00 00 00 00       	mov    $0x0,%eax
+  800fd9:	8b 00                	mov    (%eax),%eax
+  800fdb:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fdf:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800fe6:	e8 36 f3 ff ff       	call   800321 <cprintf>
+    panic("FAIL: T.T\n");
+  800feb:	c7 44 24 08 14 13 80 	movl   $0x801314,0x8(%esp)
+  800ff2:	00 
+  800ff3:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800ffa:	00 
+  800ffb:	c7 04 24 1f 13 80 00 	movl   $0x80131f,(%esp)
+  801002:	e8 19 f0 ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.d lab6/obj/user/faultread.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultread.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.asm lab6/obj/user/faultreadkernel.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultreadkernel.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2368 @@
+
+obj/__user_faultreadkernel.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 11 80 00       	add    $0x801184,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  800fd4:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  800fd9:	8b 00                	mov    (%eax),%eax
+  800fdb:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fdf:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800fe6:	e8 36 f3 ff ff       	call   800321 <cprintf>
+    panic("FAIL: T.T\n");
+  800feb:	c7 44 24 08 1e 13 80 	movl   $0x80131e,0x8(%esp)
+  800ff2:	00 
+  800ff3:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800ffa:	00 
+  800ffb:	c7 04 24 29 13 80 00 	movl   $0x801329,(%esp)
+  801002:	e8 19 f0 ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.d lab6/obj/user/faultreadkernel.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultreadkernel.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.o 和 lab6/obj/user/faultreadkernel.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.sym lab6/obj/user/faultreadkernel.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultreadkernel.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultreadkernel.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ee5 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultreadkernel.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ee4 __STAB_END__
+00800171 sys_kill
+00202ee5 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d57 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.o 和 lab6/obj/user/faultread.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.sym lab6/obj/user/faultread.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/faultread.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/faultread.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ee5 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultread.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ee4 __STAB_END__
+00800171 sys_kill
+00202ee5 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d51 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.asm lab6/obj/user/forktest.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktest.asm	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,2448 @@
+
+obj/__user_forktest.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 e0 10 80 00 	movl   $0x8010e0,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 fc 10 80 00 	movl   $0x8010fc,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 18 11 80 00 	movl   $0x801118,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 44 12 80 00       	add    $0x801244,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 68 12 80 00 	mov    0x801268(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d e0 11 80 00 	mov    0x8011e0(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 55 12 80 	movl   $0x801255,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 5e 12 80 	movl   $0x80125e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 61 12 80 00       	mov    $0x801261,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800fd4:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fdb:	00 
+  800fdc:	eb 5f                	jmp    80103d <main+0x72>
+        if ((pid = fork()) == 0) {
+  800fde:	e8 3b f2 ff ff       	call   80021e <fork>
+  800fe3:	89 44 24 18          	mov    %eax,0x18(%esp)
+  800fe7:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  800fec:	75 20                	jne    80100e <main+0x43>
+            cprintf("I am child %d\n", n);
+  800fee:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800ff2:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ff6:	c7 04 24 c4 13 80 00 	movl   $0x8013c4,(%esp)
+  800ffd:	e8 1f f3 ff ff       	call   800321 <cprintf>
+            exit(0);
+  801002:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801009:	e8 f1 f1 ff ff       	call   8001ff <exit>
+        }
+        assert(pid > 0);
+  80100e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801013:	7f 24                	jg     801039 <main+0x6e>
+  801015:	c7 44 24 0c d3 13 80 	movl   $0x8013d3,0xc(%esp)
+  80101c:	00 
+  80101d:	c7 44 24 08 db 13 80 	movl   $0x8013db,0x8(%esp)
+  801024:	00 
+  801025:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  80102c:	00 
+  80102d:	c7 04 24 f0 13 80 00 	movl   $0x8013f0,(%esp)
+  801034:	e8 e7 ef ff ff       	call   800020 <__panic>
+    for (n = 0; n < max_child; n ++) {
+  801039:	ff 44 24 1c          	incl   0x1c(%esp)
+  80103d:	b8 20 00 00 00       	mov    $0x20,%eax
+  801042:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  801046:	7c 96                	jl     800fde <main+0x13>
+    }
+
+    if (n > max_child) {
+  801048:	b8 20 00 00 00       	mov    $0x20,%eax
+  80104d:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
+  801051:	7e 4d                	jle    8010a0 <main+0xd5>
+        panic("fork claimed to work %d times!\n", n);
+  801053:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801057:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  80105b:	c7 44 24 08 00 14 80 	movl   $0x801400,0x8(%esp)
+  801062:	00 
+  801063:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
+  80106a:	00 
+  80106b:	c7 04 24 f0 13 80 00 	movl   $0x8013f0,(%esp)
+  801072:	e8 a9 ef ff ff       	call   800020 <__panic>
+    }
+
+    for (; n > 0; n --) {
+        if (wait() != 0) {
+  801077:	e8 af f1 ff ff       	call   80022b <wait>
+  80107c:	85 c0                	test   %eax,%eax
+  80107e:	74 1c                	je     80109c <main+0xd1>
+            panic("wait stopped early\n");
+  801080:	c7 44 24 08 20 14 80 	movl   $0x801420,0x8(%esp)
+  801087:	00 
+  801088:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  80108f:	00 
+  801090:	c7 04 24 f0 13 80 00 	movl   $0x8013f0,(%esp)
+  801097:	e8 84 ef ff ff       	call   800020 <__panic>
+    for (; n > 0; n --) {
+  80109c:	ff 4c 24 1c          	decl   0x1c(%esp)
+  8010a0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  8010a5:	7f d0                	jg     801077 <main+0xac>
+        }
+    }
+
+    if (wait() == 0) {
+  8010a7:	e8 7f f1 ff ff       	call   80022b <wait>
+  8010ac:	85 c0                	test   %eax,%eax
+  8010ae:	75 1c                	jne    8010cc <main+0x101>
+        panic("wait got too many\n");
+  8010b0:	c7 44 24 08 34 14 80 	movl   $0x801434,0x8(%esp)
+  8010b7:	00 
+  8010b8:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
+  8010bf:	00 
+  8010c0:	c7 04 24 f0 13 80 00 	movl   $0x8013f0,(%esp)
+  8010c7:	e8 54 ef ff ff       	call   800020 <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  8010cc:	c7 04 24 47 14 80 00 	movl   $0x801447,(%esp)
+  8010d3:	e8 49 f2 ff ff       	call   800321 <cprintf>
+    return 0;
+  8010d8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010dd:	c9                   	leave  
+  8010de:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.d lab6/obj/user/forktest.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktest.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.o 和 lab6/obj/user/forktest.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.sym lab6/obj/user/forktest.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktest.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktest.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,77 @@
+00800020 .text
+008010e0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ff9 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008011e0 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktest.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ff8 __STAB_END__
+00800171 sys_kill
+00202ff9 __STABSTR_BEGIN__
+00800020 __panic
+008013c0 max_child
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203e87 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.asm lab6/obj/user/forktree.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktree.asm	2020-05-24 08:39:42.090258167 +0000
@@ -0,0 +1,2447 @@
+
+obj/__user_forktree.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 a0 10 80 00 	movl   $0x8010a0,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 ba 10 80 00 	movl   $0x8010ba,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 bc 10 80 00 	movl   $0x8010bc,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 ba 10 80 00 	movl   $0x8010ba,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 d8 10 80 00 	movl   $0x8010d8,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 e3 0c 00 00       	call   801084 <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 04 12 80 00       	add    $0x801204,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 28 12 80 00 	mov    0x801228(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d a0 11 80 00 	mov    0x8011a0(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 15 12 80 	movl   $0x801215,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 1e 12 80 	movl   $0x80121e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 21 12 80 00       	mov    $0x801221,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 ec 48             	sub    $0x48,%esp
+  800fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800fd4:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  800fd7:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fda:	89 04 24             	mov    %eax,(%esp)
+  800fdd:	e8 cd f3 ff ff       	call   8003af <strlen>
+  800fe2:	83 f8 03             	cmp    $0x3,%eax
+  800fe5:	77 4f                	ja     801036 <forkchild+0x6b>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  800fe7:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  800feb:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800fef:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ff2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ff6:	c7 44 24 08 80 13 80 	movl   $0x801380,0x8(%esp)
+  800ffd:	00 
+  800ffe:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
+  801005:	00 
+  801006:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  801009:	89 04 24             	mov    %eax,(%esp)
+  80100c:	e8 20 fe ff ff       	call   800e31 <snprintf>
+    if (fork() == 0) {
+  801011:	e8 08 f2 ff ff       	call   80021e <fork>
+  801016:	85 c0                	test   %eax,%eax
+  801018:	75 1d                	jne    801037 <forkchild+0x6c>
+        forktree(nxt);
+  80101a:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  80101d:	89 04 24             	mov    %eax,(%esp)
+  801020:	e8 14 00 00 00       	call   801039 <forktree>
+        yield();
+  801025:	e8 37 f2 ff ff       	call   800261 <yield>
+        exit(0);
+  80102a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801031:	e8 c9 f1 ff ff       	call   8001ff <exit>
+        return;
+  801036:	90                   	nop
+    }
+}
+  801037:	c9                   	leave  
+  801038:	c3                   	ret    
+
+00801039 <forktree>:
+
+void
+forktree(const char *cur) {
+  801039:	55                   	push   %ebp
+  80103a:	89 e5                	mov    %esp,%ebp
+  80103c:	83 ec 18             	sub    $0x18,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  80103f:	e8 3e f2 ff ff       	call   800282 <getpid>
+  801044:	8b 55 08             	mov    0x8(%ebp),%edx
+  801047:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80104b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80104f:	c7 04 24 85 13 80 00 	movl   $0x801385,(%esp)
+  801056:	e8 c6 f2 ff ff       	call   800321 <cprintf>
+
+    forkchild(cur, '0');
+  80105b:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
+  801062:	00 
+  801063:	8b 45 08             	mov    0x8(%ebp),%eax
+  801066:	89 04 24             	mov    %eax,(%esp)
+  801069:	e8 5d ff ff ff       	call   800fcb <forkchild>
+    forkchild(cur, '1');
+  80106e:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
+  801075:	00 
+  801076:	8b 45 08             	mov    0x8(%ebp),%eax
+  801079:	89 04 24             	mov    %eax,(%esp)
+  80107c:	e8 4a ff ff ff       	call   800fcb <forkchild>
+}
+  801081:	90                   	nop
+  801082:	c9                   	leave  
+  801083:	c3                   	ret    
+
+00801084 <main>:
+
+int
+main(void) {
+  801084:	55                   	push   %ebp
+  801085:	89 e5                	mov    %esp,%ebp
+  801087:	83 e4 f0             	and    $0xfffffff0,%esp
+  80108a:	83 ec 10             	sub    $0x10,%esp
+    forktree("");
+  80108d:	c7 04 24 96 13 80 00 	movl   $0x801396,(%esp)
+  801094:	e8 a0 ff ff ff       	call   801039 <forktree>
+    return 0;
+  801099:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80109e:	c9                   	leave  
+  80109f:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.d lab6/obj/user/forktree.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktree.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.o 和 lab6/obj/user/forktree.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.sym lab6/obj/user/forktree.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/forktree.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/forktree.sym	2020-05-24 08:39:42.094258228 +0000
@@ -0,0 +1,78 @@
+00800020 .text
+008010a0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00203011 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008011a0 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktree.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00203010 __STAB_END__
+00800171 sys_kill
+00203011 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+00801039 forktree
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00801084 main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203f0d __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
+00800fcb forkchild
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.asm lab6/obj/user/hello.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/hello.asm	2020-05-24 08:39:42.074257923 +0000
@@ -0,0 +1,2371 @@
+
+obj/__user_hello.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 11 80 00       	add    $0x801184,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    cprintf("Hello world!!.\n");
+  800fd4:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800fdb:	e8 41 f3 ff ff       	call   800321 <cprintf>
+    cprintf("I am process %d.\n", getpid());
+  800fe0:	e8 9d f2 ff ff       	call   800282 <getpid>
+  800fe5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fe9:	c7 04 24 10 13 80 00 	movl   $0x801310,(%esp)
+  800ff0:	e8 2c f3 ff ff       	call   800321 <cprintf>
+    cprintf("hello pass.\n");
+  800ff5:	c7 04 24 22 13 80 00 	movl   $0x801322,(%esp)
+  800ffc:	e8 20 f3 ff ff       	call   800321 <cprintf>
+    return 0;
+  801001:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801006:	c9                   	leave  
+  801007:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.d lab6/obj/user/hello.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/hello.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.o 和 lab6/obj/user/hello.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.sym lab6/obj/user/hello.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/hello.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/hello.sym	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202f09 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 hello.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202f08 __STAB_END__
+00800171 sys_kill
+00202f09 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d71 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/initcode.d lab6/obj/user/libs/initcode.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/initcode.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/initcode.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/initcode.o 和 lab6/obj/user/libs/initcode.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/panic.d lab6/obj/user/libs/panic.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/panic.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/panic.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/panic.o 和 lab6/obj/user/libs/panic.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/stdio.d lab6/obj/user/libs/stdio.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/stdio.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/stdio.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/stdio.o 和 lab6/obj/user/libs/stdio.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/syscall.d lab6/obj/user/libs/syscall.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/syscall.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/syscall.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/syscall.o 和 lab6/obj/user/libs/syscall.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/ulib.d lab6/obj/user/libs/ulib.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/ulib.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/ulib.d	2020-05-24 08:39:41.942255909 +0000
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/ulib.o 和 lab6/obj/user/libs/ulib.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/umain.d lab6/obj/user/libs/umain.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/umain.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/libs/umain.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/libs/umain.o 和 lab6/obj/user/libs/umain.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.asm lab6/obj/user/matrix.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/matrix.asm	2020-05-24 08:39:42.086258106 +0000
@@ -0,0 +1,2732 @@
+
+obj/__user_matrix.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 c0 13 80 00 	movl   $0x8013c0,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 da 13 80 00 	movl   $0x8013da,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 dc 13 80 00 	movl   $0x8013dc,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 da 13 80 00 	movl   $0x8013da,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 f8 13 80 00 	movl   $0x8013f8,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 57 0e 00 00       	call   8011f8 <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 24 15 80 00       	add    $0x801524,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 48 15 80 00 	mov    0x801548(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d c0 14 80 00 	mov    0x8014c0(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 35 15 80 	movl   $0x801535,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 3e 15 80 	movl   $0x80153e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 41 15 80 00       	mov    $0x801541,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <work>:
+static int mata[MATSIZE][MATSIZE];
+static int matb[MATSIZE][MATSIZE];
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	53                   	push   %ebx
+  800fcf:	83 ec 24             	sub    $0x24,%esp
+    int i, j, k, size = MATSIZE;
+  800fd2:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)
+    for (i = 0; i < size; i ++) {
+  800fd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fe0:	eb 63                	jmp    801045 <work+0x7a>
+        for (j = 0; j < size; j ++) {
+  800fe2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  800fe9:	eb 4f                	jmp    80103a <work+0x6f>
+            mata[i][j] = matb[i][j] = 1;
+  800feb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800fee:	89 d0                	mov    %edx,%eax
+  800ff0:	c1 e0 02             	shl    $0x2,%eax
+  800ff3:	01 d0                	add    %edx,%eax
+  800ff5:	01 c0                	add    %eax,%eax
+  800ff7:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800ffa:	01 d0                	add    %edx,%eax
+  800ffc:	c7 04 85 c0 21 80 00 	movl   $0x1,0x8021c0(,%eax,4)
+  801003:	01 00 00 00 
+  801007:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80100a:	89 d0                	mov    %edx,%eax
+  80100c:	c1 e0 02             	shl    $0x2,%eax
+  80100f:	01 d0                	add    %edx,%eax
+  801011:	01 c0                	add    %eax,%eax
+  801013:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801016:	01 d0                	add    %edx,%eax
+  801018:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  80101f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801022:	89 d0                	mov    %edx,%eax
+  801024:	c1 e0 02             	shl    $0x2,%eax
+  801027:	01 d0                	add    %edx,%eax
+  801029:	01 c0                	add    %eax,%eax
+  80102b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80102e:	01 d0                	add    %edx,%eax
+  801030:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+        for (j = 0; j < size; j ++) {
+  801037:	ff 45 f0             	incl   -0x10(%ebp)
+  80103a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80103d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801040:	7c a9                	jl     800feb <work+0x20>
+    for (i = 0; i < size; i ++) {
+  801042:	ff 45 f4             	incl   -0xc(%ebp)
+  801045:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801048:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80104b:	7c 95                	jl     800fe2 <work+0x17>
+        }
+    }
+
+    yield();
+  80104d:	e8 0f f2 ff ff       	call   800261 <yield>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+  801052:	e8 2b f2 ff ff       	call   800282 <getpid>
+  801057:	8b 55 08             	mov    0x8(%ebp),%edx
+  80105a:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80105e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801062:	c7 04 24 a0 16 80 00 	movl   $0x8016a0,(%esp)
+  801069:	e8 b3 f2 ff ff       	call   800321 <cprintf>
+
+    while (times -- > 0) {
+  80106e:	e9 53 01 00 00       	jmp    8011c6 <work+0x1fb>
+        for (i = 0; i < size; i ++) {
+  801073:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  80107a:	e9 b3 00 00 00       	jmp    801132 <work+0x167>
+            for (j = 0; j < size; j ++) {
+  80107f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  801086:	e9 98 00 00 00       	jmp    801123 <work+0x158>
+                matc[i][j] = 0;
+  80108b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80108e:	89 d0                	mov    %edx,%eax
+  801090:	c1 e0 02             	shl    $0x2,%eax
+  801093:	01 d0                	add    %edx,%eax
+  801095:	01 c0                	add    %eax,%eax
+  801097:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80109a:	01 d0                	add    %edx,%eax
+  80109c:	c7 04 85 60 23 80 00 	movl   $0x0,0x802360(,%eax,4)
+  8010a3:	00 00 00 00 
+                for (k = 0; k < size; k ++) {
+  8010a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  8010ae:	eb 68                	jmp    801118 <work+0x14d>
+                    matc[i][j] += mata[i][k] * matb[k][j];
+  8010b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010b3:	89 d0                	mov    %edx,%eax
+  8010b5:	c1 e0 02             	shl    $0x2,%eax
+  8010b8:	01 d0                	add    %edx,%eax
+  8010ba:	01 c0                	add    %eax,%eax
+  8010bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010bf:	01 d0                	add    %edx,%eax
+  8010c1:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  8010c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010cb:	89 d0                	mov    %edx,%eax
+  8010cd:	c1 e0 02             	shl    $0x2,%eax
+  8010d0:	01 d0                	add    %edx,%eax
+  8010d2:	01 c0                	add    %eax,%eax
+  8010d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8010d7:	01 d0                	add    %edx,%eax
+  8010d9:	8b 1c 85 20 20 80 00 	mov    0x802020(,%eax,4),%ebx
+  8010e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  8010e3:	89 d0                	mov    %edx,%eax
+  8010e5:	c1 e0 02             	shl    $0x2,%eax
+  8010e8:	01 d0                	add    %edx,%eax
+  8010ea:	01 c0                	add    %eax,%eax
+  8010ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010ef:	01 d0                	add    %edx,%eax
+  8010f1:	8b 04 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%eax
+  8010f8:	0f af c3             	imul   %ebx,%eax
+  8010fb:	01 c1                	add    %eax,%ecx
+  8010fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801100:	89 d0                	mov    %edx,%eax
+  801102:	c1 e0 02             	shl    $0x2,%eax
+  801105:	01 d0                	add    %edx,%eax
+  801107:	01 c0                	add    %eax,%eax
+  801109:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80110c:	01 d0                	add    %edx,%eax
+  80110e:	89 0c 85 60 23 80 00 	mov    %ecx,0x802360(,%eax,4)
+                for (k = 0; k < size; k ++) {
+  801115:	ff 45 ec             	incl   -0x14(%ebp)
+  801118:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80111b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80111e:	7c 90                	jl     8010b0 <work+0xe5>
+            for (j = 0; j < size; j ++) {
+  801120:	ff 45 f0             	incl   -0x10(%ebp)
+  801123:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801126:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801129:	0f 8c 5c ff ff ff    	jl     80108b <work+0xc0>
+        for (i = 0; i < size; i ++) {
+  80112f:	ff 45 f4             	incl   -0xc(%ebp)
+  801132:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801135:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801138:	0f 8c 41 ff ff ff    	jl     80107f <work+0xb4>
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  80113e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801145:	eb 77                	jmp    8011be <work+0x1f3>
+            for (j = 0; j < size; j ++) {
+  801147:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  80114e:	eb 63                	jmp    8011b3 <work+0x1e8>
+                mata[i][j] = matb[i][j] = matc[i][j];
+  801150:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801153:	89 d0                	mov    %edx,%eax
+  801155:	c1 e0 02             	shl    $0x2,%eax
+  801158:	01 d0                	add    %edx,%eax
+  80115a:	01 c0                	add    %eax,%eax
+  80115c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80115f:	01 d0                	add    %edx,%eax
+  801161:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  801168:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80116b:	89 d0                	mov    %edx,%eax
+  80116d:	c1 e0 02             	shl    $0x2,%eax
+  801170:	01 d0                	add    %edx,%eax
+  801172:	01 c0                	add    %eax,%eax
+  801174:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801177:	01 d0                	add    %edx,%eax
+  801179:	89 0c 85 c0 21 80 00 	mov    %ecx,0x8021c0(,%eax,4)
+  801180:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801183:	89 d0                	mov    %edx,%eax
+  801185:	c1 e0 02             	shl    $0x2,%eax
+  801188:	01 d0                	add    %edx,%eax
+  80118a:	01 c0                	add    %eax,%eax
+  80118c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80118f:	01 d0                	add    %edx,%eax
+  801191:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  801198:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80119b:	89 d0                	mov    %edx,%eax
+  80119d:	c1 e0 02             	shl    $0x2,%eax
+  8011a0:	01 d0                	add    %edx,%eax
+  8011a2:	01 c0                	add    %eax,%eax
+  8011a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8011a7:	01 d0                	add    %edx,%eax
+  8011a9:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+            for (j = 0; j < size; j ++) {
+  8011b0:	ff 45 f0             	incl   -0x10(%ebp)
+  8011b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8011b6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8011b9:	7c 95                	jl     801150 <work+0x185>
+        for (i = 0; i < size; i ++) {
+  8011bb:	ff 45 f4             	incl   -0xc(%ebp)
+  8011be:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011c1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8011c4:	7c 81                	jl     801147 <work+0x17c>
+    while (times -- > 0) {
+  8011c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8011c9:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8011cc:	89 55 08             	mov    %edx,0x8(%ebp)
+  8011cf:	85 c0                	test   %eax,%eax
+  8011d1:	0f 85 9c fe ff ff    	jne    801073 <work+0xa8>
+            }
+        }
+    }
+    cprintf("pid %d done!.\n", getpid());
+  8011d7:	e8 a6 f0 ff ff       	call   800282 <getpid>
+  8011dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8011e0:	c7 04 24 c0 16 80 00 	movl   $0x8016c0,(%esp)
+  8011e7:	e8 35 f1 ff ff       	call   800321 <cprintf>
+    exit(0);
+  8011ec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  8011f3:	e8 07 f0 ff ff       	call   8001ff <exit>
+
+008011f8 <main>:
+}
+
+const int total = 21;
+
+int
+main(void) {
+  8011f8:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  8011fc:	83 e4 f0             	and    $0xfffffff0,%esp
+  8011ff:	ff 71 fc             	pushl  -0x4(%ecx)
+  801202:	55                   	push   %ebp
+  801203:	89 e5                	mov    %esp,%ebp
+  801205:	53                   	push   %ebx
+  801206:	51                   	push   %ecx
+  801207:	83 ec 20             	sub    $0x20,%esp
+  80120a:	89 e0                	mov    %esp,%eax
+  80120c:	89 c3                	mov    %eax,%ebx
+    int pids[total];
+  80120e:	b8 15 00 00 00       	mov    $0x15,%eax
+  801213:	48                   	dec    %eax
+  801214:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  801217:	b8 15 00 00 00       	mov    $0x15,%eax
+  80121c:	c1 e0 02             	shl    $0x2,%eax
+  80121f:	8d 50 03             	lea    0x3(%eax),%edx
+  801222:	b8 10 00 00 00       	mov    $0x10,%eax
+  801227:	48                   	dec    %eax
+  801228:	01 d0                	add    %edx,%eax
+  80122a:	b9 10 00 00 00       	mov    $0x10,%ecx
+  80122f:	ba 00 00 00 00       	mov    $0x0,%edx
+  801234:	f7 f1                	div    %ecx
+  801236:	6b c0 10             	imul   $0x10,%eax,%eax
+  801239:	29 c4                	sub    %eax,%esp
+  80123b:	8d 44 24 0c          	lea    0xc(%esp),%eax
+  80123f:	83 c0 03             	add    $0x3,%eax
+  801242:	c1 e8 02             	shr    $0x2,%eax
+  801245:	c1 e0 02             	shl    $0x2,%eax
+  801248:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memset(pids, 0, sizeof(pids));
+  80124b:	b8 15 00 00 00       	mov    $0x15,%eax
+  801250:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  801257:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80125a:	89 54 24 08          	mov    %edx,0x8(%esp)
+  80125e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801265:	00 
+  801266:	89 04 24             	mov    %eax,(%esp)
+  801269:	e8 61 f4 ff ff       	call   8006cf <memset>
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  80126e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801275:	eb 7f                	jmp    8012f6 <main+0xfe>
+        if ((pids[i] = fork()) == 0) {
+  801277:	e8 a2 ef ff ff       	call   80021e <fork>
+  80127c:	89 c1                	mov    %eax,%ecx
+  80127e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801281:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801284:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
+  801287:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80128a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80128d:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801290:	85 c0                	test   %eax,%eax
+  801292:	75 52                	jne    8012e6 <main+0xee>
+            srand(i * i);
+  801294:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801297:	0f af 45 f4          	imul   -0xc(%ebp),%eax
+  80129b:	89 04 24             	mov    %eax,(%esp)
+  80129e:	e8 0f fd ff ff       	call   800fb2 <srand>
+            int times = (((unsigned int)rand()) % total);
+  8012a3:	e8 46 fc ff ff       	call   800eee <rand>
+  8012a8:	ba 15 00 00 00       	mov    $0x15,%edx
+  8012ad:	89 d1                	mov    %edx,%ecx
+  8012af:	ba 00 00 00 00       	mov    $0x0,%edx
+  8012b4:	f7 f1                	div    %ecx
+  8012b6:	89 d0                	mov    %edx,%eax
+  8012b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            times = (times * times + 10) * 100;
+  8012bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8012be:	0f af 45 e8          	imul   -0x18(%ebp),%eax
+  8012c2:	8d 50 0a             	lea    0xa(%eax),%edx
+  8012c5:	89 d0                	mov    %edx,%eax
+  8012c7:	c1 e0 02             	shl    $0x2,%eax
+  8012ca:	01 d0                	add    %edx,%eax
+  8012cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  8012d3:	01 d0                	add    %edx,%eax
+  8012d5:	c1 e0 02             	shl    $0x2,%eax
+  8012d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            work(times);
+  8012db:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8012de:	89 04 24             	mov    %eax,(%esp)
+  8012e1:	e8 e5 fc ff ff       	call   800fcb <work>
+        }
+        if (pids[i] < 0) {
+  8012e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8012e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8012ec:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012ef:	85 c0                	test   %eax,%eax
+  8012f1:	78 5f                	js     801352 <main+0x15a>
+    for (i = 0; i < total; i ++) {
+  8012f3:	ff 45 f4             	incl   -0xc(%ebp)
+  8012f6:	b8 15 00 00 00       	mov    $0x15,%eax
+  8012fb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  8012fe:	0f 8c 73 ff ff ff    	jl     801277 <main+0x7f>
+            goto failed;
+        }
+    }
+
+    cprintf("fork ok.\n");
+  801304:	c7 04 24 d4 16 80 00 	movl   $0x8016d4,(%esp)
+  80130b:	e8 11 f0 ff ff       	call   800321 <cprintf>
+
+    for (i = 0; i < total; i ++) {
+  801310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801317:	eb 1a                	jmp    801333 <main+0x13b>
+        if (wait() != 0) {
+  801319:	e8 0d ef ff ff       	call   80022b <wait>
+  80131e:	85 c0                	test   %eax,%eax
+  801320:	74 0e                	je     801330 <main+0x138>
+            cprintf("wait failed.\n");
+  801322:	c7 04 24 de 16 80 00 	movl   $0x8016de,(%esp)
+  801329:	e8 f3 ef ff ff       	call   800321 <cprintf>
+            goto failed;
+  80132e:	eb 23                	jmp    801353 <main+0x15b>
+    for (i = 0; i < total; i ++) {
+  801330:	ff 45 f4             	incl   -0xc(%ebp)
+  801333:	b8 15 00 00 00       	mov    $0x15,%eax
+  801338:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  80133b:	7c dc                	jl     801319 <main+0x121>
+        }
+    }
+
+    cprintf("matrix pass.\n");
+  80133d:	c7 04 24 ec 16 80 00 	movl   $0x8016ec,(%esp)
+  801344:	e8 d8 ef ff ff       	call   800321 <cprintf>
+    return 0;
+  801349:	b8 00 00 00 00       	mov    $0x0,%eax
+  80134e:	89 dc                	mov    %ebx,%esp
+  801350:	eb 51                	jmp    8013a3 <main+0x1ab>
+            goto failed;
+  801352:	90                   	nop
+
+failed:
+    for (i = 0; i < total; i ++) {
+  801353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  80135a:	eb 21                	jmp    80137d <main+0x185>
+        if (pids[i] > 0) {
+  80135c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80135f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801362:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801365:	85 c0                	test   %eax,%eax
+  801367:	7e 11                	jle    80137a <main+0x182>
+            kill(pids[i]);
+  801369:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80136c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80136f:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801372:	89 04 24             	mov    %eax,(%esp)
+  801375:	e8 f5 ee ff ff       	call   80026f <kill>
+    for (i = 0; i < total; i ++) {
+  80137a:	ff 45 f4             	incl   -0xc(%ebp)
+  80137d:	b8 15 00 00 00       	mov    $0x15,%eax
+  801382:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  801385:	7c d5                	jl     80135c <main+0x164>
+        }
+    }
+    panic("FAIL: T.T\n");
+  801387:	c7 44 24 08 fa 16 80 	movl   $0x8016fa,0x8(%esp)
+  80138e:	00 
+  80138f:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
+  801396:	00 
+  801397:	c7 04 24 05 17 80 00 	movl   $0x801705,(%esp)
+  80139e:	e8 7d ec ff ff       	call   800020 <__panic>
+}
+  8013a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  8013a6:	59                   	pop    %ecx
+  8013a7:	5b                   	pop    %ebx
+  8013a8:	5d                   	pop    %ebp
+  8013a9:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  8013ac:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.d lab6/obj/user/matrix.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/matrix.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/matrix.o obj/user/matrix.d: user/matrix.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.o 和 lab6/obj/user/matrix.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.sym lab6/obj/user/matrix.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/matrix.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/matrix.sym	2020-05-24 08:39:42.090258167 +0000
@@ -0,0 +1,82 @@
+00800020 .text
+008013c0 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00203299 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008014c0 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 matrix.c
+00802020 mata
+008021c0 matb
+00802360 matc
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00203298 __STAB_END__
+00800171 sys_kill
+00203299 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+008011f8 main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+002041b4 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008016d0 total
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
+00800fcb work
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.asm lab6/obj/user/pgdir.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/pgdir.asm	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,2370 @@
+
+obj/__user_pgdir.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 20 10 80 00 	movl   $0x801020,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 3c 10 80 00 	movl   $0x80103c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 3a 10 80 00 	movl   $0x80103a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 58 10 80 00 	movl   $0x801058,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 84 11 80 00       	add    $0x801184,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 95 11 80 	movl   $0x801195,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 9e 11 80 	movl   $0x80119e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  800fd4:	e8 a9 f2 ff ff       	call   800282 <getpid>
+  800fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fdd:	c7 04 24 00 13 80 00 	movl   $0x801300,(%esp)
+  800fe4:	e8 38 f3 ff ff       	call   800321 <cprintf>
+    print_pgdir();
+  800fe9:	e8 a1 f2 ff ff       	call   80028f <print_pgdir>
+    cprintf("pgdir pass.\n");
+  800fee:	c7 04 24 17 13 80 00 	movl   $0x801317,(%esp)
+  800ff5:	e8 27 f3 ff ff       	call   800321 <cprintf>
+    return 0;
+  800ffa:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fff:	c9                   	leave  
+  801000:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.d lab6/obj/user/pgdir.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/pgdir.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.o 和 lab6/obj/user/pgdir.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.sym lab6/obj/user/pgdir.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/pgdir.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/pgdir.sym	2020-05-24 08:39:42.090258167 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202f09 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 pgdir.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202f08 __STAB_END__
+00800171 sys_kill
+00202f09 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d71 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.asm lab6/obj/user/priority.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/priority.asm	2020-05-24 08:39:42.098258289 +0000
@@ -0,0 +1,2596 @@
+
+obj/__user_priority.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 a0 12 80 00 	movl   $0x8012a0,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 ba 12 80 00 	movl   $0x8012ba,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 bc 12 80 00 	movl   $0x8012bc,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 ba 12 80 00 	movl   $0x8012ba,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 d8 12 80 00 	movl   $0x8012d8,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 56 0c 00 00       	call   800ff7 <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 04 14 80 00       	add    $0x801404,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 28 14 80 00 	mov    0x801428(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d a0 13 80 00 	mov    0x8013a0(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 15 14 80 	movl   $0x801415,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 1e 14 80 	movl   $0x80141e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 21 14 80 00       	mov    $0x801421,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <spin_delay>:
+int status[TOTAL];
+int pids[TOTAL];
+
+static void
+spin_delay(void)
+{
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 ec 10             	sub    $0x10,%esp
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800fd1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  800fd8:	eb 11                	jmp    800feb <spin_delay+0x20>
+     {
+          j = !j;
+  800fda:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800fdd:	85 c0                	test   %eax,%eax
+  800fdf:	0f 94 c0             	sete   %al
+  800fe2:	0f b6 c0             	movzbl %al,%eax
+  800fe5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+     for (i = 0; i != 200; ++ i)
+  800fe8:	ff 45 fc             	incl   -0x4(%ebp)
+  800feb:	81 7d fc c8 00 00 00 	cmpl   $0xc8,-0x4(%ebp)
+  800ff2:	75 e6                	jne    800fda <spin_delay+0xf>
+     }
+}
+  800ff4:	90                   	nop
+  800ff5:	c9                   	leave  
+  800ff6:	c3                   	ret    
+
+00800ff7 <main>:
+
+int
+main(void) {
+  800ff7:	55                   	push   %ebp
+  800ff8:	89 e5                	mov    %esp,%ebp
+  800ffa:	53                   	push   %ebx
+  800ffb:	83 e4 f0             	and    $0xfffffff0,%esp
+  800ffe:	83 ec 20             	sub    $0x20,%esp
+     int i,time;
+     memset(pids, 0, sizeof(pids));
+  801001:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
+  801008:	00 
+  801009:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801010:	00 
+  801011:	c7 04 24 30 20 80 00 	movl   $0x802030,(%esp)
+  801018:	e8 b2 f6 ff ff       	call   8006cf <memset>
+     lab6_set_priority(TOTAL + 1);
+  80101d:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+  801024:	e8 81 f2 ff ff       	call   8002aa <lab6_set_priority>
+
+     for (i = 0; i < TOTAL; i ++) {
+  801029:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801030:	00 
+  801031:	e9 fe 00 00 00       	jmp    801134 <main+0x13d>
+          acc[i]=0;
+  801036:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80103a:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  801041:	00 00 00 00 
+          if ((pids[i] = fork()) == 0) {
+  801045:	e8 d4 f1 ff ff       	call   80021e <fork>
+  80104a:	89 c2                	mov    %eax,%edx
+  80104c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801050:	89 14 85 30 20 80 00 	mov    %edx,0x802030(,%eax,4)
+  801057:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80105b:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801062:	85 c0                	test   %eax,%eax
+  801064:	0f 85 b3 00 00 00    	jne    80111d <main+0x126>
+               lab6_set_priority(i + 1);
+  80106a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80106e:	40                   	inc    %eax
+  80106f:	89 04 24             	mov    %eax,(%esp)
+  801072:	e8 33 f2 ff ff       	call   8002aa <lab6_set_priority>
+               acc[i] = 0;
+  801077:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80107b:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  801082:	00 00 00 00 
+               while (1) {
+                    spin_delay();
+  801086:	e8 40 ff ff ff       	call   800fcb <spin_delay>
+                    ++ acc[i];
+  80108b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80108f:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  801096:	8d 50 01             	lea    0x1(%eax),%edx
+  801099:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80109d:	89 14 85 08 20 80 00 	mov    %edx,0x802008(,%eax,4)
+                    if(acc[i]%4000==0) {
+  8010a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010a8:	8b 0c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ecx
+  8010af:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+  8010b4:	89 c8                	mov    %ecx,%eax
+  8010b6:	f7 e2                	mul    %edx
+  8010b8:	89 d0                	mov    %edx,%eax
+  8010ba:	c1 e8 08             	shr    $0x8,%eax
+  8010bd:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
+  8010c3:	29 c1                	sub    %eax,%ecx
+  8010c5:	89 c8                	mov    %ecx,%eax
+  8010c7:	85 c0                	test   %eax,%eax
+  8010c9:	75 bb                	jne    801086 <main+0x8f>
+                        if((time=gettime_msec())>MAX_TIME) {
+  8010cb:	e8 cd f1 ff ff       	call   80029d <gettime_msec>
+  8010d0:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8010d4:	81 7c 24 18 e8 03 00 	cmpl   $0x3e8,0x18(%esp)
+  8010db:	00 
+  8010dc:	7e a8                	jle    801086 <main+0x8f>
+                            cprintf("child pid %d, acc %d, time %d\n",getpid(),acc[i],time);
+  8010de:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8010e2:	8b 1c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ebx
+  8010e9:	e8 94 f1 ff ff       	call   800282 <getpid>
+  8010ee:	8b 54 24 18          	mov    0x18(%esp),%edx
+  8010f2:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  8010f6:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+  8010fa:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010fe:	c7 04 24 80 15 80 00 	movl   $0x801580,(%esp)
+  801105:	e8 17 f2 ff ff       	call   800321 <cprintf>
+                            exit(acc[i]);
+  80110a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80110e:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  801115:	89 04 24             	mov    %eax,(%esp)
+  801118:	e8 e2 f0 ff ff       	call   8001ff <exit>
+                        }
+                    }
+               }
+               
+          }
+          if (pids[i] < 0) {
+  80111d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801121:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801128:	85 c0                	test   %eax,%eax
+  80112a:	0f 88 08 01 00 00    	js     801238 <main+0x241>
+     for (i = 0; i < TOTAL; i ++) {
+  801130:	ff 44 24 1c          	incl   0x1c(%esp)
+  801134:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801139:	0f 8e f7 fe ff ff    	jle    801036 <main+0x3f>
+               goto failed;
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+  80113f:	c7 04 24 a0 15 80 00 	movl   $0x8015a0,(%esp)
+  801146:	e8 d6 f1 ff ff       	call   800321 <cprintf>
+
+     for (i = 0; i < TOTAL; i ++) {
+  80114b:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801152:	00 
+  801153:	eb 6c                	jmp    8011c1 <main+0x1ca>
+         status[i]=0;
+  801155:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801159:	c7 04 85 1c 20 80 00 	movl   $0x0,0x80201c(,%eax,4)
+  801160:	00 00 00 00 
+         waitpid(pids[i],&status[i]);
+  801164:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801168:	c1 e0 02             	shl    $0x2,%eax
+  80116b:	8d 90 1c 20 80 00    	lea    0x80201c(%eax),%edx
+  801171:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801175:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80117c:	89 54 24 04          	mov    %edx,0x4(%esp)
+  801180:	89 04 24             	mov    %eax,(%esp)
+  801183:	e8 bf f0 ff ff       	call   800247 <waitpid>
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+  801188:	e8 10 f1 ff ff       	call   80029d <gettime_msec>
+  80118d:	89 c1                	mov    %eax,%ecx
+  80118f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801193:	8b 14 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%edx
+  80119a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80119e:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011a5:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
+  8011a9:	89 54 24 08          	mov    %edx,0x8(%esp)
+  8011ad:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8011b1:	c7 04 24 c8 15 80 00 	movl   $0x8015c8,(%esp)
+  8011b8:	e8 64 f1 ff ff       	call   800321 <cprintf>
+     for (i = 0; i < TOTAL; i ++) {
+  8011bd:	ff 44 24 1c          	incl   0x1c(%esp)
+  8011c1:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  8011c6:	7e 8d                	jle    801155 <main+0x15e>
+     }
+     cprintf("main: wait pids over\n");
+  8011c8:	c7 04 24 e7 15 80 00 	movl   $0x8015e7,(%esp)
+  8011cf:	e8 4d f1 ff ff       	call   800321 <cprintf>
+     cprintf("stride sched correct result:");
+  8011d4:	c7 04 24 fd 15 80 00 	movl   $0x8015fd,(%esp)
+  8011db:	e8 41 f1 ff ff       	call   800321 <cprintf>
+     for (i = 0; i < TOTAL; i ++)
+  8011e0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  8011e7:	00 
+  8011e8:	eb 34                	jmp    80121e <main+0x227>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+  8011ea:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  8011ee:	8b 04 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%eax
+  8011f5:	01 c0                	add    %eax,%eax
+  8011f7:	8b 1d 1c 20 80 00    	mov    0x80201c,%ebx
+  8011fd:	99                   	cltd   
+  8011fe:	f7 fb                	idiv   %ebx
+  801200:	40                   	inc    %eax
+  801201:	89 c2                	mov    %eax,%edx
+  801203:	c1 ea 1f             	shr    $0x1f,%edx
+  801206:	01 d0                	add    %edx,%eax
+  801208:	d1 f8                	sar    %eax
+  80120a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80120e:	c7 04 24 1a 16 80 00 	movl   $0x80161a,(%esp)
+  801215:	e8 07 f1 ff ff       	call   800321 <cprintf>
+     for (i = 0; i < TOTAL; i ++)
+  80121a:	ff 44 24 1c          	incl   0x1c(%esp)
+  80121e:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  801223:	7e c5                	jle    8011ea <main+0x1f3>
+     }
+     cprintf("\n");
+  801225:	c7 04 24 1e 16 80 00 	movl   $0x80161e,(%esp)
+  80122c:	e8 f0 f0 ff ff       	call   800321 <cprintf>
+
+     return 0;
+  801231:	b8 00 00 00 00       	mov    $0x0,%eax
+  801236:	eb 54                	jmp    80128c <main+0x295>
+               goto failed;
+  801238:	90                   	nop
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  801239:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801240:	00 
+  801241:	eb 26                	jmp    801269 <main+0x272>
+          if (pids[i] > 0) {
+  801243:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801247:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80124e:	85 c0                	test   %eax,%eax
+  801250:	7e 13                	jle    801265 <main+0x26e>
+               kill(pids[i]);
+  801252:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801256:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80125d:	89 04 24             	mov    %eax,(%esp)
+  801260:	e8 0a f0 ff ff       	call   80026f <kill>
+     for (i = 0; i < TOTAL; i ++) {
+  801265:	ff 44 24 1c          	incl   0x1c(%esp)
+  801269:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  80126e:	7e d3                	jle    801243 <main+0x24c>
+          }
+     }
+     panic("FAIL: T.T\n");
+  801270:	c7 44 24 08 20 16 80 	movl   $0x801620,0x8(%esp)
+  801277:	00 
+  801278:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
+  80127f:	00 
+  801280:	c7 04 24 2b 16 80 00 	movl   $0x80162b,(%esp)
+  801287:	e8 94 ed ff ff       	call   800020 <__panic>
+}
+  80128c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  80128f:	c9                   	leave  
+  801290:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.d lab6/obj/user/priority.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/priority.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/priority.o obj/user/priority.d: user/priority.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.o 和 lab6/obj/user/priority.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.sym lab6/obj/user/priority.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/priority.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/priority.sym	2020-05-24 08:39:42.102258350 +0000
@@ -0,0 +1,81 @@
+00800020 .text
+008012a0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00203185 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008013a0 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 priority.c
+00800fcb spin_delay
+00800405 strcpy
+00800261 yield
+00802008 acc
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00203184 __STAB_END__
+00800171 sys_kill
+00203185 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800ff7 main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+0020407a __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
+0080201c status
+00802030 pids
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.asm lab6/obj/user/softint.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/softint.asm	2020-05-24 08:39:42.074257923 +0000
@@ -0,0 +1,2364 @@
+
+obj/__user_softint.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 00 10 80 00 	movl   $0x801000,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 1a 10 80 00 	movl   $0x80101a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 1c 10 80 00 	movl   $0x80101c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 1a 10 80 00 	movl   $0x80101a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 38 10 80 00 	movl   $0x801038,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 64 11 80 00       	add    $0x801164,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 88 11 80 00 	mov    0x801188(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 00 11 80 00 	mov    0x801100(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 75 11 80 	movl   $0x801175,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 7e 11 80 	movl   $0x80117e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 81 11 80 00       	mov    $0x801181,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 10             	sub    $0x10,%esp
+    asm volatile("int $14");
+  800fd4:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  800fd6:	c7 44 24 08 e0 12 80 	movl   $0x8012e0,0x8(%esp)
+  800fdd:	00 
+  800fde:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
+  800fe5:	00 
+  800fe6:	c7 04 24 eb 12 80 00 	movl   $0x8012eb,(%esp)
+  800fed:	e8 2e f0 ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.d lab6/obj/user/softint.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/softint.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.o 和 lab6/obj/user/softint.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.sym lab6/obj/user/softint.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/softint.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/softint.sym	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801000 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ee5 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801100 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 softint.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202ee4 __STAB_END__
+00800171 sys_kill
+00202ee5 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203d4f __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.asm lab6/obj/user/spin.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/spin.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2437 @@
+
+obj/__user_spin.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 e0 10 80 00 	movl   $0x8010e0,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 fc 10 80 00 	movl   $0x8010fc,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 fa 10 80 00 	movl   $0x8010fa,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 18 11 80 00 	movl   $0x801118,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 44 12 80 00       	add    $0x801244,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 68 12 80 00 	mov    0x801268(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d e0 11 80 00 	mov    0x8011e0(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 55 12 80 	movl   $0x801255,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 5e 12 80 	movl   $0x80125e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 61 12 80 00       	mov    $0x801261,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  800fd4:	c7 04 24 c0 13 80 00 	movl   $0x8013c0,(%esp)
+  800fdb:	e8 41 f3 ff ff       	call   800321 <cprintf>
+    if ((pid = fork()) == 0) {
+  800fe0:	e8 39 f2 ff ff       	call   80021e <fork>
+  800fe5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
+  800fe9:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
+  800fee:	75 0e                	jne    800ffe <main+0x33>
+        cprintf("I am the child. spinning ...\n");
+  800ff0:	c7 04 24 e7 13 80 00 	movl   $0x8013e7,(%esp)
+  800ff7:	e8 25 f3 ff ff       	call   800321 <cprintf>
+        while (1);
+  800ffc:	eb fe                	jmp    800ffc <main+0x31>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  800ffe:	c7 04 24 08 14 80 00 	movl   $0x801408,(%esp)
+  801005:	e8 17 f3 ff ff       	call   800321 <cprintf>
+
+    yield();
+  80100a:	e8 52 f2 ff ff       	call   800261 <yield>
+    yield();
+  80100f:	e8 4d f2 ff ff       	call   800261 <yield>
+    yield();
+  801014:	e8 48 f2 ff ff       	call   800261 <yield>
+
+    cprintf("I am the parent.  Killing the child...\n");
+  801019:	c7 04 24 30 14 80 00 	movl   $0x801430,(%esp)
+  801020:	e8 fc f2 ff ff       	call   800321 <cprintf>
+
+    assert((ret = kill(pid)) == 0);
+  801025:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801029:	89 04 24             	mov    %eax,(%esp)
+  80102c:	e8 3e f2 ff ff       	call   80026f <kill>
+  801031:	89 44 24 18          	mov    %eax,0x18(%esp)
+  801035:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  80103a:	74 24                	je     801060 <main+0x95>
+  80103c:	c7 44 24 0c 58 14 80 	movl   $0x801458,0xc(%esp)
+  801043:	00 
+  801044:	c7 44 24 08 6f 14 80 	movl   $0x80146f,0x8(%esp)
+  80104b:	00 
+  80104c:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
+  801053:	00 
+  801054:	c7 04 24 84 14 80 00 	movl   $0x801484,(%esp)
+  80105b:	e8 c0 ef ff ff       	call   800020 <__panic>
+    cprintf("kill returns %d\n", ret);
+  801060:	8b 44 24 18          	mov    0x18(%esp),%eax
+  801064:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801068:	c7 04 24 90 14 80 00 	movl   $0x801490,(%esp)
+  80106f:	e8 ad f2 ff ff       	call   800321 <cprintf>
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  801074:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  80107b:	00 
+  80107c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801080:	89 04 24             	mov    %eax,(%esp)
+  801083:	e8 bf f1 ff ff       	call   800247 <waitpid>
+  801088:	89 44 24 18          	mov    %eax,0x18(%esp)
+  80108c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
+  801091:	74 24                	je     8010b7 <main+0xec>
+  801093:	c7 44 24 0c a4 14 80 	movl   $0x8014a4,0xc(%esp)
+  80109a:	00 
+  80109b:	c7 44 24 08 6f 14 80 	movl   $0x80146f,0x8(%esp)
+  8010a2:	00 
+  8010a3:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
+  8010aa:	00 
+  8010ab:	c7 04 24 84 14 80 00 	movl   $0x801484,(%esp)
+  8010b2:	e8 69 ef ff ff       	call   800020 <__panic>
+    cprintf("wait returns %d\n", ret);
+  8010b7:	8b 44 24 18          	mov    0x18(%esp),%eax
+  8010bb:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8010bf:	c7 04 24 c4 14 80 00 	movl   $0x8014c4,(%esp)
+  8010c6:	e8 56 f2 ff ff       	call   800321 <cprintf>
+
+    cprintf("spin may pass.\n");
+  8010cb:	c7 04 24 d5 14 80 00 	movl   $0x8014d5,(%esp)
+  8010d2:	e8 4a f2 ff ff       	call   800321 <cprintf>
+    return 0;
+  8010d7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8010dc:	c9                   	leave  
+  8010dd:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.d lab6/obj/user/spin.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/spin.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.o 和 lab6/obj/user/spin.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.sym lab6/obj/user/spin.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/spin.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/spin.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+008010e0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202fd5 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008011e0 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 spin.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202fd4 __STAB_END__
+00800171 sys_kill
+00202fd5 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203e46 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.asm lab6/obj/user/testbss.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/testbss.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2445 @@
+
+obj/__user_testbss.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 00 11 80 00 	movl   $0x801100,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 1c 11 80 00 	movl   $0x80111c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 1a 11 80 00 	movl   $0x80111a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 38 11 80 00 	movl   $0x801138,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 64 12 80 00       	add    $0x801264,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 75 12 80 	movl   $0x801275,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 7e 12 80 	movl   $0x80127e,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    cprintf("Making sure bss works right...\n");
+  800fd4:	c7 04 24 e0 13 80 00 	movl   $0x8013e0,(%esp)
+  800fdb:	e8 41 f3 ff ff       	call   800321 <cprintf>
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fe0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800fe7:	00 
+  800fe8:	eb 37                	jmp    801021 <main+0x56>
+        if (bigarray[i] != 0) {
+  800fea:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800fee:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  800ff5:	85 c0                	test   %eax,%eax
+  800ff7:	74 24                	je     80101d <main+0x52>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  800ff9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  800ffd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801001:	c7 44 24 08 00 14 80 	movl   $0x801400,0x8(%esp)
+  801008:	00 
+  801009:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
+  801010:	00 
+  801011:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  801018:	e8 03 f0 ff ff       	call   800020 <__panic>
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80101d:	ff 44 24 1c          	incl   0x1c(%esp)
+  801021:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  801028:	00 
+  801029:	7e bf                	jle    800fea <main+0x1f>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  80102b:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801032:	00 
+  801033:	eb 13                	jmp    801048 <main+0x7d>
+        bigarray[i] = i;
+  801035:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801039:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80103d:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801044:	ff 44 24 1c          	incl   0x1c(%esp)
+  801048:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  80104f:	00 
+  801050:	7e e3                	jle    801035 <main+0x6a>
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801052:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  801059:	00 
+  80105a:	eb 3b                	jmp    801097 <main+0xcc>
+        if (bigarray[i] != i) {
+  80105c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801060:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  801067:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  80106b:	39 c2                	cmp    %eax,%edx
+  80106d:	74 24                	je     801093 <main+0xc8>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  80106f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
+  801073:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801077:	c7 44 24 08 2c 14 80 	movl   $0x80142c,0x8(%esp)
+  80107e:	00 
+  80107f:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
+  801086:	00 
+  801087:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  80108e:	e8 8d ef ff ff       	call   800020 <__panic>
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  801093:	ff 44 24 1c          	incl   0x1c(%esp)
+  801097:	81 7c 24 1c ff ff 0f 	cmpl   $0xfffff,0x1c(%esp)
+  80109e:	00 
+  80109f:	7e bb                	jle    80105c <main+0x91>
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  8010a1:	c7 04 24 54 14 80 00 	movl   $0x801454,(%esp)
+  8010a8:	e8 74 f2 ff ff       	call   800321 <cprintf>
+    cprintf("testbss may pass.\n");
+  8010ad:	c7 04 24 87 14 80 00 	movl   $0x801487,(%esp)
+  8010b4:	e8 68 f2 ff ff       	call   800321 <cprintf>
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  8010b9:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  8010c0:	00 00 00 
+    asm volatile ("int $0x14");
+  8010c3:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  8010c5:	c7 44 24 08 9a 14 80 	movl   $0x80149a,0x8(%esp)
+  8010cc:	00 
+  8010cd:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
+  8010d4:	00 
+  8010d5:	c7 04 24 1d 14 80 00 	movl   $0x80141d,(%esp)
+  8010dc:	e8 3f ef ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.d lab6/obj/user/testbss.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/testbss.d	2020-05-24 08:39:41.934255787 +0000
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.o 和 lab6/obj/user/testbss.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.sym lab6/obj/user/testbss.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/testbss.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/testbss.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,78 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202fed .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801200 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 testbss.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202fec __STAB_END__
+00800171 sys_kill
+00202fed __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+00802020 bigarray
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203e97 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.asm lab6/obj/user/waitkill.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/waitkill.asm	2020-05-24 08:39:42.074257923 +0000
@@ -0,0 +1,2508 @@
+
+obj/__user_waitkill.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 60 11 80 00 	movl   $0x801160,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 7c 11 80 00 	movl   $0x80117c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 7a 11 80 00 	movl   $0x80117a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 98 11 80 00 	movl   $0x801198,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 d3 0c 00 00       	call   801074 <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 c4 12 80 00       	add    $0x8012c4,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 e8 12 80 00 	mov    0x8012e8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 60 12 80 00 	mov    0x801260(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 d5 12 80 	movl   $0x8012d5,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 de 12 80 	movl   $0x8012de,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be e1 12 80 00       	mov    $0x8012e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  800fd1:	e8 8b f2 ff ff       	call   800261 <yield>
+    yield();
+  800fd6:	e8 86 f2 ff ff       	call   800261 <yield>
+    yield();
+  800fdb:	e8 81 f2 ff ff       	call   800261 <yield>
+    yield();
+  800fe0:	e8 7c f2 ff ff       	call   800261 <yield>
+    yield();
+  800fe5:	e8 77 f2 ff ff       	call   800261 <yield>
+    yield();
+  800fea:	e8 72 f2 ff ff       	call   800261 <yield>
+}
+  800fef:	90                   	nop
+  800ff0:	c9                   	leave  
+  800ff1:	c3                   	ret    
+
+00800ff2 <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  800ff2:	55                   	push   %ebp
+  800ff3:	89 e5                	mov    %esp,%ebp
+  800ff5:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 1.\n");
+  800ff8:	c7 04 24 40 14 80 00 	movl   $0x801440,(%esp)
+  800fff:	e8 1d f3 ff ff       	call   800321 <cprintf>
+    while (1);
+  801004:	eb fe                	jmp    801004 <loop+0x12>
+
+00801006 <work>:
+}
+
+void
+work(void) {
+  801006:	55                   	push   %ebp
+  801007:	89 e5                	mov    %esp,%ebp
+  801009:	83 ec 18             	sub    $0x18,%esp
+    cprintf("child 2.\n");
+  80100c:	c7 04 24 4a 14 80 00 	movl   $0x80144a,(%esp)
+  801013:	e8 09 f3 ff ff       	call   800321 <cprintf>
+    do_yield();
+  801018:	e8 ae ff ff ff       	call   800fcb <do_yield>
+    if (kill(parent) == 0) {
+  80101d:	a1 08 20 80 00       	mov    0x802008,%eax
+  801022:	89 04 24             	mov    %eax,(%esp)
+  801025:	e8 45 f2 ff ff       	call   80026f <kill>
+  80102a:	85 c0                	test   %eax,%eax
+  80102c:	75 3a                	jne    801068 <work+0x62>
+        cprintf("kill parent ok.\n");
+  80102e:	c7 04 24 54 14 80 00 	movl   $0x801454,(%esp)
+  801035:	e8 e7 f2 ff ff       	call   800321 <cprintf>
+        do_yield();
+  80103a:	e8 8c ff ff ff       	call   800fcb <do_yield>
+        if (kill(pid1) == 0) {
+  80103f:	a1 10 20 80 00       	mov    0x802010,%eax
+  801044:	89 04 24             	mov    %eax,(%esp)
+  801047:	e8 23 f2 ff ff       	call   80026f <kill>
+  80104c:	85 c0                	test   %eax,%eax
+  80104e:	75 18                	jne    801068 <work+0x62>
+            cprintf("kill child1 ok.\n");
+  801050:	c7 04 24 65 14 80 00 	movl   $0x801465,(%esp)
+  801057:	e8 c5 f2 ff ff       	call   800321 <cprintf>
+            exit(0);
+  80105c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  801063:	e8 97 f1 ff ff       	call   8001ff <exit>
+        }
+    }
+    exit(-1);
+  801068:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+  80106f:	e8 8b f1 ff ff       	call   8001ff <exit>
+
+00801074 <main>:
+}
+
+int
+main(void) {
+  801074:	55                   	push   %ebp
+  801075:	89 e5                	mov    %esp,%ebp
+  801077:	83 e4 f0             	and    $0xfffffff0,%esp
+  80107a:	83 ec 10             	sub    $0x10,%esp
+    parent = getpid();
+  80107d:	e8 00 f2 ff ff       	call   800282 <getpid>
+  801082:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  801087:	e8 92 f1 ff ff       	call   80021e <fork>
+  80108c:	a3 10 20 80 00       	mov    %eax,0x802010
+  801091:	a1 10 20 80 00       	mov    0x802010,%eax
+  801096:	85 c0                	test   %eax,%eax
+  801098:	75 05                	jne    80109f <main+0x2b>
+        loop();
+  80109a:	e8 53 ff ff ff       	call   800ff2 <loop>
+    }
+
+    assert(pid1 > 0);
+  80109f:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010a4:	85 c0                	test   %eax,%eax
+  8010a6:	7f 24                	jg     8010cc <main+0x58>
+  8010a8:	c7 44 24 0c 76 14 80 	movl   $0x801476,0xc(%esp)
+  8010af:	00 
+  8010b0:	c7 44 24 08 7f 14 80 	movl   $0x80147f,0x8(%esp)
+  8010b7:	00 
+  8010b8:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
+  8010bf:	00 
+  8010c0:	c7 04 24 94 14 80 00 	movl   $0x801494,(%esp)
+  8010c7:	e8 54 ef ff ff       	call   800020 <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  8010cc:	e8 4d f1 ff ff       	call   80021e <fork>
+  8010d1:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  8010d6:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010db:	85 c0                	test   %eax,%eax
+  8010dd:	75 05                	jne    8010e4 <main+0x70>
+        work();
+  8010df:	e8 22 ff ff ff       	call   801006 <work>
+    }
+    if (pid2 > 0) {
+  8010e4:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  8010e9:	85 c0                	test   %eax,%eax
+  8010eb:	7e 46                	jle    801133 <main+0xbf>
+        cprintf("wait child 1.\n");
+  8010ed:	c7 04 24 a4 14 80 00 	movl   $0x8014a4,(%esp)
+  8010f4:	e8 28 f2 ff ff       	call   800321 <cprintf>
+        waitpid(pid1, NULL);
+  8010f9:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  801105:	00 
+  801106:	89 04 24             	mov    %eax,(%esp)
+  801109:	e8 39 f1 ff ff       	call   800247 <waitpid>
+        panic("waitpid %d returns\n", pid1);
+  80110e:	a1 10 20 80 00       	mov    0x802010,%eax
+  801113:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  801117:	c7 44 24 08 b3 14 80 	movl   $0x8014b3,0x8(%esp)
+  80111e:	00 
+  80111f:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
+  801126:	00 
+  801127:	c7 04 24 94 14 80 00 	movl   $0x801494,(%esp)
+  80112e:	e8 ed ee ff ff       	call   800020 <__panic>
+    }
+    else {
+        kill(pid1);
+  801133:	a1 10 20 80 00       	mov    0x802010,%eax
+  801138:	89 04 24             	mov    %eax,(%esp)
+  80113b:	e8 2f f1 ff ff       	call   80026f <kill>
+    }
+    panic("FAIL: T.T\n");
+  801140:	c7 44 24 08 c7 14 80 	movl   $0x8014c7,0x8(%esp)
+  801147:	00 
+  801148:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
+  80114f:	00 
+  801150:	c7 04 24 94 14 80 00 	movl   $0x801494,(%esp)
+  801157:	e8 c4 ee ff ff       	call   800020 <__panic>
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.d lab6/obj/user/waitkill.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/waitkill.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.o 和 lab6/obj/user/waitkill.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.sym lab6/obj/user/waitkill.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/waitkill.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/waitkill.sym	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,83 @@
+00800020 .text
+00801160 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+002030b9 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801260 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 waitkill.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800ff2 loop
+00800282 getpid
+008007b2 memcpy
+00802008 parent
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+002030b8 __STAB_END__
+00800171 sys_kill
+002030b9 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080200c pid2
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00801074 main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00800fcb do_yield
+00203f75 __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+00802010 pid1
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
+00801006 work
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.asm lab6/obj/user/yield.asm
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.asm	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/yield.asm	2020-05-24 08:39:42.078257984 +0000
@@ -0,0 +1,2392 @@
+
+obj/__user_yield.out：     文件格式 elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 28             	sub    $0x28,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80002f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800033:	8b 45 08             	mov    0x8(%ebp),%eax
+  800036:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80003a:	c7 04 24 60 10 80 00 	movl   $0x801060,(%esp)
+  800041:	e8 db 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800046:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800049:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80004d:	8b 45 10             	mov    0x10(%ebp),%eax
+  800050:	89 04 24             	mov    %eax,(%esp)
+  800053:	e8 96 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  800058:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  80005f:	e8 bd 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	c7 04 24 f6 ff ff ff 	movl   $0xfffffff6,(%esp)
+  80006b:	e8 8f 01 00 00       	call   8001ff <exit>
+
+00800070 <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  800070:	55                   	push   %ebp
+  800071:	89 e5                	mov    %esp,%ebp
+  800073:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800076:	8d 45 14             	lea    0x14(%ebp),%eax
+  800079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80007f:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800083:	8b 45 08             	mov    0x8(%ebp),%eax
+  800086:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80008a:	c7 04 24 7c 10 80 00 	movl   $0x80107c,(%esp)
+  800091:	e8 8b 02 00 00       	call   800321 <cprintf>
+    vcprintf(fmt, ap);
+  800096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800099:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80009d:	8b 45 10             	mov    0x10(%ebp),%eax
+  8000a0:	89 04 24             	mov    %eax,(%esp)
+  8000a3:	e8 46 02 00 00       	call   8002ee <vcprintf>
+    cprintf("\n");
+  8000a8:	c7 04 24 7a 10 80 00 	movl   $0x80107a,(%esp)
+  8000af:	e8 6d 02 00 00       	call   800321 <cprintf>
+    va_end(ap);
+}
+  8000b4:	90                   	nop
+  8000b5:	c9                   	leave  
+  8000b6:	c3                   	ret    
+
+008000b7 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b7:	55                   	push   %ebp
+  8000b8:	89 e5                	mov    %esp,%ebp
+  8000ba:	57                   	push   %edi
+  8000bb:	56                   	push   %esi
+  8000bc:	53                   	push   %ebx
+  8000bd:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000c0:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cd:	eb 15                	jmp    8000e4 <syscall+0x2d>
+        a[i] = va_arg(ap, uint32_t);
+  8000cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d2:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d8:	8b 10                	mov    (%eax),%edx
+  8000da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000dd:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000e1:	ff 45 f0             	incl   -0x10(%ebp)
+  8000e4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e8:	7e e5                	jle    8000cf <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ed:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f3:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    asm volatile (
+  8000f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fc:	cd 80                	int    $0x80
+  8000fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "cc", "memory");
+    return ret;
+  800101:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800104:	83 c4 20             	add    $0x20,%esp
+  800107:	5b                   	pop    %ebx
+  800108:	5e                   	pop    %esi
+  800109:	5f                   	pop    %edi
+  80010a:	5d                   	pop    %ebp
+  80010b:	c3                   	ret    
+
+0080010c <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010c:	55                   	push   %ebp
+  80010d:	89 e5                	mov    %esp,%ebp
+  80010f:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_exit, error_code);
+  800112:	8b 45 08             	mov    0x8(%ebp),%eax
+  800115:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  800120:	e8 92 ff ff ff       	call   8000b7 <syscall>
+}
+  800125:	c9                   	leave  
+  800126:	c3                   	ret    
+
+00800127 <sys_fork>:
+
+int
+sys_fork(void) {
+  800127:	55                   	push   %ebp
+  800128:	89 e5                	mov    %esp,%ebp
+  80012a:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_fork);
+  80012d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+  800134:	e8 7e ff ff ff       	call   8000b7 <syscall>
+}
+  800139:	c9                   	leave  
+  80013a:	c3                   	ret    
+
+0080013b <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80013b:	55                   	push   %ebp
+  80013c:	89 e5                	mov    %esp,%ebp
+  80013e:	83 ec 0c             	sub    $0xc,%esp
+    return syscall(SYS_wait, pid, store);
+  800141:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800144:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800148:	8b 45 08             	mov    0x8(%ebp),%eax
+  80014b:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80014f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  800156:	e8 5c ff ff ff       	call   8000b7 <syscall>
+}
+  80015b:	c9                   	leave  
+  80015c:	c3                   	ret    
+
+0080015d <sys_yield>:
+
+int
+sys_yield(void) {
+  80015d:	55                   	push   %ebp
+  80015e:	89 e5                	mov    %esp,%ebp
+  800160:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_yield);
+  800163:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80016a:	e8 48 ff ff ff       	call   8000b7 <syscall>
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+  800174:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_kill, pid);
+  800177:	8b 45 08             	mov    0x8(%ebp),%eax
+  80017a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  80017e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+  800185:	e8 2d ff ff ff       	call   8000b7 <syscall>
+}
+  80018a:	c9                   	leave  
+  80018b:	c3                   	ret    
+
+0080018c <sys_getpid>:
+
+int
+sys_getpid(void) {
+  80018c:	55                   	push   %ebp
+  80018d:	89 e5                	mov    %esp,%ebp
+  80018f:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_getpid);
+  800192:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
+  800199:	e8 19 ff ff ff       	call   8000b7 <syscall>
+}
+  80019e:	c9                   	leave  
+  80019f:	c3                   	ret    
+
+008001a0 <sys_putc>:
+
+int
+sys_putc(int c) {
+  8001a0:	55                   	push   %ebp
+  8001a1:	89 e5                	mov    %esp,%ebp
+  8001a3:	83 ec 08             	sub    $0x8,%esp
+    return syscall(SYS_putc, c);
+  8001a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001ad:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
+  8001b4:	e8 fe fe ff ff       	call   8000b7 <syscall>
+}
+  8001b9:	c9                   	leave  
+  8001ba:	c3                   	ret    
+
+008001bb <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  8001bb:	55                   	push   %ebp
+  8001bc:	89 e5                	mov    %esp,%ebp
+  8001be:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_pgdir);
+  8001c1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
+  8001c8:	e8 ea fe ff ff       	call   8000b7 <syscall>
+}
+  8001cd:	c9                   	leave  
+  8001ce:	c3                   	ret    
+
+008001cf <sys_gettime>:
+
+int
+sys_gettime(void) {
+  8001cf:	55                   	push   %ebp
+  8001d0:	89 e5                	mov    %esp,%ebp
+  8001d2:	83 ec 04             	sub    $0x4,%esp
+    return syscall(SYS_gettime);
+  8001d5:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
+  8001dc:	e8 d6 fe ff ff       	call   8000b7 <syscall>
+}
+  8001e1:	c9                   	leave  
+  8001e2:	c3                   	ret    
+
+008001e3 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001e3:	55                   	push   %ebp
+  8001e4:	89 e5                	mov    %esp,%ebp
+  8001e6:	83 ec 08             	sub    $0x8,%esp
+    syscall(SYS_lab6_set_priority, priority);
+  8001e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8001ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+  8001f0:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
+  8001f7:	e8 bb fe ff ff       	call   8000b7 <syscall>
+}
+  8001fc:	90                   	nop
+  8001fd:	c9                   	leave  
+  8001fe:	c3                   	ret    
+
+008001ff <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001ff:	55                   	push   %ebp
+  800200:	89 e5                	mov    %esp,%ebp
+  800202:	83 ec 18             	sub    $0x18,%esp
+    sys_exit(error_code);
+  800205:	8b 45 08             	mov    0x8(%ebp),%eax
+  800208:	89 04 24             	mov    %eax,(%esp)
+  80020b:	e8 fc fe ff ff       	call   80010c <sys_exit>
+    cprintf("BUG: exit failed.\n");
+  800210:	c7 04 24 98 10 80 00 	movl   $0x801098,(%esp)
+  800217:	e8 05 01 00 00       	call   800321 <cprintf>
+    while (1);
+  80021c:	eb fe                	jmp    80021c <exit+0x1d>
+
+0080021e <fork>:
+}
+
+int
+fork(void) {
+  80021e:	55                   	push   %ebp
+  80021f:	89 e5                	mov    %esp,%ebp
+  800221:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  800224:	e8 fe fe ff ff       	call   800127 <sys_fork>
+}
+  800229:	c9                   	leave  
+  80022a:	c3                   	ret    
+
+0080022b <wait>:
+
+int
+wait(void) {
+  80022b:	55                   	push   %ebp
+  80022c:	89 e5                	mov    %esp,%ebp
+  80022e:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(0, NULL);
+  800231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+  800238:	00 
+  800239:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  800240:	e8 f6 fe ff ff       	call   80013b <sys_wait>
+}
+  800245:	c9                   	leave  
+  800246:	c3                   	ret    
+
+00800247 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800247:	55                   	push   %ebp
+  800248:	89 e5                	mov    %esp,%ebp
+  80024a:	83 ec 18             	sub    $0x18,%esp
+    return sys_wait(pid, store);
+  80024d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800254:	8b 45 08             	mov    0x8(%ebp),%eax
+  800257:	89 04 24             	mov    %eax,(%esp)
+  80025a:	e8 dc fe ff ff       	call   80013b <sys_wait>
+}
+  80025f:	c9                   	leave  
+  800260:	c3                   	ret    
+
+00800261 <yield>:
+
+void
+yield(void) {
+  800261:	55                   	push   %ebp
+  800262:	89 e5                	mov    %esp,%ebp
+  800264:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800267:	e8 f1 fe ff ff       	call   80015d <sys_yield>
+}
+  80026c:	90                   	nop
+  80026d:	c9                   	leave  
+  80026e:	c3                   	ret    
+
+0080026f <kill>:
+
+int
+kill(int pid) {
+  80026f:	55                   	push   %ebp
+  800270:	89 e5                	mov    %esp,%ebp
+  800272:	83 ec 18             	sub    $0x18,%esp
+    return sys_kill(pid);
+  800275:	8b 45 08             	mov    0x8(%ebp),%eax
+  800278:	89 04 24             	mov    %eax,(%esp)
+  80027b:	e8 f1 fe ff ff       	call   800171 <sys_kill>
+}
+  800280:	c9                   	leave  
+  800281:	c3                   	ret    
+
+00800282 <getpid>:
+
+int
+getpid(void) {
+  800282:	55                   	push   %ebp
+  800283:	89 e5                	mov    %esp,%ebp
+  800285:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800288:	e8 ff fe ff ff       	call   80018c <sys_getpid>
+}
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800295:	e8 21 ff ff ff       	call   8001bb <sys_pgdir>
+}
+  80029a:	90                   	nop
+  80029b:	c9                   	leave  
+  80029c:	c3                   	ret    
+
+0080029d <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80029d:	55                   	push   %ebp
+  80029e:	89 e5                	mov    %esp,%ebp
+  8002a0:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  8002a3:	e8 27 ff ff ff       	call   8001cf <sys_gettime>
+}
+  8002a8:	c9                   	leave  
+  8002a9:	c3                   	ret    
+
+008002aa <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  8002aa:	55                   	push   %ebp
+  8002ab:	89 e5                	mov    %esp,%ebp
+  8002ad:	83 ec 18             	sub    $0x18,%esp
+    sys_lab6_set_priority(priority);
+  8002b0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002b3:	89 04 24             	mov    %eax,(%esp)
+  8002b6:	e8 28 ff ff ff       	call   8001e3 <sys_lab6_set_priority>
+}
+  8002bb:	90                   	nop
+  8002bc:	c9                   	leave  
+  8002bd:	c3                   	ret    
+
+008002be <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002be:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002c3:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002c6:	e8 cb 00 00 00       	call   800396 <umain>
+1:  jmp 1b
+  8002cb:	eb fe                	jmp    8002cb <_start+0xd>
+
+008002cd <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002cd:	55                   	push   %ebp
+  8002ce:	89 e5                	mov    %esp,%ebp
+  8002d0:	83 ec 18             	sub    $0x18,%esp
+    sys_putc(c);
+  8002d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8002d6:	89 04 24             	mov    %eax,(%esp)
+  8002d9:	e8 c2 fe ff ff       	call   8001a0 <sys_putc>
+    (*cnt) ++;
+  8002de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e1:	8b 00                	mov    (%eax),%eax
+  8002e3:	8d 50 01             	lea    0x1(%eax),%edx
+  8002e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002e9:	89 10                	mov    %edx,(%eax)
+}
+  8002eb:	90                   	nop
+  8002ec:	c9                   	leave  
+  8002ed:	c3                   	ret    
+
+008002ee <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002ee:	55                   	push   %ebp
+  8002ef:	89 e5                	mov    %esp,%ebp
+  8002f1:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  8002f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002fb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800302:	8b 45 08             	mov    0x8(%ebp),%eax
+  800305:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800309:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  80030c:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800310:	c7 04 24 cd 02 80 00 	movl   $0x8002cd,(%esp)
+  800317:	e8 06 07 00 00       	call   800a22 <vprintfmt>
+    return cnt;
+  80031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  80031f:	c9                   	leave  
+  800320:	c3                   	ret    
+
+00800321 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800321:	55                   	push   %ebp
+  800322:	89 e5                	mov    %esp,%ebp
+  800324:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800327:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80032d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800330:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800334:	8b 45 08             	mov    0x8(%ebp),%eax
+  800337:	89 04 24             	mov    %eax,(%esp)
+  80033a:	e8 af ff ff ff       	call   8002ee <vcprintf>
+  80033f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800345:	c9                   	leave  
+  800346:	c3                   	ret    
+
+00800347 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800347:	55                   	push   %ebp
+  800348:	89 e5                	mov    %esp,%ebp
+  80034a:	83 ec 28             	sub    $0x28,%esp
+    int cnt = 0;
+  80034d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800354:	eb 13                	jmp    800369 <cputs+0x22>
+        cputch(c, &cnt);
+  800356:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80035a:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  80035d:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800361:	89 04 24             	mov    %eax,(%esp)
+  800364:	e8 64 ff ff ff       	call   8002cd <cputch>
+    while ((c = *str ++) != '\0') {
+  800369:	8b 45 08             	mov    0x8(%ebp),%eax
+  80036c:	8d 50 01             	lea    0x1(%eax),%edx
+  80036f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800372:	0f b6 00             	movzbl (%eax),%eax
+  800375:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800378:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80037c:	75 d8                	jne    800356 <cputs+0xf>
+    }
+    cputch('\n', &cnt);
+  80037e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800385:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  80038c:	e8 3c ff ff ff       	call   8002cd <cputch>
+    return cnt;
+  800391:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800394:	c9                   	leave  
+  800395:	c3                   	ret    
+
+00800396 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800396:	55                   	push   %ebp
+  800397:	89 e5                	mov    %esp,%ebp
+  800399:	83 ec 28             	sub    $0x28,%esp
+    int ret = main();
+  80039c:	e8 2a 0c 00 00       	call   800fcb <main>
+  8003a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  8003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003a7:	89 04 24             	mov    %eax,(%esp)
+  8003aa:	e8 50 fe ff ff       	call   8001ff <exit>
+
+008003af <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  8003af:	55                   	push   %ebp
+  8003b0:	89 e5                	mov    %esp,%ebp
+  8003b2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003bc:	eb 03                	jmp    8003c1 <strlen+0x12>
+        cnt ++;
+  8003be:	ff 45 fc             	incl   -0x4(%ebp)
+    while (*s ++ != '\0') {
+  8003c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003c7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003ca:	0f b6 00             	movzbl (%eax),%eax
+  8003cd:	84 c0                	test   %al,%al
+  8003cf:	75 ed                	jne    8003be <strlen+0xf>
+    }
+    return cnt;
+  8003d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003d4:	c9                   	leave  
+  8003d5:	c3                   	ret    
+
+008003d6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003d6:	55                   	push   %ebp
+  8003d7:	89 e5                	mov    %esp,%ebp
+  8003d9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e3:	eb 03                	jmp    8003e8 <strnlen+0x12>
+        cnt ++;
+  8003e5:	ff 45 fc             	incl   -0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003ee:	73 10                	jae    800400 <strnlen+0x2a>
+  8003f0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f3:	8d 50 01             	lea    0x1(%eax),%edx
+  8003f6:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003f9:	0f b6 00             	movzbl (%eax),%eax
+  8003fc:	84 c0                	test   %al,%al
+  8003fe:	75 e5                	jne    8003e5 <strnlen+0xf>
+    }
+    return cnt;
+  800400:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  800403:	c9                   	leave  
+  800404:	c3                   	ret    
+
+00800405 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  800405:	55                   	push   %ebp
+  800406:	89 e5                	mov    %esp,%ebp
+  800408:	57                   	push   %edi
+  800409:	56                   	push   %esi
+  80040a:	83 ec 20             	sub    $0x20,%esp
+  80040d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800413:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800416:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  800419:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80041c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80041f:	89 d1                	mov    %edx,%ecx
+  800421:	89 c2                	mov    %eax,%edx
+  800423:	89 ce                	mov    %ecx,%esi
+  800425:	89 d7                	mov    %edx,%edi
+  800427:	ac                   	lods   %ds:(%esi),%al
+  800428:	aa                   	stos   %al,%es:(%edi)
+  800429:	84 c0                	test   %al,%al
+  80042b:	75 fa                	jne    800427 <strcpy+0x22>
+  80042d:	89 fa                	mov    %edi,%edx
+  80042f:	89 f1                	mov    %esi,%ecx
+  800431:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800434:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80043a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80043d:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80043e:	83 c4 20             	add    $0x20,%esp
+  800441:	5e                   	pop    %esi
+  800442:	5f                   	pop    %edi
+  800443:	5d                   	pop    %ebp
+  800444:	c3                   	ret    
+
+00800445 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800445:	55                   	push   %ebp
+  800446:	89 e5                	mov    %esp,%ebp
+  800448:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80044b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80044e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800451:	eb 1e                	jmp    800471 <strncpy+0x2c>
+        if ((*p = *src) != '\0') {
+  800453:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800456:	0f b6 10             	movzbl (%eax),%edx
+  800459:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80045c:	88 10                	mov    %dl,(%eax)
+  80045e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800461:	0f b6 00             	movzbl (%eax),%eax
+  800464:	84 c0                	test   %al,%al
+  800466:	74 03                	je     80046b <strncpy+0x26>
+            src ++;
+  800468:	ff 45 0c             	incl   0xc(%ebp)
+        }
+        p ++, len --;
+  80046b:	ff 45 fc             	incl   -0x4(%ebp)
+  80046e:	ff 4d 10             	decl   0x10(%ebp)
+    while (len > 0) {
+  800471:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800475:	75 dc                	jne    800453 <strncpy+0xe>
+    }
+    return dst;
+  800477:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80047a:	c9                   	leave  
+  80047b:	c3                   	ret    
+
+0080047c <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  80047c:	55                   	push   %ebp
+  80047d:	89 e5                	mov    %esp,%ebp
+  80047f:	57                   	push   %edi
+  800480:	56                   	push   %esi
+  800481:	83 ec 20             	sub    $0x20,%esp
+  800484:	8b 45 08             	mov    0x8(%ebp),%eax
+  800487:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80048a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80048d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile (
+  800490:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800493:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800496:	89 d1                	mov    %edx,%ecx
+  800498:	89 c2                	mov    %eax,%edx
+  80049a:	89 ce                	mov    %ecx,%esi
+  80049c:	89 d7                	mov    %edx,%edi
+  80049e:	ac                   	lods   %ds:(%esi),%al
+  80049f:	ae                   	scas   %es:(%edi),%al
+  8004a0:	75 08                	jne    8004aa <strcmp+0x2e>
+  8004a2:	84 c0                	test   %al,%al
+  8004a4:	75 f8                	jne    80049e <strcmp+0x22>
+  8004a6:	31 c0                	xor    %eax,%eax
+  8004a8:	eb 04                	jmp    8004ae <strcmp+0x32>
+  8004aa:	19 c0                	sbb    %eax,%eax
+  8004ac:	0c 01                	or     $0x1,%al
+  8004ae:	89 fa                	mov    %edi,%edx
+  8004b0:	89 f1                	mov    %esi,%ecx
+  8004b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8004b5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8004b8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return ret;
+  8004bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004be:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004bf:	83 c4 20             	add    $0x20,%esp
+  8004c2:	5e                   	pop    %esi
+  8004c3:	5f                   	pop    %edi
+  8004c4:	5d                   	pop    %ebp
+  8004c5:	c3                   	ret    
+
+008004c6 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004c6:	55                   	push   %ebp
+  8004c7:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004c9:	eb 09                	jmp    8004d4 <strncmp+0xe>
+        n --, s1 ++, s2 ++;
+  8004cb:	ff 4d 10             	decl   0x10(%ebp)
+  8004ce:	ff 45 08             	incl   0x8(%ebp)
+  8004d1:	ff 45 0c             	incl   0xc(%ebp)
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004d8:	74 1a                	je     8004f4 <strncmp+0x2e>
+  8004da:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004dd:	0f b6 00             	movzbl (%eax),%eax
+  8004e0:	84 c0                	test   %al,%al
+  8004e2:	74 10                	je     8004f4 <strncmp+0x2e>
+  8004e4:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e7:	0f b6 10             	movzbl (%eax),%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	38 c2                	cmp    %al,%dl
+  8004f2:	74 d7                	je     8004cb <strncmp+0x5>
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004f8:	74 18                	je     800512 <strncmp+0x4c>
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	0f b6 d0             	movzbl %al,%edx
+  800503:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800506:	0f b6 00             	movzbl (%eax),%eax
+  800509:	0f b6 c0             	movzbl %al,%eax
+  80050c:	29 c2                	sub    %eax,%edx
+  80050e:	89 d0                	mov    %edx,%eax
+  800510:	eb 05                	jmp    800517 <strncmp+0x51>
+  800512:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800517:	5d                   	pop    %ebp
+  800518:	c3                   	ret    
+
+00800519 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800519:	55                   	push   %ebp
+  80051a:	89 e5                	mov    %esp,%ebp
+  80051c:	83 ec 04             	sub    $0x4,%esp
+  80051f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800522:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800525:	eb 13                	jmp    80053a <strchr+0x21>
+        if (*s == c) {
+  800527:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052a:	0f b6 00             	movzbl (%eax),%eax
+  80052d:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800530:	75 05                	jne    800537 <strchr+0x1e>
+            return (char *)s;
+  800532:	8b 45 08             	mov    0x8(%ebp),%eax
+  800535:	eb 12                	jmp    800549 <strchr+0x30>
+        }
+        s ++;
+  800537:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  80053a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80053d:	0f b6 00             	movzbl (%eax),%eax
+  800540:	84 c0                	test   %al,%al
+  800542:	75 e3                	jne    800527 <strchr+0xe>
+    }
+    return NULL;
+  800544:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800549:	c9                   	leave  
+  80054a:	c3                   	ret    
+
+0080054b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80054b:	55                   	push   %ebp
+  80054c:	89 e5                	mov    %esp,%ebp
+  80054e:	83 ec 04             	sub    $0x4,%esp
+  800551:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800554:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800557:	eb 0e                	jmp    800567 <strfind+0x1c>
+        if (*s == c) {
+  800559:	8b 45 08             	mov    0x8(%ebp),%eax
+  80055c:	0f b6 00             	movzbl (%eax),%eax
+  80055f:	38 45 fc             	cmp    %al,-0x4(%ebp)
+  800562:	74 0f                	je     800573 <strfind+0x28>
+            break;
+        }
+        s ++;
+  800564:	ff 45 08             	incl   0x8(%ebp)
+    while (*s != '\0') {
+  800567:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056a:	0f b6 00             	movzbl (%eax),%eax
+  80056d:	84 c0                	test   %al,%al
+  80056f:	75 e8                	jne    800559 <strfind+0xe>
+  800571:	eb 01                	jmp    800574 <strfind+0x29>
+            break;
+  800573:	90                   	nop
+    }
+    return (char *)s;
+  800574:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800577:	c9                   	leave  
+  800578:	c3                   	ret    
+
+00800579 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800579:	55                   	push   %ebp
+  80057a:	89 e5                	mov    %esp,%ebp
+  80057c:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  80057f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800586:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80058d:	eb 03                	jmp    800592 <strtol+0x19>
+        s ++;
+  80058f:	ff 45 08             	incl   0x8(%ebp)
+    while (*s == ' ' || *s == '\t') {
+  800592:	8b 45 08             	mov    0x8(%ebp),%eax
+  800595:	0f b6 00             	movzbl (%eax),%eax
+  800598:	3c 20                	cmp    $0x20,%al
+  80059a:	74 f3                	je     80058f <strtol+0x16>
+  80059c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059f:	0f b6 00             	movzbl (%eax),%eax
+  8005a2:	3c 09                	cmp    $0x9,%al
+  8005a4:	74 e9                	je     80058f <strtol+0x16>
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  8005a6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 2b                	cmp    $0x2b,%al
+  8005ae:	75 05                	jne    8005b5 <strtol+0x3c>
+        s ++;
+  8005b0:	ff 45 08             	incl   0x8(%ebp)
+  8005b3:	eb 14                	jmp    8005c9 <strtol+0x50>
+    }
+    else if (*s == '-') {
+  8005b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005b8:	0f b6 00             	movzbl (%eax),%eax
+  8005bb:	3c 2d                	cmp    $0x2d,%al
+  8005bd:	75 0a                	jne    8005c9 <strtol+0x50>
+        s ++, neg = 1;
+  8005bf:	ff 45 08             	incl   0x8(%ebp)
+  8005c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005cd:	74 06                	je     8005d5 <strtol+0x5c>
+  8005cf:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005d3:	75 22                	jne    8005f7 <strtol+0x7e>
+  8005d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005d8:	0f b6 00             	movzbl (%eax),%eax
+  8005db:	3c 30                	cmp    $0x30,%al
+  8005dd:	75 18                	jne    8005f7 <strtol+0x7e>
+  8005df:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005e2:	40                   	inc    %eax
+  8005e3:	0f b6 00             	movzbl (%eax),%eax
+  8005e6:	3c 78                	cmp    $0x78,%al
+  8005e8:	75 0d                	jne    8005f7 <strtol+0x7e>
+        s += 2, base = 16;
+  8005ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005f5:	eb 29                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005fb:	75 16                	jne    800613 <strtol+0x9a>
+  8005fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800600:	0f b6 00             	movzbl (%eax),%eax
+  800603:	3c 30                	cmp    $0x30,%al
+  800605:	75 0c                	jne    800613 <strtol+0x9a>
+        s ++, base = 8;
+  800607:	ff 45 08             	incl   0x8(%ebp)
+  80060a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800611:	eb 0d                	jmp    800620 <strtol+0xa7>
+    }
+    else if (base == 0) {
+  800613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800617:	75 07                	jne    800620 <strtol+0xa7>
+        base = 10;
+  800619:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	3c 2f                	cmp    $0x2f,%al
+  800628:	7e 1b                	jle    800645 <strtol+0xcc>
+  80062a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80062d:	0f b6 00             	movzbl (%eax),%eax
+  800630:	3c 39                	cmp    $0x39,%al
+  800632:	7f 11                	jg     800645 <strtol+0xcc>
+            dig = *s - '0';
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	0f be c0             	movsbl %al,%eax
+  80063d:	83 e8 30             	sub    $0x30,%eax
+  800640:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800643:	eb 48                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	3c 60                	cmp    $0x60,%al
+  80064d:	7e 1b                	jle    80066a <strtol+0xf1>
+  80064f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800652:	0f b6 00             	movzbl (%eax),%eax
+  800655:	3c 7a                	cmp    $0x7a,%al
+  800657:	7f 11                	jg     80066a <strtol+0xf1>
+            dig = *s - 'a' + 10;
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	0f be c0             	movsbl %al,%eax
+  800662:	83 e8 57             	sub    $0x57,%eax
+  800665:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800668:	eb 23                	jmp    80068d <strtol+0x114>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  80066a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80066d:	0f b6 00             	movzbl (%eax),%eax
+  800670:	3c 40                	cmp    $0x40,%al
+  800672:	7e 3b                	jle    8006af <strtol+0x136>
+  800674:	8b 45 08             	mov    0x8(%ebp),%eax
+  800677:	0f b6 00             	movzbl (%eax),%eax
+  80067a:	3c 5a                	cmp    $0x5a,%al
+  80067c:	7f 31                	jg     8006af <strtol+0x136>
+            dig = *s - 'A' + 10;
+  80067e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800681:	0f b6 00             	movzbl (%eax),%eax
+  800684:	0f be c0             	movsbl %al,%eax
+  800687:	83 e8 37             	sub    $0x37,%eax
+  80068a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800690:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800693:	7d 19                	jge    8006ae <strtol+0x135>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800695:	ff 45 08             	incl   0x8(%ebp)
+  800698:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80069b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80069f:	89 c2                	mov    %eax,%edx
+  8006a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8006a4:	01 d0                	add    %edx,%eax
+  8006a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (1) {
+  8006a9:	e9 72 ff ff ff       	jmp    800620 <strtol+0xa7>
+            break;
+  8006ae:	90                   	nop
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  8006af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006b3:	74 08                	je     8006bd <strtol+0x144>
+        *endptr = (char *) s;
+  8006b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006b8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006bb:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006c1:	74 07                	je     8006ca <strtol+0x151>
+  8006c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006c6:	f7 d8                	neg    %eax
+  8006c8:	eb 03                	jmp    8006cd <strtol+0x154>
+  8006ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006cd:	c9                   	leave  
+  8006ce:	c3                   	ret    
+
+008006cf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006cf:	55                   	push   %ebp
+  8006d0:	89 e5                	mov    %esp,%ebp
+  8006d2:	57                   	push   %edi
+  8006d3:	83 ec 24             	sub    $0x24,%esp
+  8006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006d9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006dc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006e0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006e6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006e9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006f9:	89 d7                	mov    %edx,%edi
+  8006fb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006fd:	89 fa                	mov    %edi,%edx
+  8006ff:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800702:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  800705:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800708:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  800709:	83 c4 24             	add    $0x24,%esp
+  80070c:	5f                   	pop    %edi
+  80070d:	5d                   	pop    %ebp
+  80070e:	c3                   	ret    
+
+0080070f <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  80070f:	55                   	push   %ebp
+  800710:	89 e5                	mov    %esp,%ebp
+  800712:	57                   	push   %edi
+  800713:	56                   	push   %esi
+  800714:	53                   	push   %ebx
+  800715:	83 ec 30             	sub    $0x30,%esp
+  800718:	8b 45 08             	mov    0x8(%ebp),%eax
+  80071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80071e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800721:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800724:	8b 45 10             	mov    0x10(%ebp),%eax
+  800727:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80072d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800730:	73 42                	jae    800774 <memmove+0x65>
+  800732:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800738:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80073b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80073e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800741:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800744:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800747:	c1 e8 02             	shr    $0x2,%eax
+  80074a:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  80074c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800752:	89 d7                	mov    %edx,%edi
+  800754:	89 c6                	mov    %eax,%esi
+  800756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800758:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80075b:	83 e1 03             	and    $0x3,%ecx
+  80075e:	74 02                	je     800762 <memmove+0x53>
+  800760:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800762:	89 f0                	mov    %esi,%eax
+  800764:	89 fa                	mov    %edi,%edx
+  800766:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800769:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80076c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        : "memory");
+    return dst;
+  80076f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800772:	eb 36                	jmp    8007aa <memmove+0x9b>
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800774:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800777:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80077a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80077d:	01 c2                	add    %eax,%edx
+  80077f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800782:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800785:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800788:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+    asm volatile (
+  80078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80078e:	89 c1                	mov    %eax,%ecx
+  800790:	89 d8                	mov    %ebx,%eax
+  800792:	89 d6                	mov    %edx,%esi
+  800794:	89 c7                	mov    %eax,%edi
+  800796:	fd                   	std    
+  800797:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800799:	fc                   	cld    
+  80079a:	89 f8                	mov    %edi,%eax
+  80079c:	89 f2                	mov    %esi,%edx
+  80079e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  8007a1:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  8007a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return dst;
+  8007a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  8007aa:	83 c4 30             	add    $0x30,%esp
+  8007ad:	5b                   	pop    %ebx
+  8007ae:	5e                   	pop    %esi
+  8007af:	5f                   	pop    %edi
+  8007b0:	5d                   	pop    %ebp
+  8007b1:	c3                   	ret    
+
+008007b2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007b2:	55                   	push   %ebp
+  8007b3:	89 e5                	mov    %esp,%ebp
+  8007b5:	57                   	push   %edi
+  8007b6:	56                   	push   %esi
+  8007b7:	83 ec 20             	sub    $0x20,%esp
+  8007ba:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007c6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007cf:	c1 e8 02             	shr    $0x2,%eax
+  8007d2:	89 c1                	mov    %eax,%ecx
+    asm volatile (
+  8007d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007da:	89 d7                	mov    %edx,%edi
+  8007dc:	89 c6                	mov    %eax,%esi
+  8007de:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007e3:	83 e1 03             	and    $0x3,%ecx
+  8007e6:	74 02                	je     8007ea <memcpy+0x38>
+  8007e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007ea:	89 f0                	mov    %esi,%eax
+  8007ec:	89 fa                	mov    %edi,%edx
+  8007ee:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return dst;
+  8007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007fa:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007fb:	83 c4 20             	add    $0x20,%esp
+  8007fe:	5e                   	pop    %esi
+  8007ff:	5f                   	pop    %edi
+  800800:	5d                   	pop    %ebp
+  800801:	c3                   	ret    
+
+00800802 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  800802:	55                   	push   %ebp
+  800803:	89 e5                	mov    %esp,%ebp
+  800805:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  800808:	8b 45 08             	mov    0x8(%ebp),%eax
+  80080b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  80080e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800811:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800814:	eb 2e                	jmp    800844 <memcmp+0x42>
+        if (*s1 != *s2) {
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 10             	movzbl (%eax),%edx
+  80081c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80081f:	0f b6 00             	movzbl (%eax),%eax
+  800822:	38 c2                	cmp    %al,%dl
+  800824:	74 18                	je     80083e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800826:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800829:	0f b6 00             	movzbl (%eax),%eax
+  80082c:	0f b6 d0             	movzbl %al,%edx
+  80082f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800832:	0f b6 00             	movzbl (%eax),%eax
+  800835:	0f b6 c0             	movzbl %al,%eax
+  800838:	29 c2                	sub    %eax,%edx
+  80083a:	89 d0                	mov    %edx,%eax
+  80083c:	eb 18                	jmp    800856 <memcmp+0x54>
+        }
+        s1 ++, s2 ++;
+  80083e:	ff 45 fc             	incl   -0x4(%ebp)
+  800841:	ff 45 f8             	incl   -0x8(%ebp)
+    while (n -- > 0) {
+  800844:	8b 45 10             	mov    0x10(%ebp),%eax
+  800847:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80084a:	89 55 10             	mov    %edx,0x10(%ebp)
+  80084d:	85 c0                	test   %eax,%eax
+  80084f:	75 c5                	jne    800816 <memcmp+0x14>
+    }
+    return 0;
+  800851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800856:	c9                   	leave  
+  800857:	c3                   	ret    
+
+00800858 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800858:	55                   	push   %ebp
+  800859:	89 e5                	mov    %esp,%ebp
+  80085b:	83 ec 58             	sub    $0x58,%esp
+  80085e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800861:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800864:	8b 45 14             	mov    0x14(%ebp),%eax
+  800867:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80086d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800870:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800873:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800876:	8b 45 18             	mov    0x18(%ebp),%eax
+  800879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80087c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80087f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800882:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800885:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800888:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80088b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80088e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800892:	74 1c                	je     8008b0 <printnum+0x58>
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  8008a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8008a5:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008aa:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008b6:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008d1:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008d4:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008d9:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008dc:	72 56                	jb     800934 <printnum+0xdc>
+  8008de:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
+  8008e1:	77 05                	ja     8008e8 <printnum+0x90>
+  8008e3:	39 45 d0             	cmp    %eax,-0x30(%ebp)
+  8008e6:	72 4c                	jb     800934 <printnum+0xdc>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008eb:	8d 50 ff             	lea    -0x1(%eax),%edx
+  8008ee:	8b 45 20             	mov    0x20(%ebp),%eax
+  8008f1:	89 44 24 18          	mov    %eax,0x18(%esp)
+  8008f5:	89 54 24 14          	mov    %edx,0x14(%esp)
+  8008f9:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008fc:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800900:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800903:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800906:	89 44 24 08          	mov    %eax,0x8(%esp)
+  80090a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  80090e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800911:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800915:	8b 45 08             	mov    0x8(%ebp),%eax
+  800918:	89 04 24             	mov    %eax,(%esp)
+  80091b:	e8 38 ff ff ff       	call   800858 <printnum>
+  800920:	eb 1b                	jmp    80093d <printnum+0xe5>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800922:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800925:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800929:	8b 45 20             	mov    0x20(%ebp),%eax
+  80092c:	89 04 24             	mov    %eax,(%esp)
+  80092f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800932:	ff d0                	call   *%eax
+        while (-- width > 0)
+  800934:	ff 4d 1c             	decl   0x1c(%ebp)
+  800937:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  80093b:	7f e5                	jg     800922 <printnum+0xca>
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80093d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800940:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  800945:	0f b6 00             	movzbl (%eax),%eax
+  800948:	0f be c0             	movsbl %al,%eax
+  80094b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  80094e:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800952:	89 04 24             	mov    %eax,(%esp)
+  800955:	8b 45 08             	mov    0x8(%ebp),%eax
+  800958:	ff d0                	call   *%eax
+}
+  80095a:	90                   	nop
+  80095b:	c9                   	leave  
+  80095c:	c3                   	ret    
+
+0080095d <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80095d:	55                   	push   %ebp
+  80095e:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800960:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800964:	7e 14                	jle    80097a <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800966:	8b 45 08             	mov    0x8(%ebp),%eax
+  800969:	8b 00                	mov    (%eax),%eax
+  80096b:	8d 48 08             	lea    0x8(%eax),%ecx
+  80096e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800971:	89 0a                	mov    %ecx,(%edx)
+  800973:	8b 50 04             	mov    0x4(%eax),%edx
+  800976:	8b 00                	mov    (%eax),%eax
+  800978:	eb 30                	jmp    8009aa <getuint+0x4d>
+    }
+    else if (lflag) {
+  80097a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80097e:	74 16                	je     800996 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800980:	8b 45 08             	mov    0x8(%ebp),%eax
+  800983:	8b 00                	mov    (%eax),%eax
+  800985:	8d 48 04             	lea    0x4(%eax),%ecx
+  800988:	8b 55 08             	mov    0x8(%ebp),%edx
+  80098b:	89 0a                	mov    %ecx,(%edx)
+  80098d:	8b 00                	mov    (%eax),%eax
+  80098f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800994:	eb 14                	jmp    8009aa <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800996:	8b 45 08             	mov    0x8(%ebp),%eax
+  800999:	8b 00                	mov    (%eax),%eax
+  80099b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099e:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a1:	89 0a                	mov    %ecx,(%edx)
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  8009aa:	5d                   	pop    %ebp
+  8009ab:	c3                   	ret    
+
+008009ac <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  8009ac:	55                   	push   %ebp
+  8009ad:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  8009af:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  8009b3:	7e 14                	jle    8009c9 <getint+0x1d>
+        return va_arg(*ap, long long);
+  8009b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b8:	8b 00                	mov    (%eax),%eax
+  8009ba:	8d 48 08             	lea    0x8(%eax),%ecx
+  8009bd:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009c0:	89 0a                	mov    %ecx,(%edx)
+  8009c2:	8b 50 04             	mov    0x4(%eax),%edx
+  8009c5:	8b 00                	mov    (%eax),%eax
+  8009c7:	eb 28                	jmp    8009f1 <getint+0x45>
+    }
+    else if (lflag) {
+  8009c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009cd:	74 12                	je     8009e1 <getint+0x35>
+        return va_arg(*ap, long);
+  8009cf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009d2:	8b 00                	mov    (%eax),%eax
+  8009d4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009da:	89 0a                	mov    %ecx,(%edx)
+  8009dc:	8b 00                	mov    (%eax),%eax
+  8009de:	99                   	cltd   
+  8009df:	eb 10                	jmp    8009f1 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e4:	8b 00                	mov    (%eax),%eax
+  8009e6:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009e9:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ec:	89 0a                	mov    %ecx,(%edx)
+  8009ee:	8b 00                	mov    (%eax),%eax
+  8009f0:	99                   	cltd   
+    }
+}
+  8009f1:	5d                   	pop    %ebp
+  8009f2:	c3                   	ret    
+
+008009f3 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009f3:	55                   	push   %ebp
+  8009f4:	89 e5                	mov    %esp,%ebp
+  8009f6:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009f9:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800a02:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800a06:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a09:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a10:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a14:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a17:	89 04 24             	mov    %eax,(%esp)
+  800a1a:	e8 03 00 00 00       	call   800a22 <vprintfmt>
+    va_end(ap);
+}
+  800a1f:	90                   	nop
+  800a20:	c9                   	leave  
+  800a21:	c3                   	ret    
+
+00800a22 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  800a22:	55                   	push   %ebp
+  800a23:	89 e5                	mov    %esp,%ebp
+  800a25:	56                   	push   %esi
+  800a26:	53                   	push   %ebx
+  800a27:	83 ec 40             	sub    $0x40,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a2a:	eb 17                	jmp    800a43 <vprintfmt+0x21>
+            if (ch == '\0') {
+  800a2c:	85 db                	test   %ebx,%ebx
+  800a2e:	0f 84 bf 03 00 00    	je     800df3 <vprintfmt+0x3d1>
+                return;
+            }
+            putch(ch, putdat);
+  800a34:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800a37:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800a3b:	89 1c 24             	mov    %ebx,(%esp)
+  800a3e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a41:	ff d0                	call   *%eax
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a43:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a46:	8d 50 01             	lea    0x1(%eax),%edx
+  800a49:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a4c:	0f b6 00             	movzbl (%eax),%eax
+  800a4f:	0f b6 d8             	movzbl %al,%ebx
+  800a52:	83 fb 25             	cmp    $0x25,%ebx
+  800a55:	75 d5                	jne    800a2c <vprintfmt+0xa>
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a57:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a65:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a75:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a78:	8d 50 01             	lea    0x1(%eax),%edx
+  800a7b:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a7e:	0f b6 00             	movzbl (%eax),%eax
+  800a81:	0f b6 d8             	movzbl %al,%ebx
+  800a84:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a87:	83 f8 55             	cmp    $0x55,%eax
+  800a8a:	0f 87 37 03 00 00    	ja     800dc7 <vprintfmt+0x3a5>
+  800a90:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  800a97:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a99:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a9d:	eb d6                	jmp    800a75 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a9f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800aa3:	eb d0                	jmp    800a75 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800aac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800aaf:	89 d0                	mov    %edx,%eax
+  800ab1:	c1 e0 02             	shl    $0x2,%eax
+  800ab4:	01 d0                	add    %edx,%eax
+  800ab6:	01 c0                	add    %eax,%eax
+  800ab8:	01 d8                	add    %ebx,%eax
+  800aba:	83 e8 30             	sub    $0x30,%eax
+  800abd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800ac0:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ac3:	0f b6 00             	movzbl (%eax),%eax
+  800ac6:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800ac9:	83 fb 2f             	cmp    $0x2f,%ebx
+  800acc:	7e 38                	jle    800b06 <vprintfmt+0xe4>
+  800ace:	83 fb 39             	cmp    $0x39,%ebx
+  800ad1:	7f 33                	jg     800b06 <vprintfmt+0xe4>
+            for (precision = 0; ; ++ fmt) {
+  800ad3:	ff 45 10             	incl   0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+  800ad6:	eb d4                	jmp    800aac <vprintfmt+0x8a>
+                }
+            }
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800ae6:	eb 1f                	jmp    800b07 <vprintfmt+0xe5>
+
+        case '.':
+            if (width < 0)
+  800ae8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800aec:	79 87                	jns    800a75 <vprintfmt+0x53>
+                width = 0;
+  800aee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800af5:	e9 7b ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800b01:	e9 6f ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+            goto process_precision;
+  800b06:	90                   	nop
+
+        process_precision:
+            if (width < 0)
+  800b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b0b:	0f 89 64 ff ff ff    	jns    800a75 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800b1e:	e9 52 ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800b23:	ff 45 e0             	incl   -0x20(%ebp)
+            goto reswitch;
+  800b26:	e9 4a ff ff ff       	jmp    800a75 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b2b:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b2e:	8d 50 04             	lea    0x4(%eax),%edx
+  800b31:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b34:	8b 00                	mov    (%eax),%eax
+  800b36:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800b39:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800b3d:	89 04 24             	mov    %eax,(%esp)
+  800b40:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b43:	ff d0                	call   *%eax
+            break;
+  800b45:	e9 a4 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b55:	85 db                	test   %ebx,%ebx
+  800b57:	79 02                	jns    800b5b <vprintfmt+0x139>
+                err = -err;
+  800b59:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b5b:	83 fb 18             	cmp    $0x18,%ebx
+  800b5e:	7f 0b                	jg     800b6b <vprintfmt+0x149>
+  800b60:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800b67:	85 f6                	test   %esi,%esi
+  800b69:	75 23                	jne    800b8e <vprintfmt+0x16c>
+                printfmt(putch, putdat, "error %d", err);
+  800b6b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+  800b6f:	c7 44 24 08 d5 11 80 	movl   $0x8011d5,0x8(%esp)
+  800b76:	00 
+  800b77:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800b7e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b81:	89 04 24             	mov    %eax,(%esp)
+  800b84:	e8 6a fe ff ff       	call   8009f3 <printfmt>
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b89:	e9 60 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+                printfmt(putch, putdat, "%s", p);
+  800b8e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+  800b92:	c7 44 24 08 de 11 80 	movl   $0x8011de,0x8(%esp)
+  800b99:	00 
+  800b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800ba1:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ba4:	89 04 24             	mov    %eax,(%esp)
+  800ba7:	e8 47 fe ff ff       	call   8009f3 <printfmt>
+            break;
+  800bac:	e9 3d 02 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800bb1:	8b 45 14             	mov    0x14(%ebp),%eax
+  800bb4:	8d 50 04             	lea    0x4(%eax),%edx
+  800bb7:	89 55 14             	mov    %edx,0x14(%ebp)
+  800bba:	8b 30                	mov    (%eax),%esi
+  800bbc:	85 f6                	test   %esi,%esi
+  800bbe:	75 05                	jne    800bc5 <vprintfmt+0x1a3>
+                p = "(null)";
+  800bc0:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7e 76                	jle    800c41 <vprintfmt+0x21f>
+  800bcb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800bcf:	74 70                	je     800c41 <vprintfmt+0x21f>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800bd4:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800bd8:	89 34 24             	mov    %esi,(%esp)
+  800bdb:	e8 f6 f7 ff ff       	call   8003d6 <strnlen>
+  800be0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800be3:	29 c2                	sub    %eax,%edx
+  800be5:	89 d0                	mov    %edx,%eax
+  800be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bea:	eb 16                	jmp    800c02 <vprintfmt+0x1e0>
+                    putch(padc, putdat);
+  800bec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
+  800bf7:	89 04 24             	mov    %eax,(%esp)
+  800bfa:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bfd:	ff d0                	call   *%eax
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bff:	ff 4d e8             	decl   -0x18(%ebp)
+  800c02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c06:	7f e4                	jg     800bec <vprintfmt+0x1ca>
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c08:	eb 37                	jmp    800c41 <vprintfmt+0x21f>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800c0e:	74 1f                	je     800c2f <vprintfmt+0x20d>
+  800c10:	83 fb 1f             	cmp    $0x1f,%ebx
+  800c13:	7e 05                	jle    800c1a <vprintfmt+0x1f8>
+  800c15:	83 fb 7e             	cmp    $0x7e,%ebx
+  800c18:	7e 15                	jle    800c2f <vprintfmt+0x20d>
+                    putch('?', putdat);
+  800c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c21:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+  800c28:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2b:	ff d0                	call   *%eax
+  800c2d:	eb 0f                	jmp    800c3e <vprintfmt+0x21c>
+                }
+                else {
+                    putch(ch, putdat);
+  800c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c32:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c36:	89 1c 24             	mov    %ebx,(%esp)
+  800c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c3c:	ff d0                	call   *%eax
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800c3e:	ff 4d e8             	decl   -0x18(%ebp)
+  800c41:	89 f0                	mov    %esi,%eax
+  800c43:	8d 70 01             	lea    0x1(%eax),%esi
+  800c46:	0f b6 00             	movzbl (%eax),%eax
+  800c49:	0f be d8             	movsbl %al,%ebx
+  800c4c:	85 db                	test   %ebx,%ebx
+  800c4e:	74 27                	je     800c77 <vprintfmt+0x255>
+  800c50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c54:	78 b4                	js     800c0a <vprintfmt+0x1e8>
+  800c56:	ff 4d e4             	decl   -0x1c(%ebp)
+  800c59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c5d:	79 ab                	jns    800c0a <vprintfmt+0x1e8>
+                }
+            }
+            for (; width > 0; width --) {
+  800c5f:	eb 16                	jmp    800c77 <vprintfmt+0x255>
+                putch(' ', putdat);
+  800c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800c64:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+  800c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c72:	ff d0                	call   *%eax
+            for (; width > 0; width --) {
+  800c74:	ff 4d e8             	decl   -0x18(%ebp)
+  800c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c7b:	7f e4                	jg     800c61 <vprintfmt+0x23f>
+            }
+            break;
+  800c7d:	e9 6c 01 00 00       	jmp    800dee <vprintfmt+0x3cc>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800c85:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800c89:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c8c:	89 04 24             	mov    %eax,(%esp)
+  800c8f:	e8 18 fd ff ff       	call   8009ac <getint>
+  800c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c97:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800ca0:	85 d2                	test   %edx,%edx
+  800ca2:	79 26                	jns    800cca <vprintfmt+0x2a8>
+                putch('-', putdat);
+  800ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cab:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+  800cb2:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb5:	ff d0                	call   *%eax
+                num = -(long long)num;
+  800cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800cbd:	f7 d8                	neg    %eax
+  800cbf:	83 d2 00             	adc    $0x0,%edx
+  800cc2:	f7 da                	neg    %edx
+  800cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800cca:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cd1:	e9 a8 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800cdd:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ce0:	89 04 24             	mov    %eax,(%esp)
+  800ce3:	e8 75 fc ff ff       	call   80095d <getuint>
+  800ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ceb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cee:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cf5:	e9 84 00 00 00       	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d01:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d04:	89 04 24             	mov    %eax,(%esp)
+  800d07:	e8 51 fc ff ff       	call   80095d <getuint>
+  800d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800d12:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800d19:	eb 63                	jmp    800d7e <vprintfmt+0x35c>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d22:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+  800d29:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d2c:	ff d0                	call   *%eax
+            putch('x', putdat);
+  800d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d31:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d35:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+  800d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d3f:	ff d0                	call   *%eax
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800d41:	8b 45 14             	mov    0x14(%ebp),%eax
+  800d44:	8d 50 04             	lea    0x4(%eax),%edx
+  800d47:	89 55 14             	mov    %edx,0x14(%ebp)
+  800d4a:	8b 00                	mov    (%eax),%eax
+  800d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d56:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d5d:	eb 1f                	jmp    800d7e <vprintfmt+0x35c>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800d62:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800d66:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d69:	89 04 24             	mov    %eax,(%esp)
+  800d6c:	e8 ec fb ff ff       	call   80095d <getuint>
+  800d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d74:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d77:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d7e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d85:	89 54 24 18          	mov    %edx,0x18(%esp)
+  800d89:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800d8c:	89 54 24 14          	mov    %edx,0x14(%esp)
+  800d90:	89 44 24 10          	mov    %eax,0x10(%esp)
+  800d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800d97:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800d9a:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800d9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
+  800da2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da5:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800da9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dac:	89 04 24             	mov    %eax,(%esp)
+  800daf:	e8 a4 fa ff ff       	call   800858 <printnum>
+            break;
+  800db4:	eb 38                	jmp    800dee <vprintfmt+0x3cc>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800db6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dbd:	89 1c 24             	mov    %ebx,(%esp)
+  800dc0:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dc3:	ff d0                	call   *%eax
+            break;
+  800dc5:	eb 27                	jmp    800dee <vprintfmt+0x3cc>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dca:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800dce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+  800dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800dd8:	ff d0                	call   *%eax
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800dda:	ff 4d 10             	decl   0x10(%ebp)
+  800ddd:	eb 03                	jmp    800de2 <vprintfmt+0x3c0>
+  800ddf:	ff 4d 10             	decl   0x10(%ebp)
+  800de2:	8b 45 10             	mov    0x10(%ebp),%eax
+  800de5:	48                   	dec    %eax
+  800de6:	0f b6 00             	movzbl (%eax),%eax
+  800de9:	3c 25                	cmp    $0x25,%al
+  800deb:	75 f2                	jne    800ddf <vprintfmt+0x3bd>
+                /* do nothing */;
+            break;
+  800ded:	90                   	nop
+    while (1) {
+  800dee:	e9 37 fc ff ff       	jmp    800a2a <vprintfmt+0x8>
+                return;
+  800df3:	90                   	nop
+        }
+    }
+}
+  800df4:	83 c4 40             	add    $0x40,%esp
+  800df7:	5b                   	pop    %ebx
+  800df8:	5e                   	pop    %esi
+  800df9:	5d                   	pop    %ebp
+  800dfa:	c3                   	ret    
+
+00800dfb <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800dfb:	55                   	push   %ebp
+  800dfc:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e01:	8b 40 08             	mov    0x8(%eax),%eax
+  800e04:	8d 50 01             	lea    0x1(%eax),%edx
+  800e07:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0a:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e10:	8b 10                	mov    (%eax),%edx
+  800e12:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e15:	8b 40 04             	mov    0x4(%eax),%eax
+  800e18:	39 c2                	cmp    %eax,%edx
+  800e1a:	73 12                	jae    800e2e <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e1f:	8b 00                	mov    (%eax),%eax
+  800e21:	8d 48 01             	lea    0x1(%eax),%ecx
+  800e24:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800e27:	89 0a                	mov    %ecx,(%edx)
+  800e29:	8b 55 08             	mov    0x8(%ebp),%edx
+  800e2c:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800e2e:	90                   	nop
+  800e2f:	5d                   	pop    %ebp
+  800e30:	c3                   	ret    
+
+00800e31 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800e31:	55                   	push   %ebp
+  800e32:	89 e5                	mov    %esp,%ebp
+  800e34:	83 ec 28             	sub    $0x28,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800e37:	8d 45 14             	lea    0x14(%ebp),%eax
+  800e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800e44:	8b 45 10             	mov    0x10(%ebp),%eax
+  800e47:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800e52:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e55:	89 04 24             	mov    %eax,(%esp)
+  800e58:	e8 08 00 00 00       	call   800e65 <vsnprintf>
+  800e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e63:	c9                   	leave  
+  800e64:	c3                   	ret    
+
+00800e65 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800e65:	55                   	push   %ebp
+  800e66:	89 e5                	mov    %esp,%ebp
+  800e68:	83 ec 28             	sub    $0x28,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e6b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e74:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e77:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e7a:	01 d0                	add    %edx,%eax
+  800e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e8a:	74 0a                	je     800e96 <vsnprintf+0x31>
+  800e8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e92:	39 c2                	cmp    %eax,%edx
+  800e94:	76 07                	jbe    800e9d <vsnprintf+0x38>
+        return -E_INVAL;
+  800e96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e9b:	eb 2a                	jmp    800ec7 <vsnprintf+0x62>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e9d:	8b 45 14             	mov    0x14(%ebp),%eax
+  800ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  800ea4:	8b 45 10             	mov    0x10(%ebp),%eax
+  800ea7:	89 44 24 08          	mov    %eax,0x8(%esp)
+  800eab:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800eae:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800eb2:	c7 04 24 fb 0d 80 00 	movl   $0x800dfb,(%esp)
+  800eb9:	e8 64 fb ff ff       	call   800a22 <vprintfmt>
+    // null terminate the buffer
+    *b.buf = '\0';
+  800ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ec1:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800ec7:	c9                   	leave  
+  800ec8:	c3                   	ret    
+
+00800ec9 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800ec9:	55                   	push   %ebp
+  800eca:	89 e5                	mov    %esp,%ebp
+  800ecc:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800ecf:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ed2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800edb:	b8 20 00 00 00       	mov    $0x20,%eax
+  800ee0:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800ee3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800ee6:	88 c1                	mov    %al,%cl
+  800ee8:	d3 ea                	shr    %cl,%edx
+  800eea:	89 d0                	mov    %edx,%eax
+}
+  800eec:	c9                   	leave  
+  800eed:	c3                   	ret    
+
+00800eee <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800eee:	55                   	push   %ebp
+  800eef:	89 e5                	mov    %esp,%ebp
+  800ef1:	57                   	push   %edi
+  800ef2:	56                   	push   %esi
+  800ef3:	53                   	push   %ebx
+  800ef4:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800ef7:	a1 00 20 80 00       	mov    0x802000,%eax
+  800efc:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800f02:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800f08:	6b f0 05             	imul   $0x5,%eax,%esi
+  800f0b:	01 fe                	add    %edi,%esi
+  800f0d:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800f12:	f7 e7                	mul    %edi
+  800f14:	01 d6                	add    %edx,%esi
+  800f16:	89 f2                	mov    %esi,%edx
+  800f18:	83 c0 0b             	add    $0xb,%eax
+  800f1b:	83 d2 00             	adc    $0x0,%edx
+  800f1e:	89 c7                	mov    %eax,%edi
+  800f20:	83 e7 ff             	and    $0xffffffff,%edi
+  800f23:	89 f9                	mov    %edi,%ecx
+  800f25:	0f b7 da             	movzwl %dx,%ebx
+  800f28:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800f2e:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800f34:	8b 1d 00 20 80 00    	mov    0x802000,%ebx
+  800f3a:	8b 35 04 20 80 00    	mov    0x802004,%esi
+  800f40:	89 d8                	mov    %ebx,%eax
+  800f42:	89 f2                	mov    %esi,%edx
+  800f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800f48:	c1 ea 0c             	shr    $0xc,%edx
+  800f4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800f51:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f61:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800f64:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800f6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800f6e:	74 1c                	je     800f8c <rand+0x9e>
+  800f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f73:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f78:	f7 75 dc             	divl   -0x24(%ebp)
+  800f7b:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f81:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f86:	f7 75 dc             	divl   -0x24(%ebp)
+  800f89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f92:	f7 75 dc             	divl   -0x24(%ebp)
+  800f95:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f98:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800fa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800fa7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800faa:	83 c4 24             	add    $0x24,%esp
+  800fad:	5b                   	pop    %ebx
+  800fae:	5e                   	pop    %esi
+  800faf:	5f                   	pop    %edi
+  800fb0:	5d                   	pop    %ebp
+  800fb1:	c3                   	ret    
+
+00800fb2 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800fb2:	55                   	push   %ebp
+  800fb3:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800fb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800fb8:	ba 00 00 00 00       	mov    $0x0,%edx
+  800fbd:	a3 00 20 80 00       	mov    %eax,0x802000
+  800fc2:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800fc8:	90                   	nop
+  800fc9:	5d                   	pop    %ebp
+  800fca:	c3                   	ret    
+
+00800fcb <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  800fcb:	55                   	push   %ebp
+  800fcc:	89 e5                	mov    %esp,%ebp
+  800fce:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fd1:	83 ec 20             	sub    $0x20,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  800fd4:	e8 a9 f2 ff ff       	call   800282 <getpid>
+  800fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
+  800fdd:	c7 04 24 40 13 80 00 	movl   $0x801340,(%esp)
+  800fe4:	e8 38 f3 ff ff       	call   800321 <cprintf>
+    for (i = 0; i < 5; i ++) {
+  800fe9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
+  800ff0:	00 
+  800ff1:	eb 26                	jmp    801019 <main+0x4e>
+        yield();
+  800ff3:	e8 69 f2 ff ff       	call   800261 <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  800ff8:	e8 85 f2 ff ff       	call   800282 <getpid>
+  800ffd:	8b 54 24 1c          	mov    0x1c(%esp),%edx
+  801001:	89 54 24 08          	mov    %edx,0x8(%esp)
+  801005:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801009:	c7 04 24 5c 13 80 00 	movl   $0x80135c,(%esp)
+  801010:	e8 0c f3 ff ff       	call   800321 <cprintf>
+    for (i = 0; i < 5; i ++) {
+  801015:	ff 44 24 1c          	incl   0x1c(%esp)
+  801019:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
+  80101e:	7e d3                	jle    800ff3 <main+0x28>
+    }
+    cprintf("All done in process %d.\n", getpid());
+  801020:	e8 5d f2 ff ff       	call   800282 <getpid>
+  801025:	89 44 24 04          	mov    %eax,0x4(%esp)
+  801029:	c7 04 24 7f 13 80 00 	movl   $0x80137f,(%esp)
+  801030:	e8 ec f2 ff ff       	call   800321 <cprintf>
+    cprintf("yield pass.\n");
+  801035:	c7 04 24 98 13 80 00 	movl   $0x801398,(%esp)
+  80103c:	e8 e0 f2 ff ff       	call   800321 <cprintf>
+    return 0;
+  801041:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801046:	c9                   	leave  
+  801047:	c3                   	ret    
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.d lab6/obj/user/yield.d
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.d	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/yield.d	2020-05-24 08:39:41.938255847 +0000
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.o 和 lab6/obj/user/yield.o 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.sym lab6/obj/user/yield.sym
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/user/yield.sym	1970-01-01 00:00:00.000000000 +0000
+++ lab6/obj/user/yield.sym	2020-05-24 08:39:42.082258045 +0000
@@ -0,0 +1,76 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202f75 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b7 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002cd cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801160 error_string
+00800858 printnum
+0080095d getuint
+008009ac getint
+00800dfb sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 yield.c
+00800405 strcpy
+00800261 yield
+00800247 waitpid
+0080015d sys_yield
+0080070f memmove
+00800e31 snprintf
+00800a22 vprintfmt
+00800127 sys_fork
+00800321 cprintf
+00800282 getpid
+008007b2 memcpy
+008002aa lab6_set_priority
+00800e65 vsnprintf
+00800396 umain
+00202f74 __STAB_END__
+00800171 sys_kill
+00202f75 __STABSTR_BEGIN__
+00800020 __panic
+00800579 strtol
+008003d6 strnlen
+0080028f print_pgdir
+0080026f kill
+0080054b strfind
+0080022b wait
+008002be _start
+00800eee rand
+008004c6 strncmp
+008001a0 sys_putc
+00800445 strncpy
+00800802 memcmp
+0080021e fork
+008006cf memset
+00800fcb main
+00800fb2 srand
+00800ec9 hash32
+008009f3 printfmt
+00203ddd __STABSTR_END__
+0080047c strcmp
+0080029d gettime_msec
+008001cf sys_gettime
+008002ee vcprintf
+00800070 __warn
+00800347 cputs
+008001e3 sys_lab6_set_priority
+008001ff exit
+0080013b sys_wait
+0080010c sys_exit
+00200010 __STAB_BEGIN__
+008003af strlen
+008001bb sys_pgdir
+00800519 strchr
+0080018c sys_getpid
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_badarg.out 和 lab6/obj/__user_badarg.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_badsegment.out 和 lab6/obj/__user_badsegment.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_divzero.out 和 lab6/obj/__user_divzero.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_exit.out 和 lab6/obj/__user_exit.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_faultreadkernel.out 和 lab6/obj/__user_faultreadkernel.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_faultread.out 和 lab6/obj/__user_faultread.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_forktest.out 和 lab6/obj/__user_forktest.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_forktree.out 和 lab6/obj/__user_forktree.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_hello.out 和 lab6/obj/__user_hello.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_matrix.out 和 lab6/obj/__user_matrix.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_pgdir.out 和 lab6/obj/__user_pgdir.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_priority.out 和 lab6/obj/__user_priority.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_softint.out 和 lab6/obj/__user_softint.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_spin.out 和 lab6/obj/__user_spin.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_testbss.out 和 lab6/obj/__user_testbss.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_waitkill.out 和 lab6/obj/__user_waitkill.out 不同
二进制文件 /home/xmh/origin/ucore_os_lab/labcodes/lab6/obj/__user_yield.out 和 lab6/obj/__user_yield.out 不同
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.pgdir.log lab6/.pgdir.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.pgdir.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.pgdir.log	2020-05-24 08:39:57.854498579 +0000
@@ -0,0 +1,129 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "pgdir".
+I am 2, print pgdir.
+-------------------- BEGIN --------------------
+PDE(001) 00000000-00400000 00400000 urw
+  |-- PTE(00004) 00200000-00204000 00004000 urw
+PDE(001) 00800000-00c00000 00400000 urw
+  |-- PTE(00002) 00800000-00802000 00002000 ur-
+  |-- PTE(00001) 00802000-00803000 00001000 urw
+PDE(001) afc00000-b0000000 00400000 urw
+  |-- PTE(00004) afffc000-b0000000 00004000 urw
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(00001) fac00000-fac01000 00001000 urw
+  |-- PTE(00001) fac02000-fac03000 00001000 urw
+  |-- PTE(00001) faebf000-faec0000 00001000 urw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+pgdir pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.priority.log lab6/.priority.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.priority.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.priority.log	2020-05-24 08:40:35.411070127 +0000
@@ -0,0 +1,123 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "priority".
+main: fork ok,now need to wait pids.
+child pid 6, acc 1656000, time 1001
+child pid 7, acc 2044000, time 1001
+child pid 4, acc 848000, time 1002
+child pid 5, acc 1252000, time 1003
+child pid 3, acc 444000, time 1004
+main: pid 3, acc 444000, time 1004
+main: pid 4, acc 848000, time 1004
+main: pid 5, acc 1252000, time 1004
+main: pid 6, acc 1656000, time 1004
+main: pid 7, acc 2044000, time 1004
+main: wait pids over
+stride sched correct result: 1 2 3 4 5
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.qemu.out lab6/.qemu.out
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.qemu.out	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.qemu.out	2020-05-24 08:40:35.391069823 +0000
@@ -0,0 +1,123 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "priority".
+main: fork ok,now need to wait pids.
+child pid 6, acc 1656000, time 1001
+child pid 7, acc 2044000, time 1001
+child pid 4, acc 848000, time 1002
+child pid 5, acc 1252000, time 1003
+child pid 3, acc 444000, time 1004
+main: pid 3, acc 444000, time 1004
+main: pid 4, acc 848000, time 1004
+main: pid 5, acc 1252000, time 1004
+main: pid 6, acc 1656000, time 1004
+main: pid 7, acc 2044000, time 1004
+main: wait pids over
+stride sched correct result: 1 2 3 4 5
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.softint.log lab6/.softint.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.softint.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.softint.log	2020-05-24 08:39:48.450355198 +0000
@@ -0,0 +1,131 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "softint".
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000072
+  eip  0x00800fd4
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.spin.log lab6/.spin.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.spin.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.spin.log	2020-05-24 08:40:05.450614314 +0000
@@ -0,0 +1,117 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "spin".
+I am the parent. Forking the child...
+I am the parent. Running the child...
+I am the child. spinning ...
+I am the parent.  Killing the child...
+kill returns 0
+wait returns 0
+spin may pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.testbss.log lab6/.testbss.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.testbss.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.testbss.log	2020-05-24 08:39:55.974469924 +0000
@@ -0,0 +1,139 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "testbss".
+Making sure bss works right...
+Yes, good.  Now doing a wild write off the end...
+testbss may pass.
+not valid addr c03020, and  can not find it in vma
+trapframe at 0xc03a0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03a0fd4
+  ebx  0x00000000
+  edx  0x0080149a
+  ecx  0xaffffec8
+  eax  0x00000012
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000006
+  eip  0x008010b9
+  cs   0x----001b
+  flag 0x00000282 SF,IF,IOPL=0
+  esp  0xafffff80
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:255:
+    handle user mode pgfault failed. ret=-3
+
+stack trackback:
+ebp:0xc03a0f08   eip:0xc0100bae arg :0xc010c808 0xc03a0f4c 0x000000ff 0x008002de
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc03a0f38   eip:0xc010046d arg :0xc010cbee 0x000000ff 0xc010ce90 0xfffffffd
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc03a0f78   eip:0xc0102944 arg :0xc03a0fb4 0x00000000 0x008002be 0x0000001b
+    kern/trap/trap.c:255: trap_dispatch+292
+ebp:0xc03a0fa8   eip:0xc0102be4 arg :0xc03a0fb4 0x00000000 0x00000000 0xafffffa8
+    kern/trap/trap.c:358: trap+74
+ebp:0xafffffa8   eip:0xc01036ac arg :0x00000000 0x00000000 0x00000000 0x00000000
+    kern/trap/trapentry.S:24: <unknown>+0
+ebp:0xafffffd8   eip:0x008003a1 arg :0x00000000 0x00000000 0x00000000 0x00000000
+    user/libs/umain.c:7: umain+10
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.waitkill.log lab6/.waitkill.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.waitkill.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.waitkill.log	2020-05-24 08:40:07.818650379 +0000
@@ -0,0 +1,115 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "waitkill".
+wait child 1.
+child 2.
+child 1.
+kill parent ok.
+kill child1 ok.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
diff -ruP /home/xmh/origin/ucore_os_lab/labcodes/lab6/.yield.log lab6/.yield.log
--- /home/xmh/origin/ucore_os_lab/labcodes/lab6/.yield.log	1970-01-01 00:00:00.000000000 +0000
+++ lab6/.yield.log	2020-05-24 08:39:59.690526559 +0000
@@ -0,0 +1,118 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc0100036 (phys)
+  etext  0xc010c737 (phys)
+  edata  0xc01b4000 (phys)
+  end    0xc01b71d8 (phys)
+Kernel executable memory footprint: 733KB
+ebp:0xc012df38   eip:0xc0100bae arg :0x00010094 0x00010094 0xc012df68 0xc01000e4
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc012df48   eip:0xc0100ea2 arg :0x00000000 0x00000000 0x00000000 0xc012dfb8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012df68   eip:0xc01000e4 arg :0x00000000 0xc012df90 0xffff0000 0xc012df94
+    kern/init/init.c:59: grade_backtrace2+33
+ebp:0xc012df88   eip:0xc010010e arg :0x00000000 0xffff0000 0xc012dfb4 0x0000002a
+    kern/init/init.c:64: grade_backtrace1+38
+ebp:0xc012dfa8   eip:0xc010012d arg :0x00000000 0xc0100036 0xffff0000 0x0000001d
+    kern/init/init.c:69: grade_backtrace0+23
+ebp:0xc012dfc8   eip:0xc0100153 arg :0xc010c75c 0xc010c740 0x000031d8 0x00000000
+    kern/init/init.c:74: grade_backtrace+34
+ebp:0xc012dff8   eip:0xc010008b arg :0xc010c954 0xc010c95c 0xc0100e2a 0xc010c97b
+    kern/init/init.c:33: kern_init+84
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31814
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "yield".
+Hello, I am process 2.
+Back in process 2, iteration 0.
+Back in process 2, iteration 1.
+Back in process 2, iteration 2.
+Back in process 2, iteration 3.
+Back in process 2, iteration 4.
+All done in process 2.
+yield pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:541:
+    initproc exit.
+
+stack trackback:
+ebp:0xc0399f88   eip:0xc0100bae arg :0xc010c808 0xc0399fcc 0x0000021d 0xc0399fb8
+    kern/debug/kdebug.c:351: print_stackframe+22
+ebp:0xc0399fb8   eip:0xc010046d arg :0xc010e7ec 0x0000021d 0xc010e83e 0x00000000
+    kern/debug/panic.c:27: __panic+103
+ebp:0xc0399fe8   eip:0xc010a1a2 arg :0x00000000 0x00000000 0x00000000 0x00000010
+    kern/process/proc.c:541: do_exit+91
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ 文件尾没有换行符
